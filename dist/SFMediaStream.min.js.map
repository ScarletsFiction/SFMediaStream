{"version":3,"sources":["a_init.js","AudioStreamer.js","BufferHeader.js","Convert.js","MediaBuffer.js","MediaPlayer.js","MediaPresenter.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js","VideoStreamer.js","z_extra.js"],"names":["global","factory","exports","_typeof","module","window","this","moduleMode","ScarletsMedia","audioContext","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","ScarletsMediaEffect","audioCodecs","webm","mp4","ogg","videoCodecs","3gpp","waitingUnlock","userInteracted","AudioContext","console","error","mobileMediaUnlock","e","emptyBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","onended","disconnect","removeListener","start","noteOn","resume","document","removeEventListener","i","length","addEventListener","ScarletsAudioStreamer","chunksDuration","chunksSeconds","scope","debug","playing","latency","mimeType","bufferElement","outputNode","directAudioOutput","bufferHeader","mediaBuffer","audioElement","element","Audio","audioNode","target","node","createGain","stop","buffering","setBufferHeader","packet","data","arrayBuffer","MediaBuffer","Uint8Array","src","objectURL","decodeAudioData","slice","audioBuffer","noiseLength","getChannelData","webAudioBufferInsert","index","temp","frameCount","channelLength","numberOfChannels","newBuffer","sampleRate","set","subarray","cleanNoise","context","playStream","bufferElementIndex","realtimeBufferPlay","log","byteLength","Number","String","Date","now","baseLatency","finalBuffer","addBufferHeader","receiveBuffer","append","paused","play","BufferHeader","audio/webm;codecs=opus","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","MediaSource","URL","createObjectURL","removing","totalTime","sourceBuffer","buffers","startAppending","appendBuffer","onsourceopen","addSourceBuffer","mode","onerror","onupdateend","remove","updating","shift","buffered","push","abort","readyState","endOfStream","ScarletsMediaPlayer","self","constructor","createElement","body","appendChild","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","load","canPlayType","extra","objectPropertyLinker","preload","crossorigin","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","pause","currentTime","volume","stillWaiting","successCallback","errorCallback","then","catch","fadeNumber","num","callback","prepare","links","force","querySelectorAll","once","off","insertAdjacentHTML","split","join","eventRegistered","eventTrigger","type","on","eventName","name","splice","indexOf","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","currentSrc","j","x","random","ScarletsMediaPresenter","options","mediaStream","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","captureStream","polyfill","mediaType","video","supportedMimeType","codecsList","format","codecs","MediaRecorder","isTypeSupported","audio","createMediaStreamSource","pendingConnect","firstSourceConnect","bufferHeaderLength","onstart","isVideo","ondataavailable","state","size","predefinedBuffer","buff","Blob","atob","UInt","charCodeAt","getBufferHeader","startTime","hasVideo","setTimeout","streamingTime","createMediaStreamDestination","reAddTracks","streams","getTracks","addTrack","afterStop","startRecording","screen","navigator","mediaDevices","getDisplayMedia","getUserMedia","stopRecording","removeTrack","chorus","sourceNode","output","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","value","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","abs","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","denormalize","normalize","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","to","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","fadeTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode","ScarletsVideoStreamer","videoElement","audioConnect","audioDisconnect","isMobile","test","userAgent","property","configurable","min","max","maxFade","from","increment","onIncrease","onFinish","current","interval","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseInterval","clearPreciseInterval","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","Media","MediaEffect","AudioStreamer","VideoStreamer","MediaPlayer","MediaPresenter"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\r\n\tScarletsFiction MediaStream Library\r\n\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n*/\r\n(function(global, factory){\r\n  if(typeof exports === 'object' && typeof module !== 'undefined'){\r\n  \tmodule.exports = {};\r\n  \tfactory(module.exports, window, true);\r\n  }\r\n  else factory(global, window);\r\n}(this || window, (function(global, window, moduleMode){'use strict';\r\n// ===== Module Init =====\r\n\r\n// Initialize global data\r\nvar ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nvar ScarletsMediaEffect = {};\r\nvar audioCodecs = {\r\n\twebm:['opus', 'vorbis'],\r\n\tmp4:['mp4a.67', 'mp4a.40.29', 'mp4a.40.5', 'mp4a.40.2', 'mp3'],\r\n\togg:['opus', 'vorbis'], // This may not work on mobile\r\n};\r\nvar videoCodecs = {\r\n\twebm:['vp8,opus', 'vp8,vorbis'],\r\n\tmp4:['mp4v.20.8,mp4a.40.2', 'mp4v.20.240,mp4a.40.2', 'avc1.42E01E,mp4a.40.2', 'avc1.58A01E,mp4a.40.2', 'avc1.64001E,mp4a.40.2'],\r\n\t'3gpp':['mp4v.20.8,samr'],\r\n\togg:['dirac,vorbis', 'theora,vorbis'], // This may not work on mobile\r\n};\r\n\r\nvar waitingUnlock = [];\r\nvar userInteracted = false;\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tif(!window.AudioContext) return console.error(\"`AudioContext` was not available\");\r\n\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\r\n\t\tfor (var i = 0; i < waitingUnlock.length; i++) {\r\n\t\t\twaitingUnlock[i]();\r\n\t\t}\r\n\r\n\t\twaitingUnlock.length = 0;\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","// Minimum 3 bufferElement\r\nvar ScarletsAudioStreamer = function(chunksDuration){\r\n\tvar bufferElement = 3;\r\n\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\tscope.bufferElement = [];\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar bufferHeader = false;\r\n\tvar mediaBuffer = false;\r\n\r\n\tvar audioElement = scope.element = new Audio();\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(audioElement);\r\n\r\n\t// ToDo: we may need to try to recreate the element if error happen\r\n\t// Or reducing the extra latency\r\n\taudioElement.addEventListener('error', function(e){\r\n\t\tconsole.error(e.target.error);\r\n\t});\r\n\r\n\tscope.connect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(node){\r\n\t\tscope.outputNode.disconnect(node);\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect(node);\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet.data){\r\n\t\t\tbufferHeader = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\r\n\r\n\t\taudioElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\r\n\t\t// Get buffer noise length\r\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t// headerDuration = audioBuffer.duration;\r\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\r\n\t\t});\r\n\t}\r\n\r\n\t// ===== For handling WebAudio =====\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tvar noiseLength = 0;\r\n\tfunction cleanNoise(buffer){\r\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\r\n\t\tif(frameCount === 0) return false;\r\n\r\n  \t\tvar channelLength = buffer.numberOfChannels;\r\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\r\n\r\n\t\tfor (var i = 0; i < channelLength; i++) {\r\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\r\n\t    }\r\n\r\n\t    return newBuffer;\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tbuffer = cleanNoise(buffer);\r\n\r\n\t\tif(buffer === false) return false;\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context && directAudioOutput === false)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ===== Realtime Playing =====\r\n\t// Play audio immediately after received\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tvar bufferElementIndex = 0;\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.playing === false) return;\r\n\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(arrayBuffer[0].byteLength === 0) return;\r\n\t\tarrayBuffer = arrayBuffer[0];\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) + chunksSeconds + scope.audioContext.baseLatency;\r\n\r\n\t\tvar index = bufferElementIndex;\r\n\t\tbufferElementIndex++;\r\n\t\tif(bufferElementIndex > 2)\r\n\t\t\tbufferElementIndex = 0;\r\n\r\n\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\r\n\t\t\tif(webAudioBufferInsert(index, buffer) === false)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tscope.bufferElement[index].start(0);\r\n\t\t});\r\n\t}\r\n\r\n\t// ====== Synchronous Playing ======\r\n\t// Play next audio when last audio was finished\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tmediaBuffer.append(arrayBuffer[0]);\r\n\r\n\t\tif(audioElement.paused)\r\n\t\t\taudioElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +  scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}","var BufferHeader = {\n\t\"audio/webm;codecs=opus\": \"GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQRChYECGFOAZwH/////////FUmpZpkq17GDD0JATYCGQ2hyb21lV0GGQ2hyb21lFlSua7+uvdeBAXPFh7o5nyc1kHqDgQKGhkFfT1BVU2Oik09wdXNIZWFkAQIAAIC7AAAAAADhjbWERzuAAJ+BAmJkgSAfQ7Z1Af/////////ngQCjjIEAAID/A//+//7//qM=\"\n};\n\nfunction getBufferHeader(type) {\n\tvar buff = BufferHeader[type];\n\tif(buff === void 0) return false;\n\n\tif(buff.constructor === Blob)\n\t\treturn buff;\n\n\tbuff = atob(buff);\n\n\tvar UInt = new Uint8Array(buff.length);\n\tfor (var i = 0; i < buff.length; i++)\n\t\tUInt[i] = buff.charCodeAt(i);\n\n\treturn BufferHeader[type] = new Blob([UInt]);\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","var MediaBuffer = function(mimeType, chunksDuration, bufferHeader){\r\n\tvar scope = this;\r\n\tscope.source = new MediaSource();\r\n\tscope.objectURL = URL.createObjectURL(scope.source);\r\n\r\n\tvar removing = false;\r\n\tvar totalTime = 0; // miliseconds\r\n\tvar sourceBuffer = null;\r\n\tvar buffers = [];\r\n\r\n\tscope.source.onsourceopen = function(){\r\n\t\tsourceBuffer = scope.source.addSourceBuffer(mimeType);\r\n\t\tsourceBuffer.mode = 'sequence';\r\n\t\tsourceBuffer.appendBuffer(bufferHeader);\r\n\r\n\t\tsourceBuffer.onerror = function(e){\r\n\t\t\tconsole.error(\"SourceBuffer error:\", e);\r\n\t\t}\r\n\r\n\t\tsourceBuffer.onupdateend = function(){\r\n\t\t\tif(removing){\r\n\t\t\t\tremoving = false;\r\n\t\t\t\ttotalTime = 10000;\r\n\r\n\t\t\t\t// 0 ~ 10 seconds\r\n\t\t\t\tsourceBuffer.remove(0, 10);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!sourceBuffer.updating && buffers.length !== 0)\r\n\t\t\t\tstartAppending(buffers.shift());\r\n\t\t};\r\n\t};\r\n\r\n\tfunction startAppending(buffer){\r\n\t\tsourceBuffer.appendBuffer(buffer);\r\n\t\ttotalTime += chunksDuration;\r\n\t\t// console.log(totalTime, buffer);\r\n\t}\r\n\r\n\tscope.source.onerror = function(e){\r\n\t\tconsole.error(\"MediaSource error:\", e);\r\n\t}\r\n\r\n\tscope.append = function(arrayBuffer){\r\n\t\tif(sourceBuffer === null)\r\n\t\t\treturn false;\r\n\r\n\t\tif(sourceBuffer.buffered.length === 2)\r\n\t\t\tconsole.log('something wrong');\r\n\r\n\t\tif(totalTime >= 20000)\r\n\t\t\tremoving = true;\r\n\r\n\t\tif(!sourceBuffer.updating)\r\n\t\t\tstartAppending(arrayBuffer);\r\n\t\telse\r\n\t\t\tbuffers.push(arrayBuffer);\r\n\r\n\t\treturn totalTime/1000;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tif(sourceBuffer.updating)\r\n\t\t\tsourceBuffer.abort();\r\n\r\n\t\tif(scope.source.readyState === \"open\")\r\n\t\t\tscope.source.endOfStream();\r\n\t}\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nvar ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tif(element === void 0)\r\n\t\telement = 'audio';\r\n\r\n\tif(element.constructor === String){\r\n\t\tif(element !== 'audio' && element !== 'video')\r\n\t\t\treturn console.error('Supported player is \"audio\" or \"video\"');\r\n\r\n\t\telement = document.createElement(element);\r\n\t\tdocument.body.appendChild(element);\r\n\t}\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\telement.crossorigin = 'anonymous';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tself.stop = function(){\r\n\t\tself.pause();\r\n\t\tself.currentTime = 0;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tvar stillWaiting = false;\r\n\tfunction play(successCallback, errorCallback){\r\n\t\telement.play().then(function(){\r\n\t\t\tstillWaiting = false;\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t}).catch(function(e){\r\n\t\t\tif(errorCallback) errorCallback(e);\r\n\t\t\telse{\r\n\t\t\t\t// If user haven't interacted with the page\r\n\t\t\t\t// and media play was requested, let's pending it\r\n\t\t\t\tif(userInteracted === false){\r\n\t\t\t\t\tif(stillWaiting === false){\r\n\t\t\t\t\t\twaitingUnlock.push(function(){\r\n\t\t\t\t\t\t\tplay(successCallback, errorCallback);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tself.play = function(successCallback, errorCallback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\tplay(successCallback, errorCallback);\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, successCallback);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tplay(successCallback, errorCallback);\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(self.preload && callback){\r\n\t\t\tself.once('canplay', callback);\r\n\t\t\tself.once('error', function(){\r\n\t\t\t\tself.off('canplay', callback);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links.split('\"').join('\\\\\"')}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i].split('\"').join('\\\\\"')}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload)\r\n\t\t\telement.load();\r\n\r\n\t\telse if(callback)\r\n\t\t\tcallback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.removeEventListener(eventName, callback, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tvar src = this.list[index].stream;\r\n\t\t\tif(self.currentSrc === src)\r\n\t\t\t\tself.play();\r\n\t\t\telse self.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// options = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nvar ScarletsMediaPresenter = function(options, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\r\n\t// The options are optional\r\n\t//var options = {\r\n\t//    mediaStream: new MediaStream(), // For custom media stream\r\n\t//    element: document.querySelector(...), // Record <audio>, <video>, <canvas>\r\n\t//    screen: true, // Recording the screen\r\n\t//\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    },\r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front ? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\tscope.mediaStream = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\tscope.mediaGranted = false;\r\n\r\n\tif(options === void 0)\r\n\t\toptions = {};\r\n\r\n\tif(options.element !== void 0)\r\n\t\toptions.mediaStream = options.element.captureStream();\r\n\r\n\tscope.debug = options.debug;\r\n\r\n\t// Deprecated\r\n\tscope.options = options;\r\n\r\n\tscope.polyfill = void 0;\r\n\r\n\tvar mediaType = options.video ? 'video' : 'audio';\r\n\r\n\t// Check supported mimeType and codecs for the recorder\r\n\tif(!options.mimeType){\r\n\t\tvar supportedMimeType = false;\r\n\t\tvar codecsList = mediaType === 'audio' ? audioCodecs : videoCodecs;\r\n\r\n\t\tfor(var format in codecsList){\r\n\t\t\tvar mimeType = mediaType+'/'+format;\r\n\t\t\tvar codecs = codecsList[format];\r\n\r\n\t\t\tfor (var i = 0; i < codecs.length; i++) {\r\n\t\t\t\tvar temp = mimeType+';codecs='+codecs[i];\r\n\t\t\t\tif(MediaRecorder.isTypeSupported(temp) && MediaSource.isTypeSupported(temp)){\r\n\t\t\t\t\tsupportedMimeType = temp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(supportedMimeType === false && MediaRecorder.isTypeSupported(mimeType) && MediaSource.isTypeSupported(mimeType))\r\n\t\t\t\tsupportedMimeType = mimeType;\r\n\r\n\t\t\tif(supportedMimeType !== false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toptions.mimeType = supportedMimeType;\r\n\t\tconsole.log(\"mimeType: \"+supportedMimeType);\r\n\t}\r\n\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\t// For adding effect later (if audio available)\r\n\t\tif(options.audio !== void 0){\r\n\t\t\tscope.source = ScarletsMedia.audioContext.createMediaStreamSource(mediaStream);\r\n\t\t\tscope.mediaStream = mediaStream = scope.destination.stream;\r\n\r\n\t\t\tif(pendingConnect.length !== 0){\r\n\t\t\t\tfor (var i = 0; i < pendingConnect.length; i++)\r\n\t\t\t\t\tscope.source.connect(pendingConnect[i]);\r\n\r\n\t\t\t\tfirstSourceConnect = false;\r\n\t\t\t\tpendingConnect.length = 0;\r\n\t\t\t}\r\n\t\t\telse scope.source.connect(scope.destination);\r\n\t\t}\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, options, scope.polyfill);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t};\r\n\r\n\t\tconst isVideo = options.video !== void 0;\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e){\r\n\t\t\t// Stream segments after the header was obtained\r\n\t\t\tif(bufferHeaderLength !== false){\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Return if the recording was stopped\r\n\t\t\tif(scope.mediaRecorder.state !== 'recording')\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(e.data.size <= 1) return;\r\n\r\n\t\t\t// The audio buffer can contain some duration that causes a noise\r\n\t\t\t// So we will need to remove it on streamer side\r\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\r\n\t\t\tscope.bufferHeader = e.data;\r\n\r\n\t\t\tvar predefinedBuffer = getBufferHeader(scope.mediaRecorder.mimeType);\r\n\t\t\tif(predefinedBuffer !== false)\r\n\t\t\t\tscope.bufferHeader = predefinedBuffer;\r\n\r\n\t\t\tbufferHeaderLength = scope.bufferHeader.size;\r\n\r\n\t\t\tif(bufferHeaderLength > 900 || bufferHeaderLength < 100)\r\n\t\t\t\tconsole.log('%c[WARN] The buffer header length was more than 0.9KB or smaller than 0.1KB. This sometime cause decode error on streamer side. Try to avoid any heavy CPU usage when using the recorder.', \"color:yellow\");\r\n\r\n\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\tscope.onRecordingReady({\r\n\t\t\t\t\tmimeType:options.mimeType,\r\n\t\t\t\t\tstartTime:Date.now(),\r\n\t\t\t\t\thasVideo:isVideo,\r\n\t\t\t\t\tdata:scope.bufferHeader\r\n\t\t\t\t});\r\n\r\n\t\t\tscope.recordingReady = true;\r\n\r\n\t\t\tif(latency === 100) return;\r\n\r\n\t\t\t// Record with the custom latency\r\n\t\t\tscope.mediaRecorder.stop();\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tscope.mediaRecorder.start(latency);\r\n\t\t\t}, 10);\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start(isVideo ? 565 : 100);\r\n\t}\r\n\r\n\tvar pendingConnect = [];\r\n\r\n\tscope.source = void 0;\r\n\tscope.destination = ScarletsMedia.audioContext.createMediaStreamDestination();\r\n\r\n\tvar firstSourceConnect = true;\r\n\tscope.connect = function(node){\r\n\t\tif(scope.source === void 0){\r\n\t\t\tpendingConnect.push(node);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(firstSourceConnect){\r\n\t\t\ttry{\r\n\t\t\t\tscope.source.disconnect(scope.destination);\r\n\t\t\t}catch(e){}\r\n\r\n\t\t\tfirstSourceConnect = false;\r\n\t\t}\r\n\r\n\t\tscope.source.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(node){\r\n\t\tif(scope.source)\r\n\t\t\tscope.source.disconnect(node);\r\n\t\telse{\r\n\t\t\tvar i = pendingConnect.indexOf(node);\r\n\t\t\tif(i === -1)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tpendingConnect.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reAddTracks(mediaStream) {\r\n\t\tvar streams = mediaStream.getTracks();\r\n\t\tfor(var i = 0; i < streams.length; i++)\r\n\t\t\tscope.mediaRecorder.stream.addTrack(streams[i]);\r\n\r\n\t\tscope.mediaRecorder.start(latency);\r\n\t\tscope.recording = true;\r\n\t}\r\n\r\n\tvar afterStop = false;\r\n\tscope.startRecording = function(){\r\n\t\tif(afterStop){\r\n\t\t\tafterStop = false;\r\n\r\n\t\t\tif(!options.mediaStream){ // Not custom\r\n\t\t\t\tif(!scope.options.screen) // Camera / Audio\r\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(reAddTracks).catch(console.error);\r\n\t\t\t\telse // Screen\r\n\t\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(reAddTracks).catch(console.error);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if(scope.mediaGranted === false || scope.mediaRecorder === null){\r\n\t\t\tscope.recordingReady = false;\r\n\r\n\t\t\tif(options.mediaStream) // Custom\r\n\t\t\t\tmediaGranted(options.mediaStream);\r\n\t\t\telse if(!scope.options.screen) // Camera / Audio\r\n\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(mediaGranted).catch(console.error);\r\n\t\t\telse // Screen\r\n\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(mediaGranted).catch(console.error);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(scope.mediaRecorder.state !== 'recording'){\r\n\t\t\tscope.mediaRecorder.start(latency);\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tscope.recording = false;\r\n\t\tscope.mediaRecorder.stop();\r\n\r\n\t\tif(!options.mediaStream){\r\n\t\t\t// Turn off stream from microphone/camera\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// scope.mediaRecorder.ondataavailable = null;\r\n\t\t// scope.mediaRecorder.onstart = null;\r\n\t\t// scope.bufferHeader = null;\r\n\r\n\t\tafterStop = true;\r\n\t};\r\n}\r\n\r\nScarletsMediaPresenter.isTypeSupported = function(mimeType){\r\n\tif(!MediaSource.isTypeSupported(mimeType))\r\n\t\treturn \"MediaSource is not supporting this type\";\r\n\tif(!MediaRecorder.isTypeSupported(mimeType))\r\n\t\treturn \"MediaRecorder is not supporting this type\";\r\n\treturn \"Maybe supported\";\r\n}","ScarletsMediaEffect.chorus = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.conReverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.delay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.distortion = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.dubDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.fade = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.flanger = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.harmonizer = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMediaEffect.noise = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};\r\n","ScarletsMediaEffect.pingPongDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.pitchShift = function(sourceNode){\r\n    var context = ScarletsMedia.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMediaEffect.reverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.stereoPanner = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.tremolo = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.vibrato = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","// Minimum 3 bufferElement\r\nvar ScarletsVideoStreamer = function(videoElement, chunksDuration){\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar mediaBuffer = false;\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(videoElement);\r\n\r\n\tvideoElement.addEventListener('error', function(e){\r\n\t\tconsole.error(e.target.error);\r\n\t});\r\n\r\n\tscope.audioConnect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.audioDisconnect = function(){\r\n\t\toutputNode.disconnect();\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect();\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet || !packet.data)\r\n\t\t\treturn;\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\r\n\t\tconsole.log(mediaBuffer);\r\n\t\tvideoElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tmediaBuffer.append(arrayBuffer[0]);\r\n\r\n\t\tif(videoElement.paused)\r\n\t\t\tvideoElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) + scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t// \r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\t\t\t\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};\r\n\r\nif(moduleMode){\r\n\tglobal.Media = ScarletsMedia;\r\n\tglobal.MediaEffect = ScarletsMediaEffect;\r\n\tglobal.AudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.VideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.MediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.MediaPresenter = ScarletsMediaPresenter;\r\n}\r\nelse{\r\n\tglobal.ScarletsMedia = ScarletsMedia;\r\n\tglobal.ScarletsMediaEffect = ScarletsMediaEffect;\r\n\tglobal.ScarletsAudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.ScarletsVideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.ScarletsMediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.ScarletsMediaPresenter = ScarletsMediaPresenter;\r\n}\r\n\r\n// ===== Module End =====\r\n})));"]}