{"version":3,"sources":["SFMediaStream.js"],"names":["window","ScarletsMedia","audioContext","AudioContext","ScarletsMediaPresenter","streamInfo","latency","scope","this","debug","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","fileReader","FileReader","options","audio","video","MediaRecorder","isTypeSupported","mimeType","recordingInterval","mediaStream","bufferHeader","bufferHeaderLength","console","log","onstart","e","requestData","ondataavailable","onload","arrayBuffer","result","byteLength","setTimeout","streamingTime","Number","String","Date","now","slice","readAsArrayBuffer","data","start","setInterval","startRecording","stream","active","navigator","mediaDevices","getUserMedia","then","catch","error","stopRecording","clearInterval","stop","streams","getTracks","i","length","removeTrack","ScarletsAudioBufferStreamer","bufferElement","chunksDuration","bufferAvailable","bufferPending","currentBuffer","playing","buffering","streaming","currentDuration","realtime","bufferSkip","webAudio","isMobile","setBufferHeader","decodeAudioData","audioBuffer","duration","initAudioEvent","onended","disconnect","URL","revokeObjectURL","src","playAvailable","indexOf","fillEmptyBuffer","addBufferElement","push","createBufferSource","audioHandler","Audio","webAudioBufferInsert","index","buffer","transferFunction","connect","destination","receiveBuffer","unplayed","baseLatency","realtimeBufferInterval","realtimeBufferPlay","Blob","type","createObjectURL","load","play","currentTime","shift","playBuffer","playStream","splice","ScarletsMediaPlayer","element","self","functionLinker","propertyLinker","tagName","concat","audioFadeEffect","objectPropertyLinker","preload","speed","set","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","callback","paused","ended","fadeNumber","num","pause","prepare","links","force","temp","querySelectorAll","remove","appendChild","eventRegistered","eventTrigger","on","eventName","name","toLowerCase","addEventListener","off","removeEventListener","once","playlist","currentIndex","list","original","loop","shuffled","reload","lists","shuffle","add","obj","next","previous","Object","values","j","x","Math","floor","random","emptyBuffer","createBuffer","mobileMediaUnlock","source","document","noteOn","resume","test","userAgent","target","property","defineProperty","get","value","enumerable","configurable","maxFade","from","to","increment","fadeTime","onIncrease","onFinish","current","interval","abs","Infinity","timer","ceil"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n'use strict';\r\n\r\n// Initialize global data\r\nwindow.ScarletsMedia = {\r\n\taudioContext: window.AudioContext ? new AudioContext() : false\r\n}\r\n\r\n// streamInfo = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nwindow.ScarletsMediaPresenter = function(streamInfo, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var streamInfo = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\r\n\tscope.mediaGranted = false;\r\n\r\n\tvar fileReader = new FileReader();\r\n\tscope.options = {};\r\n\tif(streamInfo.audio&&!streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm'))\r\n\t\t\tscope.options.mimeType = 'audio/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4';\r\n\t}\r\n\telse if(!streamInfo.audio&&streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg'))\r\n\t\t\tscope.options.mimeType = 'video/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'video/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\telse{\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\r\n\tvar recordingInterval = false;\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, scope.options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\tscope.mediaRecorder.requestData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e) {\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tvar arrayBuffer = this.result;\r\n\r\n\t\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\t\t\t\t\tif(bufferHeaderLength==0){\r\n\t\t\t\t\t\tbufferHeaderLength = false;\r\n\t\t\t\t\t\tsetTimeout(function(){scope.mediaRecorder.requestData()}, 1);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// ToDo: Clean media header\r\n\t\t\t\t\tscope.bufferHeader = arrayBuffer;\r\n\r\n\t\t\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\t\t\tscope.onRecordingReady(scope.bufferHeader);\r\n\t\t\t\t\tscope.recordingReady = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(scope.onBufferProcess){\r\n\t\t\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\t\t\tscope.onBufferProcess([arrayBuffer, streamingTime]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(e.data);\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start();\r\n\r\n\t\t// Stop recording after 3 seconds and broadcast it to server\r\n\t\trecordingInterval = setInterval(function() {\r\n\t\t\tif(!scope.recordingReady) return;\r\n\t\t\tscope.mediaRecorder.requestData();\r\n\t\t}, latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(!scope.mediaGranted || !scope.mediaRecorder.stream || !scope.mediaRecorder.stream.active){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(streamInfo).then(mediaGranted).catch(console.error);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start();\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tclearInterval(recordingInterval);\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}\r\n\r\n// Minimum 3 bufferElement\r\nwindow.ScarletsAudioBufferStreamer = function(bufferElement, chunksDuration){\r\n\tif(!bufferElement || bufferElement < 3) bufferElement = 3;\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.bufferElement = [];\r\n\tscope.bufferAvailable = [];\r\n\tscope.bufferPending = [];\r\n\tscope.currentBuffer = 0;\r\n\tscope.playing = false;\r\n\tscope.buffering = false;\r\n\tscope.streaming = false;\r\n\tscope.currentDuration = false;\r\n\tscope.latency = 0;\r\n\tscope.error = 0;\r\n\tscope.realtime = false;\r\n\tscope.bufferSkip = 0.07;\r\n\tscope.mimeType = null;\r\n\r\n\t// Use webAudio for mobile, and HTML5 audio for computer\r\n\tscope.webAudio = isMobile()?true:false; // Mobile browser have security on HTML element\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\t// Avoid webAudio for computer browser because memory usage\r\n\r\n\tvar bufferHeader = false;\r\n\tvar bufferHeaderLength = false;\r\n\r\n\tscope.setBufferHeader = function(arrayBuffer){\r\n\t\tif(!arrayBuffer){\r\n\t\t\tbufferHeader = bufferHeaderLength = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tbufferHeader = arrayBuffer;\r\n\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\r\n\t\t// Find buffer skip\r\n\t\tif(scope.audioContext)\r\n\t\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t\tscope.bufferSkip = audioBuffer.duration;\r\n\t\t\t});\r\n\t}\r\n\r\n\tvar initAudioEvent = function(i){\r\n\t\tscope.bufferElement[i].onended = function(){\r\n\t\t\tif(scope.debug) console.log(\"Buffer ended with ID: \"+i);\r\n\r\n\t\t\tif(!scope.webAudio){ // HTML5 Audio\r\n\t\t\t\tURL.revokeObjectURL(scope.bufferElement[i].src);\r\n\t\t\t\tscope.bufferElement[i].src = '';\r\n\t\t\t} else this.disconnect(0);\r\n\r\n\t\t\tif(!scope.realtime){\r\n\t\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t\t\tscope.playing = false;\r\n\t\t\t\tscope.buffering = true;\r\n\t\t\t\tscope.playAvailable();\r\n\r\n\t\t\t\tif(scope.bufferAvailable.indexOf(false)!=-1&&scope.bufferPending.length!=0)\r\n\t\t\t\t\tfillEmptyBuffer();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// First initialization\r\n\tfor (var i = 0; i < bufferElement; i++) addBufferElement(i);\r\n\tfunction addBufferElement(i){\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.bufferElement.push(scope.audioContext.createBufferSource());\r\n\t\t\tscope.bufferAvailable.push(false);\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tvar audioHandler = new Audio();\r\n\t\t\tif(audioHandler){\r\n\t\t\t\tscope.bufferElement.push(audioHandler);\r\n\t\t\t\tscope.bufferAvailable.push(false);\r\n\t\t\t\tinitAudioEvent(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeaderLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeaderLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(!scope.streaming) return;\r\n\t\tvar streamingTime = arrayBuffer[1];\r\n\t\tscope.realtime = false;\r\n\r\n\t\tif(chunksDuration){\r\n\t\t\tvar unplayed = scope.bufferPending.length;\r\n\t\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\t\tif(scope.bufferAvailable[i]) unplayed++;\r\n\t\t\t}\r\n\t\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) \r\n\t\t\t\t\t\t\t\t+ chunksDuration*unplayed + scope.audioContext.baseLatency;\r\n\t\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.push(arrayBuffer[0]);\r\n\t\tfillEmptyBuffer();\r\n\r\n\t\tif(scope.buffering)\r\n\t\t\tscope.playAvailable();\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tvar transferFunction = scope.bufferElement[index].onended;\r\n\t\tscope.bufferElement[index] = scope.audioContext.createBufferSource();\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\tscope.bufferElement[index].onended = transferFunction;\r\n\t}\r\n\r\n\tvar fileReader = new FileReader();\r\n\tvar realtimeBufferInterval = 0; // Need 3 bufferElement, other than this will give lower quality\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +\r\n\t\t\tchunksDuration/1000 + scope.audioContext.baseLatency;\r\n\r\n\t\tscope.realtime = true;\r\n\t\t\r\n\t\tvar index = realtimeBufferInterval;\r\n\t\trealtimeBufferInterval++;\r\n\t\tif(realtimeBufferInterval > 2)\r\n\t\t\trealtimeBufferInterval = 0;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, arrayBuffer[0]], {type:scope.mimeType}));\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tURL.revokeObjectURL(scope.bufferElement[index].src);\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, arrayBuffer[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\t}\r\n\r\n\tvar fillEmptyBuffer = function(){\r\n\t\tvar index = scope.bufferAvailable.indexOf(false, scope.currentBuffer);\r\n\t\tif(index==-1)\r\n\t\t\tindex = scope.bufferAvailable.indexOf(false);\r\n\t\tif(index==-1||scope.bufferPending.length==0)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.shift();\r\n\t\tscope.bufferAvailable[index] = true;\r\n\r\n\t\tif(scope.buffering) scope.playAvailable();\r\n\t\tif(scope.debug) console.log(\"Buffer updated with ID: \"+index);\r\n\t}\r\n\r\n\tscope.playBuffer = function(index){\r\n\t\tif(!scope.bufferElement[index].duration)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.debug) console.log(\"Current stream duration: \"+scope.bufferElement[index].duration);\r\n\r\n\t\tif(chunksDuration===false){ //Skip to end to get current duration\r\n\t\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.buffering = false;\r\n\t\tscope.playing = true;\r\n\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\tif(scope.bufferElement[index].start)\r\n\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\telse {\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\r\n\t\tscope.currentBuffer = index;\r\n\t\tif(scope.debug) console.log(\"Playing buffer ID: \"+scope.currentBuffer);\r\n\t}\r\n\r\n\tscope.playAvailable = function(){\r\n\t\tif(scope.playing) return;\r\n\r\n\t\tif(scope.bufferAvailable[scope.currentBuffer])\r\n\t\t\treturn scope.playBuffer(scope.currentBuffer);\r\n\r\n\t\telse{\r\n\t\t\tvar index = scope.bufferAvailable.indexOf(true, scope.currentBuffer);\r\n\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\r\n\t\t\telse{ // Scan from first array\r\n\t\t\t\tindex = scope.bufferAvailable.indexOf(true);\r\n\t\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.streaming = scope.buffering = true;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tscope.bufferPending.splice(0);\r\n\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\tscope.bufferElement[i].stop();\r\n\t\t\tinitAudioEvent(i);\r\n\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t}\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tscope.currentBuffer = 0;\r\n\t}\r\n}\r\n\r\n// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nwindow.ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar functionLinker = ['load', 'canPlayType'];\r\n\tvar propertyLinker = ['autoplay', 'preload', 'loop', 'buffered', 'preload', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\tif(element.tagName === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\t}\r\n\r\n\tself.audioFadeEffect = true;\r\n\r\n\t// Reference element function\r\n\tfor (var i = 0; i < functionLinker.length; i++) {\r\n\t\tself[functionLinker[i]] = element[functionLinker[i]]\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tobjectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = 'metadata';\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tself.play = function(callback){\r\n\t\tif(!element.paused || !element.ended) return;\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\telement.play();\r\n\t\t\tfadeNumber(0, volume, -0.05, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, callback);\r\n\t\t}\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(!element.paused || !element.ended){\r\n\t\t\tif(self.audioFadeEffect){\r\n\t\t\t\tfadeNumber(volume, 0, -0.05, 400, function(num){\r\n\t\t\t\t\telement.volume = num;\r\n\t\t\t\t}, function(){\r\n\t\t\t\t\telement.pause();\r\n\t\t\t\t\tif(callback) callback();\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telement.pause();\r\n\t\t}\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && (!element.paused || !element.ended))\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(links instanceof String)\r\n\t\t\telement.appendChild(`<source src=\"${links}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i]}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.appendChild(temp);\r\n\t\t}\r\n\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{mp3:'main.mp3', ogg:'fallback.ogg', ..}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tif(this.shuffled)\r\n\t\t\t\tthis.shuffle(true);\r\n\t\t},\r\n\r\n\t\t// obj = {mp3:'main.mp3', ogg:'fallback.ogg'}\r\n\t\tadd:function(obj){\r\n\t\t\toriginal.push(obj);\r\n\t\t\tif(this.shuffled)\r\n\t\t\t\tthis.shuffle(true);\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\toriginal.splice(index, 1);\r\n\t\t\tif(this.shuffled)\r\n\t\t\t\tthis.shuffle(true);\r\n\t\t},\r\n\r\n\t\tnext:function(index){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tthis.play(this.currentIndex);\r\n\t\t},\r\n\r\n\t\tprevious:function(index){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tthis.play(this.currentIndex);\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tself.prepare(Object.values(this.original[index]), function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === undefined) return this.shuffled;\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Unlock mobile media security\r\nif(isMobile()){\r\n\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n}\r\n\r\nfunction isMobile(){\r\n    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n}\r\n\r\nfunction objectPropertyLinker(self, target, property){\r\n\tObject.defineProperty(self, property, {\r\n\t  get: function(){ return target.property; },\r\n\t  set: function(value){ target.property = value; },\r\n\t  enumerable: true,\r\n\t  configurable: true\r\n\t});\r\n}\r\n\r\nvar maxFade = 0;\r\nfunction fadeNumber(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\tmaxFade = 0;\r\n\tvar current = from;\r\n\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\tif(!interval || interval == Infinity){\r\n\t\tsetTimeout(function(){\r\n\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\tif(onFinish) onFinish();\r\n\t\t}, fadeTime);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar timer = setInterval(function(){\r\n\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\tmaxFade++;\r\n\t\r\n\t\tcurrent = (current+increment)*1000;\r\n\t\tcurrent = Math.ceil(current)/1000;\r\n\t\r\n\t\t//Increasing and current is more than target\r\n\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t||\r\n\t\t//Decreasing and current is lower than target\r\n\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t||\r\n\t\t//Infinity or Zero number\r\n\t\t(current == Infinity || !current))\r\n\t\t{\r\n\t\t\tclearInterval(timer);\r\n\t\t\tonIncrease(to);\r\n\t\t\tif(onFinish) onFinish();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif(onIncrease) onIncrease(current); \r\n\t}, interval);\r\n}"]}