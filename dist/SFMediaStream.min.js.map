{"version":3,"sources":["AudioBufferStreamer.js","a_init.js","Convert.js","MediaPlayer.js","MediaPresenter.js","z_extra.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js"],"names":["window","ScarletsAudioBufferStreamer","bufferElement","chunksDuration","webAudio","scope","this","debug","bufferAvailable","bufferPending","currentBuffer","playing","buffering","streaming","currentDuration","latency","error","realtime","bufferSkip","mimeType","ScarletsMedia","extra","isMobile","audioContext","outputNode","bufferHeader","stop","splice","i","setBufferHeader","arrayBuffer","Uint8Array","decodeAudioData","slice","audioBuffer","duration","noiseLength","getChannelData","length","addBufferElement","push","createBufferSource","audioHandler","Audio","onended","console","log","URL","revokeObjectURL","src","playAvailable","indexOf","fillEmptyBuffer","temp","disconnect","addBufferHeader","finalBuffer","byteLength","set","buffer","webAudioBufferInsert","index","frameCount","channelLength","numberOfChannels","newBuffer","createBuffer","sampleRate","subarray","cleanNoise","context","connect","destination","playStream","realtimeBufferInterval","realtimeBufferPlay","Number","String","Date","now","baseLatency","start","createObjectURL","Blob","type","load","play","currentTime","receiveBuffer","streamingTime","unplayed","shift","playBuffer","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","mobileMediaUnlock","e","AudioContext","removeListener","emptyBuffer","source","noteOn","resume","document","removeEventListener","addEventListener","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","ScarletsMediaPlayer","element","self","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","canPlayType","objectPropertyLinker","preload","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","callback","paused","fadeNumber","num","pause","prepare","links","force","querySelectorAll","remove","insertAdjacentHTML","eventRegistered","eventTrigger","on","eventName","name","off","once","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","streamInfo","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","options","audio","video","MediaRecorder","isTypeSupported","recordingInterval","mediaStream","bufferHeaderLength","onstart","requestData","ondataavailable","data","size","setTimeout","preciseInterval","startRecording","active","navigator","mediaDevices","getUserMedia","then","catch","stopRecording","clearPreciseInterval","streams","getTracks","removeTrack","test","userAgent","target","property","value","configurable","normalize","min","max","denormalize","maxFade","from","to","increment","fadeTime","onIncrease","onFinish","current","interval","abs","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","chorus","sourceNode","output","createGain","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["// Minimum 3 bufferElement\r\nwindow.ScarletsAudioBufferStreamer = function(bufferElement, chunksDuration, webAudio){\r\n\tif(!bufferElement || bufferElement < 3) bufferElement = 3;\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.bufferElement = [];\r\n\tscope.bufferAvailable = [];\r\n\tscope.bufferPending = [];\r\n\tscope.currentBuffer = 0;\r\n\tscope.playing = false;\r\n\tscope.buffering = false;\r\n\tscope.streaming = false;\r\n\tscope.currentDuration = false;\r\n\tscope.latency = 0;\r\n\tscope.error = 0;\r\n\tscope.realtime = false;\r\n\tscope.bufferSkip = 0.07; // Set this higher when you hear any pitch\r\n\tscope.mimeType = null;\r\n\r\n\t// Use webAudio for mobile, and HTML5 audio for computer\r\n\tscope.webAudio = webAudio || ScarletsMedia.extra.isMobile() ? true : false; // Mobile browser have security on HTML element\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node  \r\n\t// Avoid webAudio for computer browser because memory usage\r\n\r\n\tvar bufferHeader = false;\r\n\r\n\tscope.stop = function(){\r\n\t\tscope.bufferPending.splice(0);\r\n\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\tscope.bufferElement[i].stop();\r\n\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t}\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tscope.currentBuffer = 0;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(arrayBuffer){\r\n\t\tif(!arrayBuffer){\r\n\t\t\tbufferHeader = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\r\n\r\n\t\t// Get buffer noise length\r\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\tscope.bufferSkip = audioBuffer.duration;\r\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\r\n\t\t});\r\n\t}\r\n\r\n\t// First initialization\r\n\tfor (var i = 0; i < bufferElement; i++) addBufferElement(i);\r\n\tfunction addBufferElement(i){\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.bufferElement.push(createBufferSource());\r\n\t\t\tscope.bufferAvailable.push(false);\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tvar audioHandler = new Audio();\r\n\t\t\tif(audioHandler){\r\n\t\t\t\tscope.bufferElement.push(audioHandler);\r\n\t\t\t\tscope.bufferAvailable.push(false);\r\n\r\n\t\t\t\taudioHandler.onended = function(){\r\n\t\t\t\t\tif(scope.debug) console.log(\"Buffer ended with ID: \"+i);\r\n\r\n\t\t\t\t\tURL.revokeObjectURL(this.src);\r\n\t\t\t\t\tthis.src = '';\r\n\r\n\t\t\t\t\tif(!scope.realtime){\r\n\t\t\t\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t\t\t\t\tscope.playing = false;\r\n\t\t\t\t\t\tscope.buffering = true;\r\n\t\t\t\t\t\tscope.playAvailable();\r\n\r\n\t\t\t\t\t\tif(scope.bufferAvailable.indexOf(false) !== -1 && scope.bufferPending.length != 0)\r\n\t\t\t\t\t\t\tfillEmptyBuffer();\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// ===== For handling WebAudio =====\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tvar noiseLength = 0;\r\n\tfunction cleanNoise(buffer){\r\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\r\n  \t\tvar channelLength = buffer.numberOfChannels;\r\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\r\n\r\n\t\tfor (var i = 0; i < channelLength; i++) {\r\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\r\n\t    }\r\n\r\n\t    return newBuffer;\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tscope.bufferElement[index].buffer = cleanNoise(buffer);\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\t// ===== Realtime Playing =====\r\n\t// Play audio immediately after received\r\n\t\r\n\tscope.playStream = function(){\r\n\t\tscope.streaming = scope.buffering = true;\r\n\t}\r\n\r\n\tvar realtimeBufferInterval = 0; // Need 3 bufferElement, other than this will give lower quality\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(arrayBuffer[0].byteLength === 0) return;\r\n\t\tarrayBuffer = arrayBuffer[0];\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +\r\n\t\t\tchunksDuration/1000 + scope.audioContext.baseLatency;\r\n\r\n\t\tscope.realtime = true;\r\n\t\t\r\n\t\tvar index = realtimeBufferInterval;\r\n\t\trealtimeBufferInterval++;\r\n\t\tif(realtimeBufferInterval > 2)\r\n\t\t\trealtimeBufferInterval = 0;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\r\n\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tURL.revokeObjectURL(scope.bufferElement[index].src);\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, arrayBuffer], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\t}\r\n\r\n\t// ====== Synchronous Playing ======\r\n\t// Play next audio when last audio was finished\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(!scope.streaming) return;\r\n\t\tvar streamingTime = arrayBuffer[1];\r\n\t\tscope.realtime = false;\r\n\r\n\t\tif(chunksDuration){\r\n\t\t\tvar unplayed = scope.bufferPending.length;\r\n\t\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\t\tif(scope.bufferAvailable[i]) unplayed++;\r\n\t\t\t}\r\n\t\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) \r\n\t\t\t\t\t\t\t\t+ chunksDuration*unplayed + scope.audioContext.baseLatency;\r\n\t\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.push(arrayBuffer[0]);\r\n\t\tfillEmptyBuffer();\r\n\r\n\t\tif(scope.buffering)\r\n\t\t\tscope.playAvailable();\r\n\t}\r\n\r\n\tvar fillEmptyBuffer = function(){\r\n\t\tvar index = scope.bufferAvailable.indexOf(false, scope.currentBuffer);\r\n\t\tif(index==-1)\r\n\t\t\tindex = scope.bufferAvailable.indexOf(false);\r\n\t\tif(index==-1||scope.bufferPending.length==0)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.audioContext.decodeAudioData(addBufferHeader(scope.bufferPending[0]), function(buffer){\r\n\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.shift();\r\n\t\tscope.bufferAvailable[index] = true;\r\n\r\n\t\tif(scope.buffering) scope.playAvailable();\r\n\t\tif(scope.debug) console.log(\"Buffer updated with ID: \"+index);\r\n\t}\r\n\r\n\tscope.playBuffer = function(index){\r\n\t\tif(!scope.bufferElement[index].duration)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.debug) console.log(\"Current stream duration: \"+scope.bufferElement[index].duration);\r\n\r\n\t\tif(chunksDuration===false){ //Skip to end to get current duration\r\n\t\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.buffering = false;\r\n\t\tscope.playing = true;\r\n\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\tif(scope.bufferElement[index].start)\r\n\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\telse {\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\r\n\t\tscope.currentBuffer = index;\r\n\t\tif(scope.debug) console.log(\"Playing buffer ID: \"+scope.currentBuffer);\r\n\t}\r\n\r\n\tscope.playAvailable = function(){\r\n\t\tif(scope.playing) return;\r\n\r\n\t\tif(scope.bufferAvailable[scope.currentBuffer])\r\n\t\t\treturn scope.playBuffer(scope.currentBuffer);\r\n\r\n\t\telse{\r\n\t\t\tvar index = scope.bufferAvailable.indexOf(true, scope.currentBuffer);\r\n\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\r\n\t\t\telse{ // Scan from first array\r\n\t\t\t\tindex = scope.bufferAvailable.indexOf(true);\r\n\t\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n'use strict';\r\n\r\n// Initialize global data\r\nwindow.ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tif(!window.AudioContext) return removeListener();\r\n\t\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nwindow.ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tself.play = function(callback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\telement.play();\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, callback);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.play();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i]}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload) element.load();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// streamInfo = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nwindow.ScarletsMediaPresenter = function(streamInfo, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var streamInfo = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\r\n\tscope.mediaGranted = false;\r\n\r\n\tscope.options = {};\r\n\tif(streamInfo.audio && !streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm'))\r\n\t\t\tscope.options.mimeType = 'audio/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4';\r\n\t}\r\n\telse if(!streamInfo.audio && streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg'))\r\n\t\t\tscope.options.mimeType = 'video/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'video/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\telse{\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\r\n\tvar recordingInterval = false;\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, scope.options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\r\n\t\t\tif(bufferHeaderLength === false)\r\n\t\t\t\tscope.mediaRecorder.requestData();\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e) {\r\n\t\t\tif(bufferHeaderLength !== false){\r\n\t\t\t\tif(e.data.size === 0) return;\r\n\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Wait until media header was available\r\n\t\t\tif(e.data.size === 0){\r\n\t\t\t\tsetTimeout(function(){scope.mediaRecorder.requestData()}, 0);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// The audio buffer can contain some duration that causes a noise\r\n\t\t\t// So we will need to remove it on streamer side\r\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\r\n\t\t\tscope.bufferHeader = e.data;\r\n\t\t\tbufferHeaderLength = e.data.byteLength;\r\n\r\n\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\tscope.onRecordingReady(scope.bufferHeader);\r\n\t\t\tscope.recordingReady = true;\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start();\r\n\r\n\t\t// Obtain data after some interval\r\n\t\trecordingInterval = ScarletsMedia.extra.preciseInterval(function(){\r\n\t\t\tif(!scope.recordingReady) return;\r\n\t\t\tscope.mediaRecorder.requestData();\r\n\t\t}, latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(!scope.mediaGranted || !scope.mediaRecorder.stream || !scope.mediaRecorder.stream.active){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(streamInfo).then(mediaGranted).catch(console.error);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start();\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tScarletsMedia.extra.clearPreciseInterval(recordingInterval);\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t// \r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\t\t\t\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};","ScarletsMedia.chorus = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.conReverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.delay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.distortion = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.dubDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.fade = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.flanger = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.harmonizer = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMedia.noise = function(){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.pingPongDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.pitchShift = function(sourceNode){\r\n    var context = this.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMedia.reverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.stereoPanner = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.tremolo = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.vibrato = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};"]}