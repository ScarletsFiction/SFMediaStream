{"version":3,"sources":["AudioBufferStreamer.js","a_init.js","Convert.js","MediaPlayer.js","MediaPresenter.js","z_extra.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js"],"names":["window","ScarletsAudioBufferStreamer","bufferElement","chunksDuration","webAudio","scope","this","debug","bufferAvailable","bufferPending","currentBuffer","playing","buffering","streaming","currentDuration","latency","error","realtime","bufferSkip","mimeType","ScarletsMedia","extra","isMobile","audioContext","outputNode","bufferHeader","setBufferHeader","arrayBuffer","byteLength","decodeAudioData","slice","audioBuffer","duration","i","addBufferElement","push","createBufferSource","audioHandler","Audio","onended","console","log","URL","revokeObjectURL","src","playAvailable","indexOf","length","fillEmptyBuffer","temp","stop","disconnect","webAudioBufferInsert","index","buffer","context","connect","destination","receiveBuffer","streamingTime","unplayed","Number","String","Date","now","baseLatency","fileReader","FileReader","realtimeBufferInterval","realtimeBufferPlay","onload","result","start","readAsArrayBuffer","Blob","type","createObjectURL","load","play","currentTime","shift","playBuffer","playStream","splice","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","mobileMediaUnlock","e","AudioContext","removeListener","emptyBuffer","createBuffer","source","noteOn","resume","document","removeEventListener","addEventListener","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","ScarletsMediaPlayer","element","self","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","canPlayType","objectPropertyLinker","preload","audioFadeEffect","speed","set","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","callback","paused","fadeNumber","num","pause","prepare","links","force","querySelectorAll","remove","insertAdjacentHTML","eventRegistered","eventTrigger","on","eventName","name","off","once","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","streamInfo","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","options","audio","video","MediaRecorder","isTypeSupported","recordingInterval","mediaStream","bufferHeaderLength","onstart","requestData","ondataavailable","setTimeout","data","size","preciseInterval","startRecording","active","navigator","mediaDevices","getUserMedia","then","catch","stopRecording","clearPreciseInterval","streams","getTracks","removeTrack","test","userAgent","target","property","value","configurable","normalize","min","max","denormalize","maxFade","from","to","increment","fadeTime","onIncrease","onFinish","current","interval","abs","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","chorus","sourceNode","output","createGain","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","sampleRate","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","getChannelData","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode"],"mappings":";;;;;;;aACAA,OAAAC,4BAAA,SAAAC,EAAAC,EAAAC,KACAF,GAAAA,EAAA,KAAAA,EAAA,GACAC,IAAAA,EAAA,KAEA,IAAAE,EAAAC,KAEAD,EAAAE,OAAA,EACAF,EAAAH,cAAA,GACAG,EAAAG,gBAAA,GACAH,EAAAI,cAAA,GACAJ,EAAAK,cAAA,EACAL,EAAAM,SAAA,EACAN,EAAAO,WAAA,EACAP,EAAAQ,WAAA,EACAR,EAAAS,iBAAA,EACAT,EAAAU,QAAA,EACAV,EAAAW,MAAA,EACAX,EAAAY,UAAA,EACAZ,EAAAa,WAAA,IACAb,EAAAc,SAAA,KAGAd,EAAAD,YAAAA,IAAAgB,cAAAC,MAAAC,YACAjB,EAAAkB,aAAAH,cAAAG,aACAlB,EAAAmB,YAAA,EAGA,IAAAC,GAAA,EAGApB,EAAAqB,gBAAA,SAAAC,GACAA,GAKAF,EAAAE,EACAA,EAAAC,WAGAvB,EAAAkB,cACAlB,EAAAkB,aAAAM,gBAAAF,EAAAG,MAAA,GAAA,SAAAC,GACA1B,EAAAa,WAAAa,EAAAC,YAVAP,GAAA,GAeA,IAAA,IAAAQ,EAAA,EAAAA,EAAA/B,EAAA+B,IAAAC,EAAAD,GACA,SAAAC,EAAAD,GACA,GAAA5B,EAAAD,SACAC,EAAAH,cAAAiC,KAAAC,KACA/B,EAAAG,gBAAA2B,MAAA,OAEA,CACA,IAAAE,EAAA,IAAAC,MACAD,IACAhC,EAAAH,cAAAiC,KAAAE,GACAhC,EAAAG,gBAAA2B,MAAA,GAEAE,EAAAE,QAAA,WACAlC,EAAAE,OAAAiC,QAAAC,IAAA,yBAAAR,GAEAS,IAAAC,gBAAArC,KAAAsC,KACAtC,KAAAsC,IAAA,GAEAvC,EAAAY,WACAZ,EAAAG,gBAAAyB,IAAA,EACA5B,EAAAM,SAAA,EACAN,EAAAO,WAAA,EACAP,EAAAwC,iBAEA,IAAAxC,EAAAG,gBAAAsC,SAAA,IAAA,GAAAzC,EAAAI,cAAAsC,QACAC,QAOA,SAAAZ,IACA,IAAAa,EAAA5C,EAAAkB,aAAAa,qBAKA,OAJAa,EAAAV,QAAA,WACAjC,KAAA4C,OACA5C,KAAA6C,cAEAF,EAkCA,SAAAG,EAAAC,EAAAC,GACAjD,EAAAH,cAAAmD,GAAAjB,IACA/B,EAAAH,cAAAmD,GAAAC,OAAAA,EAEAjD,EAAAmB,YAAAnB,EAAAmB,WAAA+B,QACAlD,EAAAH,cAAAmD,GAAAG,QAAAnD,EAAAmB,YAGAnB,EAAAH,cAAAmD,GAAAG,QAAAnD,EAAAkB,aAAAkC,aA/BApD,EAAAqD,cAAA,SAAA/B,GAEA,GADAtB,EAAAE,OAAAiC,QAAAC,IAAA,iBAAAd,EAAA,GAAAC,YACAvB,EAAAQ,UAAA,CACA,IAAA8C,EAAAhC,EAAA,GAGA,GAFAtB,EAAAY,UAAA,EAEAd,EAAA,CAEA,IADA,IAAAyD,EAAAvD,EAAAI,cAAAsC,OACAd,EAAA,EAAAA,EAAA/B,EAAA+B,IACA5B,EAAAG,gBAAAyB,IAAA2B,IAEAvD,EAAAU,QAAA8C,OAAAC,OAAAC,KAAAC,OAAAlC,OAAA,GAAA,IAAA6B,EACAxD,EAAAyD,EAAAvD,EAAAkB,aAAA0C,YACA5D,EAAAE,OAAAiC,QAAAC,IAAA,kBAAApC,EAAAU,SAGAV,EAAAI,cAAA0B,KAAAR,EAAA,IACAqB,IAEA3C,EAAAO,WACAP,EAAAwC,kBAcA,IAAAqB,EAAA,IAAAC,WACAC,EAAA,EACA/D,EAAAgE,mBAAA,SAAA1C,GAEA,GADAtB,EAAAE,OAAAiC,QAAAC,IAAA,iBAAAd,EAAA,GAAAC,YACA,IAAAD,EAAA,GAAAC,WAAA,CACAD,EAAAA,EAAA,GAEAtB,EAAAU,QAAA8C,OAAAC,OAAAC,KAAAC,OAAAlC,OAAA,GAAA,IAAAH,EAAA,GACAxB,EAAA,IAAAE,EAAAkB,aAAA0C,YAEA5D,EAAAY,UAAA,EAEA,IAAAoC,EAAAe,IACAA,EACA,IACAA,EAAA,GAEA/D,EAAAD,UACA8D,EAAAI,OAAA,WACAjE,EAAAkB,aAAAM,gBAAAvB,KAAAiE,OAAA,SAAAjB,GACAF,EAAAC,EAAAC,GACAjD,EAAAH,cAAAmD,GAAAmB,MAAAnE,EAAAa,eAGAgD,EAAAO,kBAAA,IAAAC,KAAA,CAAAjD,EAAAE,GAAA,CAAAgD,KAAAtE,EAAAc,cAGAuB,IAAAC,gBAAAtC,EAAAH,cAAAmD,GAAAT,KACAvC,EAAAH,cAAAmD,GAAAT,IAAAF,IAAAkC,gBAAA,IAAAF,KAAA,CAAAjD,EAAAE,GAAA,CAAAgD,KAAAtE,EAAAc,YACAd,EAAAH,cAAAmD,GAAAwB,OACAxE,EAAAH,cAAAmD,GAAAyB,OACAzE,EAAAH,cAAAmD,GAAA0B,YAAA1E,EAAAa,cAIA,IAAA8B,EAAA,WACA,IAAAK,EAAAhD,EAAAG,gBAAAsC,SAAA,EAAAzC,EAAAK,gBACA,GAAA2C,IACAA,EAAAhD,EAAAG,gBAAAsC,SAAA,KACA,GAAAO,GAAA,GAAAhD,EAAAI,cAAAsC,SAGA1C,EAAAD,UACA8D,EAAAI,OAAA,WACAjE,EAAAkB,aAAAM,gBAAAvB,KAAAiE,OAAA,SAAAjB,GACAF,EAAAC,EAAAC,MAGAY,EAAAO,kBAAA,IAAAC,KAAA,CAAAjD,EAAApB,EAAAI,cAAA,IAAA,CAAAkE,KAAAtE,EAAAc,cAGAd,EAAAH,cAAAmD,GAAAT,IAAAF,IAAAkC,gBAAA,IAAAF,KAAA,CAAAjD,EAAApB,EAAAI,cAAA,IAAA,CAAAkE,KAAAtE,EAAAc,YACAd,EAAAH,cAAAmD,GAAAwB,QAGAxE,EAAAI,cAAAuE,QACA3E,EAAAG,gBAAA6C,IAAA,EAEAhD,EAAAO,WAAAP,EAAAwC,gBACAxC,EAAAE,OAAAiC,QAAAC,IAAA,2BAAAY,KAGAhD,EAAA4E,WAAA,SAAA5B,GACAhD,EAAAH,cAAAmD,GAAArB,WAGA3B,EAAAE,OAAAiC,QAAAC,IAAA,4BAAApC,EAAAH,cAAAmD,GAAArB,WAEA,IAAA7B,GAKAE,EAAAO,WAAA,EACAP,EAAAM,SAAA,EACAR,EAAAE,EAAAH,cAAAmD,GAAArB,SACA3B,EAAAH,cAAAmD,GAAAmB,MACAnE,EAAAH,cAAAmD,GAAAmB,MAAAnE,EAAAa,aAEAb,EAAAH,cAAAmD,GAAAyB,OACAzE,EAAAH,cAAAmD,GAAA0B,YAAA1E,EAAAa,YAGAb,EAAAK,cAAA2C,EACAhD,EAAAE,OAAAiC,QAAAC,IAAA,sBAAApC,EAAAK,gBAfAP,EAAAE,EAAAH,cAAAmD,GAAArB,WAkBA3B,EAAAwC,cAAA,WACA,IAAAxC,EAAAM,QAAA,CAEA,GAAAN,EAAAG,gBAAAH,EAAAK,eACA,OAAAL,EAAA4E,WAAA5E,EAAAK,eAGA,IAAA2C,EAAAhD,EAAAG,gBAAAsC,SAAA,EAAAzC,EAAAK,eACA,OAAA,GAAA2C,EAAAhD,EAAA4E,WAAA5B,IAIA,IADAA,EAAAhD,EAAAG,gBAAAsC,SAAA,IACAzC,EAAA4E,WAAA5B,QAAA,IAKAhD,EAAA6E,WAAA,WACA7E,EAAAQ,UAAAR,EAAAO,WAAA,GAGAP,EAAA6C,KAAA,WACA7C,EAAAI,cAAA0E,OAAA,GACA,IAAA,IAAAlD,EAAA,EAAAA,EAAA/B,EAAA+B,IACA5B,EAAAH,cAAA+B,GAAAiB,OACA7C,EAAAG,gBAAAyB,IAAA,EAEA5B,EAAAM,SAAA,EACAN,EAAAO,WAAA,EACAP,EAAAK,cAAA,IC3OAV,OAAAoB,cAAA,CACAG,cAAA,EAGA6D,oBAAA,SAAAC,GAEA,OADAA,EAAAC,YAAA,YACAhF,KAAAiB,aAAAgE,yBAAAF,IAMAG,oBAAA,SAAAH,GAEA,OADAA,EAAAC,YAAA,YACA,OAKA,WACA,IAAAG,EAAA,SAAAC,GACA,IAAA1F,OAAA2F,aAAA,OAAAC,IACAxE,cAAAG,aAAA,IAAAoE,aAEA,IAAAE,EAAAzE,cAAAG,aAAAuE,aAAA,EAAA,EAAA,OACAC,EAAA3E,cAAAG,aAAAa,qBACA2D,EAAAzC,OAAAuC,EACAE,EAAAvC,QAAApC,cAAAG,aAAAkC,aAEAsC,EAAAxD,QAAA,WACAwD,EAAA5C,WAAA,GACA4C,EAAAF,EAAA,KAEAD,KAIAG,EAAAvB,MACAuB,EAAAvB,MAAA,GADAuB,EAAAC,OAAA,GAEA5E,cAAAG,aAAA0E,UAGA,SAAAL,IACAM,SAAAC,oBAAA,aAAAV,GAAA,GACAS,SAAAC,oBAAA,WAAAV,GAAA,GACAS,SAAAC,oBAAA,QAAAV,GAAA,GAGAS,SAAAE,iBAAA,aAAAX,GAAA,GACAS,SAAAE,iBAAA,WAAAX,GAAA,GACAS,SAAAE,iBAAA,QAAAX,GAAA,GA/BA,GC/BArE,cAAAiF,QAAA,CAGAC,WAAA,SAAAC,GACA,OAAAA,IAAA,KAAA,EACAA,EAAA,KAAA,qBACA,IAAAC,KAAAC,IAAA,GAAAD,KAAAE,MAAAH,GAAA,IAAA,KAIAI,WAAA,SAAAC,GACA,OAAAA,EAAA,EACAJ,KAAAE,MAAAF,KAAA/D,IAAAmE,EAAA,KAAAJ,KAAAK,IAAA,GAAA,KACA,MAIAC,UAAA,SAAAC,GACA,GAAAA,GAAA,EACA,OAAA,EAEA,IAAAC,EAAA,IAAA,GAAAR,KAAAS,KAAAT,KAAA/D,IAAAsE,GACA,OAAAC,EAAA,EAAA,EACAA,GAKAE,UAAA,SAAAF,GACA,OAAAA,GAAA,EAAA,GAEAA,EAAA,MAAAA,EAAA,KACAR,KAAAW,IAAA,GAAAX,KAAAS,MAAAD,EAAA,QAKAI,QAAA,SAAAC,GACA,OAAA,IAAAA,EAAA,KAAAb,KAAA/D,IAAA4E,GAAAb,KAAAS,MAAA,IAIAK,QAAA,SAAAN,GACA,OAAAR,KAAAC,IAAA,GAAAO,EAAA,KAIAO,SAAA,SAAAC,GACA,OAAAA,EAAA,MC9CAxH,OAAAyH,oBAAA,SAAAC,GAEA,IAAAC,EAAArH,KAEAsH,EAAA,CAAA,WAAA,OAAA,WAAA,WAAA,aAAA,cAAA,aAAA,WAAA,QAAA,QAAA,aAAA,eAAA,SAAA,SAAA,WAAA,WAGAC,GAAA,EAWA,GAVAC,OAAAC,eAAAJ,EAAA,cAAA,CACAK,IAAA,WAIA,OAHAH,IACAA,EAAAzG,cAAAgE,oBAAAsC,IAEAG,GAEAI,YAAA,IAGA,UAAAP,EAAAQ,QAAAC,cAAA,CACAP,EAAAA,EAAAQ,OAAA,CAAA,SAAA,SAAA,UAGA,IAAAC,GAAA,EACAP,OAAAC,eAAAJ,EAAA,cAAA,CACAK,IAAA,WAIA,OAHAK,IACAA,EAAAjH,cAAAoE,oBAAAkC,IAEAW,GAEAJ,YAAA,IAKAN,EAAA9C,KAAA,WACA6C,EAAA7C,QAGA8C,EAAAW,YAAA,WACAZ,EAAAY,eAIA,IAAA,IAAArG,EAAA,EAAAA,EAAA2F,EAAA7E,OAAAd,IACAb,cAAAC,MAAAkH,qBAAAZ,EAAAD,EAAAE,EAAA3F,IAGA0F,EAAAa,SAAA,EACAd,EAAAc,QAAA,WACAb,EAAAc,iBAAA,EAEAd,EAAAe,MAAA,SAAAC,GACA,QAAAC,IAAAD,EAAA,OAAAjB,EAAAmB,oBACAnB,EAAAmB,oBAAAnB,EAAAoB,aAAAH,GAGAhB,EAAAoB,KAAA,SAAAJ,GACA,QAAAC,IAAAD,EAAA,OAAAjB,EAAAsB,MACAtB,EAAAuB,aAAAvB,EAAAsB,MAAAL,GAGA,IAAAO,EAAA,EACAvB,EAAAuB,OAAA,SAAAP,GACA,QAAAC,IAAAD,EAAA,OAAAO,EACAxB,EAAAwB,OAAAA,EAAAP,GAGAhB,EAAA7C,KAAA,SAAAqE,GACA,GAAAzB,EAAA0B,OAAA,CAIA,GAAAzB,EAAAc,gBAMA,OALAf,EAAAwB,OAAA,EACAxB,EAAA5C,YACA1D,cAAAC,MAAAgI,WAAA,EAAAH,EAAA,IAAA,IAAA,SAAAI,GACA5B,EAAAwB,OAAAI,GACAH,GAGAzB,EAAA5C,OACAqE,GAAAA,SAZAA,GAAAA,KAeAxB,EAAA4B,MAAA,SAAAJ,GACAzB,EAAA0B,OACAD,GAAAA,IAGAxB,EAAAc,gBACArH,cAAAC,MAAAgI,WAAAH,EAAA,GAAA,IAAA,IAAA,SAAAI,GACA5B,EAAAwB,OAAAI,GACA,WACA5B,EAAA6B,QACAJ,GAAAA,OAIAzB,EAAA6B,QACAJ,GAAAA,MAGAxB,EAAA6B,QAAA,SAAAC,EAAAN,EAAAO,GAEA,IAAAA,IAAAhC,EAAA0B,OACA,OAAAzB,EAAA4B,MAAA,WACA5B,EAAA6B,QAAAC,EAAAN,GAAA,KAIA,IADA,IAAAlG,EAAAyE,EAAAiC,iBAAA,UACA1H,EAAAgB,EAAAF,OAAA,EAAAd,GAAA,EAAAA,IACAgB,EAAAhB,GAAA2H,SAGA,GAAA,iBAAAH,EACA/B,EAAAmC,mBAAA,YAAA,gBAAAJ,EAAA,WACA,CACAxG,EAAA,GACA,IAAAhB,EAAA,EAAAA,EAAAwH,EAAA1G,OAAAd,IACAgB,GAAA,gBAAAwG,EAAAxH,GAAA,MAEAyF,EAAAmC,mBAAA,YAAA5G,GAIA0E,EAAAa,SAAAd,EAAA7C,OACAsE,GAAAA,KAGA,IAAAW,EAAA,GACA,SAAAC,EAAArE,GACA,IAAA,IAAAzD,EAAA,EAAAA,EAAA6H,EAAApE,EAAAf,MAAA5B,OAAAd,IACA6H,EAAApE,EAAAf,MAAA1C,GAAAyD,EAAAiC,GAKAA,EAAAqC,GAAA,SAAAC,EAAAd,GACA,IAAAe,EAAAD,EAAA9B,cAMA,YALAS,IAAAkB,EAAAI,KACAxC,EAAAtB,iBAAA6D,EAAAF,GAAA,GACAD,EAAAI,GAAA,IAEAJ,EAAAI,GAAA/H,KAAAgH,GACAxB,GAGAA,EAAAwC,IAAA,SAAAF,EAAAd,GACA,IAAAe,EAAAD,EAAA9B,cACA,QAAAS,IAAAkB,EAAAI,GAYA,OATAf,EAGAW,EAAAI,GAAA/E,OAAA2E,EAAAI,GAAApH,QAAAqG,GAAA,GAFAW,EAAAI,GAAA/E,OAAA,GAIA,IAAA2E,EAAAI,GAAAnH,SACA+G,EAAAI,QAAAtB,EACAlB,EAAAvB,oBAAA8D,EAAAF,GAAA,IAEApC,GAGAA,EAAAyC,KAAA,SAAAH,EAAAd,GAEA,OADAzB,EAAAtB,iBAAA6D,EAAAd,EAAA,CAAAiB,MAAA,IACAzC,GAGAA,EAAA0C,QAAA,WACA,IAAA,IAAAC,KAAAR,EACAnC,EAAAwC,IAAAG,GAIA,IAAA,IAAAA,KAFA3C,EAAA4C,SAAAC,KAAArF,OAAA,GACAwC,EAAA4C,SAAAE,SAAAtF,OAAA,GACAwC,SACAA,EAAA2C,GAEA3C,EAAA,KAEAD,EAAA6B,QACA7B,EAAAgD,UAAA,IAGA,IAAAC,GAAA,EACA,SAAAC,IACAD,IACAA,GAAA,EAEAhD,EAAAqC,GAAA,QAAA,WACArC,EAAA4C,SAAAM,aAAAlD,EAAA4C,SAAAC,KAAAzH,OAAA,EACA4E,EAAA4C,SAAAO,MAAA,GACAnD,EAAA4C,SAAAQ,MACApD,EAAA4C,SAAAzF,KAAA,MAIA,SAAAkG,EAAAd,GACA,GAAAJ,EAAAI,GACA,IAAA,IAAAjI,EAAA,EAAAA,EAAA6H,EAAAI,GAAAnH,OAAAd,IACA6H,EAAAI,GAAAjI,GAAA0F,EAAAA,EAAA4C,SAAA5C,EAAA4C,SAAAM,cAIAlD,EAAA4C,SAAA,CACAM,aAAA,EACAL,KAAA,GACAC,SAAA,GACAM,MAAA,EACAE,UAAA,EAGAC,OAAA,SAAAC,GACA7K,KAAAmK,SAAAU,EACA7K,KAAA8K,QAAA9K,KAAA2K,UACAL,KAIAS,IAAA,SAAAC,GACAhL,KAAAmK,SAAAtI,KAAAmJ,GACAhL,KAAA8K,QAAA9K,KAAA2K,UACAL,KAIAhB,OAAA,SAAAvG,GACA/C,KAAAmK,SAAAtF,OAAA9B,EAAA,GACA/C,KAAA8K,QAAA9K,KAAA2K,WAGAH,KAAA,SAAAS,GAEA,GADAjL,KAAAuK,eACAvK,KAAAuK,cAAAvK,KAAAkK,KAAAzH,OAAA,CACA,IAAAzC,KAAAyK,KAIA,YADAzK,KAAAuK,eAFAvK,KAAAuK,aAAA,EAOAU,EACAjL,KAAAwE,KAAAxE,KAAAuK,cACAG,EAAA,mBAGAQ,SAAA,SAAAD,GAEA,GADAjL,KAAAuK,eACAvK,KAAAuK,aAAA,EAAA,CACA,IAAAvK,KAAAyK,KAIA,YADAzK,KAAAuK,eAFAvK,KAAAuK,aAAAvK,KAAAkK,KAAAzH,OAAA,EAOAwI,EACAjL,KAAAwE,KAAAxE,KAAAuK,cACAG,EAAA,mBAGAlG,KAAA,SAAAzB,GACA/C,KAAAuK,aAAAxH,EACA2H,EAAA,kBAEArD,EAAA6B,QAAAlJ,KAAAkK,KAAAnH,GAAAoI,OAAA,WACA9D,EAAA7C,UAIAsG,QAAA,SAAAzC,GAEA,IAAA+C,EAAAC,EAAA1J,EADA,IAAA,IAAA0G,EAEA,IAAA1G,EAAA3B,KAAAkK,KAAAzH,OAAA,EAAAd,EAAA,EAAAA,IACAyJ,EAAAlF,KAAAE,MAAAF,KAAAoF,UAAA3J,EAAA,IACA0J,EAAArL,KAAAkK,KAAAvI,GACA3B,KAAAkK,KAAAvI,GAAA3B,KAAAkK,KAAAkB,GACApL,KAAAkK,KAAAkB,GAAAC,OAGArL,KAAAkK,KAAAlK,KAAAmK,SAAA3I,MAAA,GAEAxB,KAAA2K,SAAAtC,KC7RA3I,OAAA6L,uBAAA,SAAAC,EAAA/K,GACA,IAAAV,EAAAC,KACAS,IAAAA,EAAA,KAcAV,EAAAE,OAAA,EAEAF,EAAA0L,iBAAA,KACA1L,EAAA2L,gBAAA,KAEA3L,EAAA4L,cAAA,KACA5L,EAAA6L,gBAAA,EAEA7L,EAAA8L,WAAA,EAEA9L,EAAA+L,cAAA,EAEA,IAAAlI,EAAA,IAAAC,WACA9D,EAAAgM,QAAA,GACAP,EAAAQ,QAAAR,EAAAS,MACAC,cAAAC,gBAAA,2BACApM,EAAAgM,QAAAlL,SAAA,0BACAqL,cAAAC,gBAAA,2BACApM,EAAAgM,QAAAlL,SAAA,0BACAqL,cAAAC,gBAAA,8BACApM,EAAAgM,QAAAlL,SAAA,6BACAqL,cAAAC,gBAAA,cACApM,EAAAgM,QAAAlL,SAAA,aACAqL,cAAAC,gBAAA,2BACApM,EAAAgM,QAAAlL,SAAA,0BACAqL,cAAAC,gBAAA,6BACApM,EAAAgM,QAAAlL,SAAA,4BACAqL,cAAAC,gBAAA,aACApM,EAAAgM,QAAAlL,SAAA,YACAqL,cAAAC,gBAAA,+BACApM,EAAAgM,QAAAlL,SAAA,8BACAqL,cAAAC,gBAAA,eACApM,EAAAgM,QAAAlL,SAAA,cAEA2K,EAAAQ,OAAAR,EAAAS,MACAC,cAAAC,gBAAA,2BACApM,EAAAgM,QAAAlL,SAAA,0BACAqL,cAAAC,gBAAA,2BACApM,EAAAgM,QAAAlL,SAAA,0BACAqL,cAAAC,gBAAA,8BACApM,EAAAgM,QAAAlL,SAAA,6BACAqL,cAAAC,gBAAA,cACApM,EAAAgM,QAAAlL,SAAA,aACAqL,cAAAC,gBAAA,2BACApM,EAAAgM,QAAAlL,SAAA,0BACAqL,cAAAC,gBAAA,6BACApM,EAAAgM,QAAAlL,SAAA,4BACAqL,cAAAC,gBAAA,aACApM,EAAAgM,QAAAlL,SAAA,YACAqL,cAAAC,gBAAA,+BACApM,EAAAgM,QAAAlL,SAAA,8BACAqL,cAAAC,gBAAA,eACApM,EAAAgM,QAAAlL,SAAA,aAGAqL,cAAAC,gBAAA,cACApM,EAAAgM,QAAAlL,SAAA,aACAqL,cAAAC,gBAAA,eACApM,EAAAgM,QAAAlL,SAAA,aAGA,IAAAuL,GAAA,EACAN,EAAA,SAAAO,GACAtM,EAAA+L,cAAA,EAEA/L,EAAAoB,aAAA,KACA,IAAAmL,GAAA,EAEAvM,EAAA4L,cAAA,IAAAO,cAAAG,EAAAtM,EAAAgM,SAEAhM,EAAAE,OAAAiC,QAAAC,IAAA,0BACApC,EAAA4L,cAAAY,QAAA,SAAAnH,GACArF,EAAA8L,WAAA,GACA,IAAAS,GACAvM,EAAA4L,cAAAa,eAIAzM,EAAA4L,cAAAc,gBAAA,SAAArH,GACA,IAAA,IAAAkH,EAQA1I,EAAAI,OAAA,WACA,IAAA3C,EAAArB,KAAAiE,OAEA,IAAA,IAAAqI,EAAA,CAEA,GAAA,IADAA,EAAAjL,EAAAC,YAIA,OAFAgL,GAAA,OACAI,WAAA,WAAA3M,EAAA4L,cAAAa,eAAA,GAKAzM,EAAAoB,aAAAE,EAEAtB,EAAA0L,kBACA1L,EAAA0L,iBAAA1L,EAAAoB,cACApB,EAAA6L,gBAAA,IAGAhI,EAAAO,kBAAAiB,EAAAuH,UA3BA,CACA,GAAA,IAAAvH,EAAAuH,KAAAC,KAAA,OAEA,IAAAvJ,EAAAE,OAAAC,OAAAC,KAAAC,OAAAlC,OAAA,GAAA,IACAzB,EAAA2L,gBAAA,CAAAtG,EAAAuH,KAAAtJ,MA2BAtD,EAAA4L,cAAAzH,QAGAkI,EAAAtL,cAAAC,MAAA8L,gBAAA,WACA9M,EAAA6L,gBACA7L,EAAA4L,cAAAa,eACA/L,IAGAV,EAAA+M,eAAA,WACA/M,EAAA+L,cAAA/L,EAAA4L,cAAAR,QAAApL,EAAA4L,cAAAR,OAAA4B,QAKAhN,EAAA4L,cAAAzH,QACAnE,EAAA8L,WAAA,IALA9L,EAAA6L,gBAAA,EACAoB,UAAAC,aAAAC,aAAA1B,GAAA2B,KAAArB,GAAAsB,MAAAlL,QAAAxB,SAQAX,EAAAsN,cAAA,WAGA,GAFAvM,cAAAC,MAAAuM,qBAAAlB,GACArM,EAAA4L,cAAA/I,OACA7C,EAAA4L,cAAAR,OAAAvI,KAMA7C,EAAA4L,cAAAR,OAAAvI,YAJA,IADA,IAAA2K,EAAAxN,EAAA4L,cAAAR,OAAAqC,YACA7L,EAAA,EAAAA,EAAA4L,EAAA9K,OAAAd,IACA4L,EAAA5L,GAAAiB,OACA7C,EAAA4L,cAAAR,OAAAsC,YAAAF,EAAA5L,IAIA5B,EAAA4L,cAAAc,gBAAA,KACA1M,EAAA4L,cAAAY,QAAA,KAEAxM,EAAAoB,aAAA,KACApB,EAAA8L,WAAA,ICnKA/K,cAAAC,MAAA,IAAA,WACAf,KACAgB,SAAA,WACA,MAAA,sDAAA0M,KAAAV,UAAAW,YAFA3N,KAKAiI,qBAAA,SAAAZ,EAAAuG,EAAAC,GACArG,OAAAC,eAAAJ,EAAAwG,EAAA,CACAnG,IAAA,WAAA,OAAAkG,EAAAC,IACAxF,IAAA,SAAAyF,GAAAF,EAAAC,GAAAC,GACAnG,YAAA,EACAoG,cAAA,KAVA/N,KAcAgO,UAAA,SAAAF,EAAAG,EAAAC,GACA,OAAAA,EAAAD,GAAAH,EAAAG,GAfAjO,KAkBAmO,YAAA,SAAAL,EAAAG,EAAAC,GACA,OAAAJ,EAAAG,IAAAC,EAAAD,IAGA,IAAAG,EAAA,EAtBApO,KAuBA+I,WAAA,SAAAsF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAN,EAAA,EACA,IAAAO,EAAAN,EACAO,EAAAJ,GAAAtI,KAAA2I,IAAAR,EAAAC,GAAApI,KAAA2I,IAAAN,IACA,GAAAK,GAAAA,GAAAE,EAAAA,EAQA,IAAAC,EAAAC,YAAA,WAQA,GAPAZ,GAAA,KAAAa,cAAAF,GACAX,IAEAO,EAAA,KAAAA,EAAAJ,GACAI,EAAAzI,KAAAgJ,KAAAP,GAAA,IAGAJ,GAAA,IAAAI,GAAAL,GAAAD,GAAAC,IAGAC,GAAA,IAAAI,GAAAL,GAAAD,GAAAC,IAGAK,GAAAG,EAAAA,IAAAH,EAKA,OAHAM,cAAAF,GACAN,EAAAH,QACAI,GAAAA,KAIAD,GAAAA,EAAAE,IACAC,QA9BAlC,WAAA,WACA+B,GAAAA,EAAAH,GACAI,GAAAA,KACAF,IAgCA,IAAAW,EAAA,GACAC,EAAA,EAhEApP,KAiEAqP,eAAA,SAAAC,EAAAC,GACA,IAAA7L,EAAAD,KAAAC,MAaA,OAZA0L,IACAD,EAAAtN,KAAA,CACA2N,GAAAJ,EACAK,KAAA/L,EAAA6L,EACAD,KAAAA,EAGAI,SAAAhD,WAAA,WACAiD,EAAAP,GAAAE,QACAC,KAEAK,IACAR,GA/EApP,KAiFA6P,oBAAA,SAAAL,GACAG,EAAAH,EAAAL,IAGA,IAAAP,EAAA,GACAkB,EAAA,EA6BA,SAAAH,EAAAH,EAAAtF,GACA,IAAA,IAAAvI,KAAAuI,EACA,GAAAA,EAAAvI,GAAA6N,KAAAA,EACA,OAAAtF,EAAArF,OAAAlD,EAAA,GAtHA3B,KAuFA6M,gBAAA,SAAAyC,EAAAC,GACA,IAAA7L,EAAAD,KAAAC,MAEAf,EAAA,CACA6M,KAFAM,EAGAlB,SAAAW,EACAE,KAAA/L,EAAA6L,EACAD,KAAAA,GAcA,OAVA3M,EAAA+M,SAAAV,YAAA,WACArM,EAAA8M,MAAAhM,KAAAC,QAGAf,EAAA8M,MAAA9M,EAAAiM,SACAjM,EAAA2M,SACAC,GAEAX,EAAA/M,KAAAc,GACAiN,IACAE,GA5GA9P,KA8GAsN,qBAAA,SAAAkC,GACA,IAAA7M,EAAAgN,EAAAH,EAAAZ,GACAK,cAAAtM,EAAA+M,WAUA,IAAAK,GAAA,EACA,SAAAH,IACA,IAAAG,EAAA,CACAA,GAAA,EA0BAC,sBAxBA,SAAAC,IACA,GAAA,IAAAd,EAAA1M,QAAA,IAAAmM,EAAAnM,OAAA,CAKAuN,sBAAAC,GAEA,IAAAxL,EAAAhB,KAAAC,MACA,IAAA,IAAA/B,KAAAwN,EACAA,EAAAxN,GAAA8N,KAAAhL,IACA0K,EAAAxN,GAAA2N,OACAY,aAAAf,EAAAxN,GAAA+N,UACAP,EAAAtK,OAAAlD,EAAA,IAIA,IAAA,IAAAA,KAAAiN,EACAA,EAAAjN,GAAA8N,KAAAhL,IACAmK,EAAAjN,GAAA2N,OACAV,EAAAjN,GAAA8N,MAAAb,EAAAjN,GAAAiN,eAlBAmB,GAAA,OClIAjP,cAAAqP,OAAA,SAAAC,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAAC,EAAAvN,EAAAqN,aACAG,EAAAxN,EAAAqN,aACAI,EAAAzN,EAAA0N,sBAAA,GACAC,EAAA3N,EAAA4N,oBAAA,GACAT,EAAAlN,QAAAwN,GACAN,EAAAlN,QAAAsN,GAIA,IAFA,IAAAM,EAAA,CAAA,GAAA,IAEAnP,EAAA,EAAAA,EAAAmP,EAAArO,OAAAd,IAAA,CACA,IAAAoP,EAAAD,EAAAnP,GAGAoP,EAAA5F,OAAAlI,EAAAqN,aACAS,EAAAC,aAAA/N,EAAAgO,cACAF,EAAAG,WAAAjO,EAAAgO,cACAF,EAAAI,SAAAlO,EAAAqN,aACAS,EAAAK,YAAAnO,EAAAqN,aACAS,EAAAM,MAAApO,EAAAqN,aAGAI,EAAAxN,QAAA6N,EAAA5F,OAAAxJ,EAAA,GACAoP,EAAA5F,OAAAjI,QAAA6N,EAAAC,cACAD,EAAA5F,OAAAjI,QAAA6N,EAAAG,YACAH,EAAAC,aAAA9N,QAAA6N,EAAAK,aACAL,EAAAC,aAAA9N,QAAA0N,EAAA,EAAAjP,GACAoP,EAAAG,WAAAhO,QAAA6N,EAAAI,UACAJ,EAAAI,SAAAjO,QAAA6N,EAAA5F,QACA4F,EAAAM,MAAAnO,QAAA0N,EAAA,EAAAjP,GAIAiP,EAAA1N,QAAAuN,GACAD,EAAAtN,QAAAmN,GACAI,EAAAvN,QAAAmN,GAGA,IAAAiB,EAAArO,EAAAsO,mBACAC,EAAAvO,EAAAqN,aACAmB,EAAAxO,EAAAqN,aACAgB,EAAApO,QAAAsO,GACAF,EAAApO,QAAAuO,GACAD,EAAAtO,QAAA4N,EAAA,GAAAE,aAAAU,WACAD,EAAAvO,QAAA4N,EAAA,GAAAE,aAAAU,WACAJ,EAAApN,MAAA,GAGAoN,EAAAjN,KAAA,OACAiN,EAAAK,UAAA7D,MAAA,IACA0D,EAAAI,KAAA9D,MAAA,KACA2D,EAAAG,KAAA9D,OAAA,KACAgD,EAAA,GAAAI,WAAAQ,UAAA5D,MAAA,KACAgD,EAAA,GAAAI,WAAAQ,UAAA5D,MAAA,KACAgD,EAAA,GAAAE,aAAAU,UAAA5D,MAAA,KACAgD,EAAA,GAAAE,aAAAU,UAAA5D,MAAA,KAEA,IAAA/B,EAAA,CAAA8F,KAAA,EAAAC,UAAA,EAAAC,IAAA,GAEAC,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAEAsB,KAAA,SAAA/D,GACA,QAAAxF,IAAAwF,EAAA,OAAA/B,EAAA8F,KACA9F,EAAA8F,KAAA/D,EAEAA,EAAA,IAAAA,EAAA,IACAwD,EAAAK,UAAA7D,MAAAA,GAGAgE,UAAA,SAAAhE,GACA,QAAAxF,IAAAwF,EAAA,OAAA/B,EAAA+F,UACA/F,EAAA+F,UAAAhE,EAMA,IAJA,IAAAuD,EAAA,EAAA,MAAAvD,EACAsD,EAAA,MAAAtD,EAAA,MACAqD,EAAA,MAAArD,EAEAnM,EAAA,EAAAA,EAAAmP,EAAArO,OAAAd,IACAmP,EAAAnP,GAAA0P,MAAAO,KAAA9D,MAAAuD,EACAP,EAAAnP,GAAAyP,YAAAQ,KAAA9D,MAAAsD,EACAN,EAAAnP,GAAAwP,SAAAS,KAAA9D,MAAAqD,GAIAY,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAA/B,EAAAgG,IACAhG,EAAAgG,IAAAjE,EAEA0C,EAAAoB,KAAA9D,MAAAA,GAIA/D,QAAA,WACAwG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACAyO,EAAA1O,KAAA,GACA0O,EAAAzO,aAEA,IAAA,IAAAlB,EAAA,EAAAA,EAAAmP,EAAArO,OAAAd,IACAmP,EAAAnP,GAAAwJ,OAAAtI,aAEA,IAAA,IAAAmH,KAAAhK,YACAA,KAAAgK,GAEAqG,EAAA,OASA,OAJA2B,EAAAH,KAAA,IACAG,EAAAF,UAAA,GACAE,EAAAD,IAAA,KAEAC,GC1HAlR,cAAAmR,UAAA,SAAA7B,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA2B,EAAAjP,EAAAkP,kBACAC,EAAAnP,EAAAqN,aACA+B,EAAApP,EAAAqN,aASA,SAAAgC,EAAAtP,GACA,OAAAkP,EAAAlP,SACAkP,EAAArP,aACAqP,EAAAjP,EAAAkP,kBAEA/B,EAAAlN,QAAAgP,GACAA,EAAAhP,QAAAkP,IAEAF,EAAAlP,OAAAA,EAGA,OAlBAoN,EAAAlN,QAAAmP,GACAjC,EAAAlN,QAAAgP,GAEAA,EAAAhP,QAAAkP,GACAC,EAAAnP,QAAAmN,GACA+B,EAAAlP,QAAAmN,GAaA,CAGAA,OAAAA,EACAE,MAAAA,EAGA+B,UAAAA,EAGAC,WAAA,SAAAC,GACA,IAAAC,EAAA,IAAAC,eACAD,EAAAE,KAAA,MAAAH,GAAA,GACAC,EAAAG,aAAA,cAEAH,EAAAzO,OAAA,WACA,IAAA6O,EAAAJ,EAAAK,SACA7P,EAAA1B,gBAAAsR,EAAA,SAAA7P,GACAsP,EAAAtP,IACA,SAAAoC,GAAAA,EAAA2N,OAGAN,EAAAO,QAGAjB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAIA/D,QAAA,WAMA,IAAA,IAAAC,KALAuG,GAAAA,EAAA1N,aACAwP,EAAAxP,aACAwN,EAAAxN,aACAqP,EAAArP,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,QCrEAvP,cAAAmS,OAAA,SAAAC,EAAA9C,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA4C,EAAAlQ,EAAAmQ,qBAOA,OANAD,EAAA9O,KAAA6O,GAAA,UACAC,EAAAxB,UAAA7D,MAAA,IACAqF,EAAAE,EAAAvF,MAAA,EACAqF,EAAAjQ,QAAAmN,GACAD,EAAAlN,QAAAiQ,GAEA,CAGA9C,OAAAA,EACAE,MAAAA,EAEAlM,KAAA,SAAAyJ,GACA,QAAAxF,IAAAwF,EACA,OAAAqF,EAAA9O,KACA8O,EAAA9O,KAAAyJ,GAEA6D,UAAA,SAAA7D,GACA,QAAAxF,IAAAwF,EACA,OAAAqF,EAAAxB,UAAA7D,MACAqF,EAAAxB,UAAA7D,MAAAA,GAEAwF,MAAA,SAAAxF,GACA,QAAAxF,IAAAwF,EACA,OAAAqF,EAAAE,EAAAvF,MACAqF,EAAAE,EAAAvF,MAAAA,GAIA/D,QAAA,WAKA,IAAA,IAAAC,KAJAuG,GAAAA,EAAA1N,aACAsQ,EAAAtQ,aACAwN,EAAAxN,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,QC5CAvP,cAAAyS,MAAA,SAAAnD,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA8B,EAAApP,EAAAqN,aACA8B,EAAAnP,EAAAqN,aACAkD,EAAAvQ,EAAAqN,aACAmD,EAAAxQ,EAAAgO,cAEAb,EAAAlN,QAAAmP,GACAA,EAAAnP,QAAAmN,GAEAoD,EAAAvQ,QAAAsQ,GACAA,EAAAtQ,QAAAuQ,GAEArD,EAAAlN,QAAAuQ,GACAA,EAAAvQ,QAAAkP,GAEAA,EAAAlP,QAAAmN,GAEA,IAAA2B,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAEA4F,KAAA,SAAA5F,GACA,QAAAxF,IAAAwF,EAAA,OAAA2F,EAAA/B,UAAA5D,MACA2F,EAAA/B,UAAA5D,MAAAA,GAEAqD,SAAA,SAAArD,GACA,QAAAxF,IAAAwF,EAAA,OAAA0F,EAAA5B,KAAA9D,MACA0F,EAAA5B,KAAA9D,MAAAA,GAIA/D,QAAA,WAQA,IAAA,IAAAC,KAPAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACAwP,EAAAxP,aACAuP,EAAAvP,aACA2Q,EAAA3Q,aACA4Q,EAAA5Q,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,OAQA,OAJA2B,EAAAD,IAAA,IACAC,EAAA0B,KAAA,IACA1B,EAAAb,SAAA,IAEAa,GC9DAlR,cAAA6S,WAAA,SAAAvD,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GACA,IAAAqD,EAAA,GAAA1N,KAAA2N,GAAA,IAEAC,EAAA7Q,EAAA8Q,mBACAD,EAAA5Q,QAAAmN,GACAD,EAAAlN,QAAA4Q,GAEA,IAAA/H,EAAA,CACAiI,OAAA,GAEA,MAAA,CACA3L,IAAA,SAAA2L,GACA,QAAA1L,IAAA0L,EAAA,OAAAjI,EAAAiI,OACAjI,EAAAiI,OAAAA,EAEAA,GAAA,GAIA,IAHA,IAAAC,EAAA,IAAAC,aAAAjR,EAAAkR,YACAxR,EAAA,EAAAM,EAAAkR,WAEAxS,EAAA,EAAAA,EAAAsB,EAAAkR,WAAAxS,IAAA,CACA,IAAA0J,EAAA1J,EAAAgB,EAAA,EAGAsR,EAAAtS,IAAA,EAAAqS,GAAA3I,EAAAuI,GAAA1N,KAAA2N,GAAAG,EAAA9N,KAAA2I,IAAAxD,IAGAyI,EAAAG,MAAAA,GAKA5D,OAAAA,EACAE,MAAAA,EAGAxG,QAAA,WAMA,IAAA,IAAAC,KALAuG,GAAAA,EAAA1N,aACAiR,EAAAjR,aACAwN,EAAAxN,aAEAiR,EAAAzD,EAAA,KACArQ,YACAA,KAAAgK,MC9CAlJ,cAAAsT,SAAA,SAAAhE,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA8B,EAAApP,EAAAqN,aACA8B,EAAAnP,EAAAqN,aACAkD,EAAAvQ,EAAAqN,aACAmD,EAAAxQ,EAAAgO,cACAoD,EAAApR,EAAAmQ,qBAEAhD,EAAAlN,QAAAmP,GACAA,EAAAnP,QAAAmN,GAEAD,EAAAlN,QAAAkP,GACAhC,EAAAlN,QAAAsQ,GAEAA,EAAAtQ,QAAAmR,GACAA,EAAAnR,QAAAuQ,GACAA,EAAAvQ,QAAAsQ,GACAC,EAAAvQ,QAAAkP,GAEAA,EAAAlP,QAAAmN,GAEA,IAAA2B,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAEA4F,KAAA,SAAA5F,GACA,QAAAxF,IAAAwF,EAAA,OAAA2F,EAAA/B,UAAA5D,MACA2F,EAAA/B,UAAA5D,MAAAA,GAEAqD,SAAA,SAAArD,GACA,QAAAxF,IAAAwF,EAAA,OAAA0F,EAAA5B,KAAA9D,MACA0F,EAAA5B,KAAA9D,MAAAA,GAEAwG,OAAA,SAAAxG,GACA,QAAAxF,IAAAwF,EAAA,OAAAuG,EAAA1C,UAAA7D,MACAuG,EAAA1C,UAAA7D,MAAAA,GAIA/D,QAAA,WAOA,IAAA,IAAAC,KANAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACAwP,EAAAxP,aACAuP,EAAAvP,aACA2Q,EAAA3Q,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,OASA,OALA2B,EAAAD,IAAA,IACAC,EAAA0B,KAAA,IACA1B,EAAAb,SAAA,IACAa,EAAAsC,OAAA,KAEAtC,GCrEAlR,cAAAyT,UAAA,SAAAC,EAAApE,GACA,IAAA9J,EAAAkO,GAAA,CAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MACAvR,EAAAjD,KAAAiB,aAEAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAKA,IAHA,IAAAgE,EAAA,GACAE,EAAAnO,EAAA7D,OAAA,EAEAd,EAAA,EAAAA,EAAA2E,EAAA7D,OAAAd,IAAA,CACA,IAAA+S,EAAAzR,EAAAmQ,qBACAsB,EAAA9C,KAAA9D,MAAA,EACA4G,EAAA/C,UAAA7D,MAAAxH,EAAA3E,GAEA+S,EAAArQ,KAAA,IAAA1C,EAAA,WACAA,IAAA8S,EAAA,YACA,UAEA,IAAA9S,GACA4S,EAAAjO,EAAA3E,EAAA,IAAAuB,QAAAwR,GACAH,EAAAjO,EAAA3E,IAAA+S,EAMA,OAHAtE,EAAAlN,QAAAqR,EAAAjO,EAAA,KACAoO,EAAAxR,QAAAmN,GAEA,CAGAA,OAAAA,EACAE,MAAAA,EAEAoB,UAAA,SAAAA,EAAAgD,GACA,QAAArM,IAAAqM,EAAA,OAAAJ,EAAA5C,GAAAC,KAAA9D,MACAyG,EAAA5C,GAAAC,KAAA9D,MAAA6G,GAIA5K,QAAA,WACA,IAAA,IAAApI,EAAA,EAAAA,EAAA2E,EAAA7D,OAAAd,IACA4S,EAAAjO,EAAA3E,IAAAkB,aAOA,IAAA,IAAAmH,KALAuK,EAAA1P,OAAA,GAEA0L,GAAAA,EAAA1N,aACAwN,EAAAxN,aAEA7C,YACAA,KAAAgK,GAEAuK,EAAAlE,EAAA,QCpDAvP,cAAA8T,KAAA,SAAAxE,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KAMA,OALAC,IAAAH,EAAAG,GAEAF,EAAAuB,KAAA9D,MAAA,EACAsC,EAAAlN,QAAAmN,GAEA,CAGAA,OAAAA,EACAE,MAAAA,EAEAsE,GAAA,SAAA/G,EAAA4F,EAAA7K,GACAwH,EAAAuB,KAAAkD,sBAAA7R,EAAAwB,aAEA,IAAAsQ,GAAA,EAAA1E,EAAAuB,KAAA9D,OAAAA,EACAuC,EAAAuB,KAAAoD,gBAAA,EAAA/R,EAAAwB,YAAAsQ,EAAArB,GAEA7K,GAAA6D,WAAA7D,EAAA,IAAA6K,IAEAuB,IAAA,SAAAnH,EAAA4F,EAAA7K,GACAwH,EAAAuB,KAAAkD,sBAAA7R,EAAAwB,aAEA,IAAAsQ,EAAA1E,EAAAuB,KAAA9D,MAAAA,EACAuC,EAAAuB,KAAAoD,gBAAA,KAAA/R,EAAAwB,YAAAsQ,EAAArB,GAEA7K,GAAA6D,WAAA7D,EAAA,IAAA6K,IAIA3J,QAAA,WAIA,IAAA,IAAAC,KAHAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,QCxCAvP,cAAAoU,QAAA,SAAA9E,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA4E,EAAAlS,EAAAqN,aACA8B,EAAAnP,EAAAqN,aACA+B,EAAApP,EAAAqN,aACAmD,EAAAxQ,EAAAgO,cACAmE,EAAAnS,EAAAsO,mBACA8D,EAAApS,EAAAqN,aACAgF,EAAArS,EAAAqN,aACA8E,EAAA/Q,KAAA,OAEA+L,EAAAlN,QAAAiS,GACA/E,EAAAlN,QAAAmP,GAEA8C,EAAAjS,QAAAuQ,GACA0B,EAAAjS,QAAAkP,GAEAqB,EAAAvQ,QAAAkP,GACAqB,EAAAvQ,QAAAoS,GAEAA,EAAApS,QAAAiS,GAEAC,EAAAlS,QAAAmS,GACAA,EAAAnS,QAAAuQ,EAAA/B,WAEAW,EAAAnP,QAAAmN,GACA+B,EAAAlP,QAAAmN,GAEA+E,EAAAlR,MAAA,GAEA,IAAA8N,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAEA4F,KAAA,SAAA5F,GACA,QAAAxF,IAAAwF,EAAA,OAAAhN,cAAAC,MAAAoN,YAAAsF,EAAA/B,UAAA5D,MAAA,KAAA,KACA2F,EAAA/B,UAAA5D,MAAAhN,cAAAC,MAAAiN,UAAAF,EAAA,KAAA,MAEA1F,MAAA,SAAA0F,GACA,QAAAxF,IAAAwF,EAAA,OAAAhN,cAAAC,MAAAoN,YAAAsF,EAAA/B,UAAA5D,MAAA,GAAA,GACAsH,EAAAzD,UAAA7D,MAAAhN,cAAAC,MAAAiN,UAAAF,EAAA,GAAA,IAEAyH,MAAA,SAAAzH,GACA,QAAAxF,IAAAwF,EAAA,OAAAhN,cAAAC,MAAAoN,YAAAsF,EAAA/B,UAAA5D,MAAA,KAAA,MACAuH,EAAAzD,KAAA9D,MAAAhN,cAAAC,MAAAiN,UAAAF,EAAA,KAAA,OAEAqD,SAAA,SAAArD,GACA,QAAAxF,IAAAwF,EAAA,OAAAhN,cAAAC,MAAAoN,YAAAsF,EAAA/B,UAAA5D,MAAA,EAAA,IACAwH,EAAA1D,KAAA9D,MAAAhN,cAAAC,MAAAiN,UAAAF,EAAA,EAAA,KAIA/D,QAAA,WAMA,IAAA,IAAAC,KALAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACAsS,EAAAtS,aACAwP,EAAAxP,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,OAUA,OANA2B,EAAA0B,KAAA,KACA1B,EAAA5J,MAAA,IACA4J,EAAAuD,MAAA,IACAvD,EAAAb,SAAA,IACAa,EAAAD,IAAA,IAEAC,GClFAlR,cAAA0U,WAAA,SAAApF,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAQA,IAPA,IAGAkF,EAAA,GACAC,EAAA,GACAC,EAAA,GAEAhU,EAAA,EAAAA,EAPA,EAOAA,IACA8T,EAAA9T,GAAAsB,EAAAmQ,qBACAqC,EAAA9T,GAAA0C,KAAA,WACAqR,EAAA/T,GAAAsB,EAAAmQ,qBACAsC,EAAA/T,GAAA0C,KAAA,WACA+L,EAAAlN,QAAAuS,EAAA9T,IAEAgU,EAAAhU,GAAAsB,EAAAqN,aACAqF,EAAAhU,GAAAuB,QAAAmN,GACAoF,EAAA9T,GAAAuB,QAAAwS,EAAA/T,IAAAuB,QAAAyS,EAAAhU,IAGA0O,EAAAuB,KAAA9D,MAAA,GACA,IAAA/B,EAAA,CACA6J,MAAA,EACAC,MAAA,EACAvC,MAAA,GAGAtB,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAGAqF,MAAA,SAAA9H,GACA,QAAAxF,IAAAwF,EAAA,OAAA/B,EAAA6J,MACA7J,EAAA6J,MAAA9H,EAGA,IADA,IAAAgI,EAAAhV,cAAAiF,QAAAC,WAAA8H,GACAnM,EAAA,EAAAA,EAtCA,EAsCAA,IACA8T,EAAA9T,GAAAgQ,UAAA7D,MAAAgI,EACAJ,EAAA/T,GAAAgQ,UAAA7D,MAAAgI,GAIAD,MAAA,SAAA/H,GACA,QAAAxF,IAAAwF,EAAA,OAAA/B,EAAA8J,MACA9J,EAAA8J,MAAA/H,EAEA,IAAA,IAAAnM,EAAA,EAAAA,EAhDA,EAgDAA,IACAgU,EAAAhU,GAAAiQ,KAAA9D,MAAA,EAAA5H,KAAA6P,IAAA7P,KAAA2N,GAAA3N,KAAA2N,GAAA,GAAA/F,EAAAnM,EAjDA,KAqDA2R,MAAA,SAAAxF,GACA,QAAAxF,IAAAwF,EAAA,OAAA/B,EAAAuH,MACAvH,EAAAuH,MAAAxF,EAEA,IAAA,IAAAnM,EAAA,EAAAA,EAzDA,EAyDAA,IAAA,CACA,IAAAqU,EAAA,EAAA,GAAA9P,KAAAC,IAAA,EAAAxE,EA1DA,EA0DAmM,GACA2H,EAAA9T,GAAA0R,EAAAvF,MAAAkI,EACAN,EAAA/T,GAAA0R,EAAAvF,MAAAkI,IAKAjM,QAAA,WACAwG,GAAAA,EAAA1N,aACAwN,EAAAxN,aAEA,IAAA,IAAAlB,EAAA,EAAAA,EArEA,EAqEAA,IACA8T,EAAA9T,GAAAkB,aAGA,IAAA,IAAAmH,KAAAhK,YACAA,KAAAgK,GAEAqG,EAAA,OAQA,OAJA2B,EAAA4D,MAAA,IACA5D,EAAA6D,MAAA,KACA7D,EAAAsB,MAAA,KAEAtB,GCzFAlR,cAAAmV,MAAA,WACA,IAAAhT,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,WAAAnN,EAAAqN,aAAA,KACAC,IAAAH,WAAAG,GAKA,IAHA,IAAA9N,EAAAyD,KAAAE,MAAA,KAAAnD,EAAAkR,YACA+B,EAAA,IAAAhC,aAAAzR,GAEAd,EAAA,EAAAA,EAAAc,EAAAd,IACAuU,EAAAvU,GAAAuE,KAAAiQ,MAAA,EAAAjQ,KAAA/D,IAAA+D,KAAAoF,WAAApF,KAAAkQ,IAAA,EAAAlQ,KAAA2N,GAAA3N,KAAAoF,UAAA,GAGA,IAAA+K,EAAApT,EAAAuC,aAAA,EAAA/C,EAAAQ,EAAAkR,YACAkC,EAAAC,eAAA,GAAAjO,IAAA6N,EAAA,GACAG,EAAAC,eAAA,GAAAjO,IAAA6N,EAAA,GAEA,IAAA5T,EAAAW,EAAAnB,qBAOA,OANAQ,EAAAgM,GAAA+B,GACA/N,EAAAmI,MAAA,EACAnI,EAAA4B,MAAA,GACA5B,EAAAU,OAAAqT,EACA/T,EAAAiU,UAAA,KAAArQ,KAAAoF,SAEA,CAGA+E,OAAAA,EACAE,MAAAA,EAGAxG,QAAA,WAUA,IAAA,IAAAC,KATA1H,EAAAmI,MAAA,EACAnI,EAAAU,OAAA,KACAV,EAAAM,KAAA,GACAN,EAAAO,aACAP,EAAA,KAEAiO,GAAAA,EAAA1N,aACAwN,EAAAxN,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,QC5CAvP,cAAA0V,cAAA,SAAApG,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GACA,IAEAkG,EAAAxT,EAAAgO,cACAyF,EAAAzT,EAAAgO,cACAoB,EAAApP,EAAAqN,aACA8B,EAAAnP,EAAAqN,aACAkD,EAAAvQ,EAAAqN,aACAqG,EAAA1T,EAAA4N,oBAAA,GAEAT,EAAAlN,QAAAmP,GACAA,EAAAnP,QAAAmN,GAEAoG,EAAAvT,QAAAyT,EAAA,EAAA,GACAD,EAAAxT,QAAAyT,EAAA,EAAA,GACAF,EAAAvT,QAAAwT,GAEAlD,EAAAtQ,QAAAuT,GACAC,EAAAxT,QAAAsQ,GAEApD,EAAAlN,QAAAsQ,GAEAmD,EAAAzT,QAAAkP,GACAA,EAAAlP,QAAAmN,GAEA,IAAA2B,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAEA4F,KAAA,SAAA5F,GACA,QAAAxF,IAAAwF,EAAA,OAAA2I,EAAA/E,UAAA5D,MACA2I,EAAA/E,UAAA5D,MAAAA,EACA4I,EAAAhF,UAAA5D,MAAAA,GAEAqD,SAAA,SAAArD,GACA,QAAAxF,IAAAwF,EAAA,OAAA0F,EAAA5B,KAAA9D,MACA0F,EAAA5B,KAAA9D,MAAAA,GAIA/D,QAAA,WAMA,IAAA,IAAAC,KALAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACAwP,EAAAxP,aACA2Q,EAAA3Q,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,OAQA,OAJA2B,EAAAD,IAAA,IACAC,EAAA0B,KAAA,IACA1B,EAAAb,SAAA,IAEAa,GCpEAlR,cAAA8V,WAAA,SAAAxG,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAAsG,EAAA,GACArI,EAAAqI,EAAA,EACAC,EAAAD,EAAA5T,EAAAkR,WAGA4C,EAAA9T,EAAAqN,aACA0G,EAAA/T,EAAAqN,aAEA2G,EAAAhU,EAAAgO,cACAiG,EAAAjU,EAAAgO,cACA8F,EAAA7T,QAAA+T,EAAAvF,WACAsF,EAAA9T,QAAAgU,EAAAxF,WAEAtB,EAAAlN,QAAA+T,GACA7G,EAAAlN,QAAAgU,GAEA,IAAAC,EAAAlU,EAAAwB,YAAA+J,EACA4I,EAAAnU,EAAAwB,YAAAoS,EAEA,SAAAQ,EAAAC,GAKA,IAJA,IAAAtU,EAAAC,EAAAuC,aAAA,EAAAsR,EAAA7T,EAAAkR,YACAyB,EAAA5S,EAAAsT,eAAA,GAGA3U,EAAA,EAAAA,EAAAmV,EAAAnV,IAEAiU,EAAAjU,GADA2V,GACAR,EAAAnV,GAAAmV,EAEAnV,EAAAmV,EAGA,OAAA9T,EAMA,IAFA,IAAAuU,EAAA,CAAA,EAAA,EAAA,EAAA,GACAC,EAAA,CAAA,EAAA,EAAA,EAAA,GACA7V,EAAA,EAAAA,EAAA4V,EAAA9U,OAAAd,IACA4V,EAAA5V,GAAAsB,EAAAnB,qBACAyV,EAAA5V,GAAA8I,MAAA,EAEA+M,EAAA7V,GAAAsB,EAAAqN,aAEA3O,EAAA,EACA4V,EAAA5V,GAAAqB,OAAAqU,GAAA,IAEAE,EAAA5V,GAAAqB,OAAAqU,GAAA,GACAG,EAAA7V,GAAAiQ,KAAA9D,MAAA,GAGAnM,EAAA,GACA6V,EAAA7V,GAAAuB,QAAA8T,GACAO,EAAA5V,GAAAuC,MAAAkT,KAGAI,EAAA7V,GAAAuB,QAAA6T,GACAQ,EAAA5V,GAAAuC,MAAAiT,IAGAI,EAAA5V,GAAAuB,QAAAsU,EAAA7V,IAqBA,IAAA8V,EAlBA,WAQA,IAPA,IAAAzU,EAAAC,EAAAuC,aAAA,EAAAsR,EAAA7T,EAAAkR,YACAyB,EAAA5S,EAAAsT,eAAA,GAEAoB,EAAAlJ,EAAAvL,EAAAkR,WACAwD,EAAAb,EAAAY,EAGA/V,EAAA,EAAAA,EAAAmV,EAAAnV,IAEAiU,EAAAjU,GADAA,EAAA+V,EACAxR,KAAAiQ,KAAAxU,EAAA+V,GAEAxR,KAAAiQ,KAAA,GAAAxU,EAAAgW,GAAAD,GAGA,OAAA1U,EAGA4U,GAGAC,EAAA,CAAA,EAAA,GACAC,EAAA,CAAA,EAAA,GACA,IAAAnW,EAAA,EAAAA,EAAAkW,EAAApV,OAAAd,IACAkW,EAAAlW,GAAAsB,EAAAnB,qBACA+V,EAAAlW,GAAA8I,MAAA,EACAoN,EAAAlW,GAAAqB,OAAAyU,EAEAK,EAAAnW,GAAAsB,EAAAqN,aACAwH,EAAAnW,GAAAiQ,KAAA9D,MAAA,EACA+J,EAAAlW,GAAAuB,QAAA4U,EAAAnW,GAAAiQ,MAEAjQ,EAAA,GACA6V,EAAA7V,GAAAuB,QAAA8T,GACAa,EAAAlW,GAAAuC,MAAAkT,KAGAI,EAAA7V,GAAAuB,QAAA6T,GACAc,EAAAlW,GAAAuC,MAAAiT,IAGAW,EAAAnW,GAAAuB,QAAAmN,GAMA,SAAA0H,EAAAjK,GACAiJ,EAAAnF,KAAA9D,MACAkJ,EAAApF,KAAA9D,MAAA,GAAA+I,EAAA3Q,KAAA2I,IAAAf,GALAmJ,EAAA/T,QAAA4U,EAAA,IACAZ,EAAAhU,QAAA4U,EAAA,IAOA,IAAA9F,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAIA7L,MAAA,SAAAoJ,GACA,QAAAxF,IAAAwF,EAAA,CAEA,IAAAkK,EAAAlK,EAAA,EACA0J,EAAA,GAAA5F,KAAA9D,MACA0J,EAAA,GAAA5F,KAAA9D,MAAAkK,EAAA,EAAA,EACAR,EAAA,GAAA5F,KAAA9D,MACA0J,EAAA,GAAA5F,KAAA9D,MAAAkK,EAAA,EAAA,EAEAD,EAAAjK,KAIA/D,QAAA,WACAwG,GAAAA,EAAA1N,aACAwN,EAAAxN,aAEA,IAAA,IAAAlB,EAAA,EAAAA,EAAAkW,EAAApV,OAAAd,IACAkW,EAAAlW,GAAAiB,OACAiV,EAAAlW,GAAAkB,aACAiV,EAAAnW,GAAAkB,aAGA,IAAAlB,EAAA,EAAAA,EAAA4V,EAAA9U,OAAAd,IACA4V,EAAA5V,GAAAiB,OACA2U,EAAA5V,GAAAkB,aACA2U,EAAA7V,GAAAkB,aAQA,IAAA,IAAAmH,KALA+M,EAAAlU,aACAmU,EAAAnU,aACAoU,EAAApU,aACAqU,EAAArU,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,OAKA,OADA0H,EAAA,GACA/F,GC1KAlR,cAAAmX,OAAA,SAAA7H,GACA,IAAAnN,EAAAjD,KAAAiB,aAEAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA2B,EAAAjP,EAAAkP,kBACAC,EAAAnP,EAAAqN,aACA+B,EAAApP,EAAAqN,aAEAF,EAAAlN,QAAAmP,GACAA,EAAAnP,QAAAmN,GACA+B,EAAAlP,QAAAmN,GAEA,IAAAqD,EAAA,EACAwE,EAAA,GACAC,GAAA,EAEA,SAAAC,IAMA,IALA,IAAA3V,EAAAQ,EAAAkR,WAAAT,EACA2E,EAAApV,EAAAuC,aAAA,EAAA/C,EAAAQ,EAAAkR,YACAmE,EAAAD,EAAA/B,eAAA,GACAiC,EAAAF,EAAA/B,eAAA,GAEA3U,EAAA,EAAAA,EAAAc,EAAAd,IAAA,CACA,IAAA6W,EAAAL,EAAA1V,EAAAd,EAAAA,EACA2W,EAAA3W,IAAA,EAAAuE,KAAAoF,SAAA,GAAApF,KAAAC,IAAA,EAAAqS,EAAA/V,EAAAyV,GACAK,EAAA5W,IAAA,EAAAuE,KAAAoF,SAAA,GAAApF,KAAAC,IAAA,EAAAqS,EAAA/V,EAAAyV,GAGAhG,EAAArP,aAEAqP,EAAAjP,EAAAkP,kBACA/B,EAAAlN,QAAAgP,GACAA,EAAAhP,QAAAkP,GAEAF,EAAAlP,OAAAqV,EAIA,OAFAD,IAEA,CAGA/H,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAGA4F,KAAA,SAAA5F,GACA,QAAAxF,IAAAwF,EAAA,OAAA4F,EACAA,EAAA5F,EACAsK,KAGAF,MAAA,SAAApK,GACA,QAAAxF,IAAAwF,EAAA,OAAAoK,EACAA,EAAApK,EACAsK,KAGAD,QAAA,SAAArK,GACA,QAAAxF,IAAAwF,EAAA,OAAAqK,EACAA,EAAArK,EACAsK,KAIArO,QAAA,WAMA,IAAA,IAAAC,KALAuG,GAAAA,EAAA1N,aACAwP,EAAAxP,aACAwN,EAAAxN,aACAqP,EAAArP,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,QCjFAvP,cAAA2X,aAAA,SAAArI,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAAmI,GAAA,EACA,GAAAzV,EAAA0V,mBAAA,CACA,IAAAC,EAAA3V,EAAA0V,qBACAD,GAAA,MAEA,EACAE,EAAA3V,EAAA4V,gBACAxU,KAAA,aAOA,OAJA+L,EAAAlN,QAAA0V,GACAA,EAAA1V,QAAAmN,GACAuI,EAAAE,IAAAhL,MAAA,EAEA,CAGAuC,OAAAA,EACAE,MAAAA,EAEAlI,IAAA,SAAAyQ,GACA,QAAAxQ,IAAAwQ,EAAA,OAAAF,EAAAE,IAAAhL,MACA4K,EACAE,EAAAE,IAAAhL,MAAAgL,EACAF,EAAAG,YAAAD,EAAA,EAAA,EAAA5S,KAAA2I,IAAAiK,KAIA/O,QAAA,WAKA,IAAA,IAAAC,KAJAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACA+V,EAAA/V,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAAuI,EAAA,QC1CA9X,cAAAkY,QAAA,SAAA5I,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEA,IAAA8B,EAAApP,EAAAqN,aACA8B,EAAAnP,EAAAqN,aAEA2I,EAAAhW,EAAAqN,aACA2I,EAAArH,KAAA9D,MAAA,EAEA,IAAAoL,EAAAjW,EAAA8Q,mBACAmF,EAAAjF,MAAA,IAAAC,aAAA,CAAA,EAAA,IACAgF,EAAAhW,QAAA+V,EAAArH,MAEAxB,EAAAlN,QAAAmP,GACAA,EAAAnP,QAAAmN,GAEA,IAAA8I,EAAAlW,EAAAsO,mBACA4H,EAAAjW,QAAAgW,GACAC,EAAA9U,KAAA,OACA8U,EAAAjV,MAAA,GAEAkM,EAAAlN,QAAA+V,GACAA,EAAA/V,QAAAkP,GACAA,EAAAlP,QAAAmN,GAEA,IAAA2B,EAAA,CAGA3B,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAEA1F,MAAA,SAAA0F,GACA,QAAAxF,IAAAwF,EAAA,OAAAhN,cAAAC,MAAAoN,YAAAgL,EAAAxH,UAAA7D,MAAA,EAAA,IACAqL,EAAAxH,UAAA7D,MAAAhN,cAAAC,MAAAiN,UAAAF,EAAA,EAAA,KAEAyH,MAAA,SAAAzH,GACA,QAAAxF,IAAAwF,EAAA,OAAA,EAAA9N,KAAAkZ,WAAAjF,MAAA,GACAiF,EAAAjF,MAAA,IAAAC,aAAA,CAAA,EAAApG,EAAA,KAIA/D,QAAA,WAMA,IAAA,IAAAC,KALAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aACAwP,EAAAxP,aACAoW,EAAApW,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA,OAQA,OAJA2B,EAAA5J,MAAA,IACA4J,EAAAuD,MAAA,GACAvD,EAAAD,IAAA,IAEAC,GClEAlR,cAAAsY,QAAA,SAAAhJ,GACA,IAAAnN,EAAAjD,KAAAiB,aACAoP,EAAApN,EAAAqN,aACAC,OAAAjI,IAAA8H,EAAAnN,EAAAqN,aAAA,KACAC,IAAAH,EAAAG,GAEArO,QAAAC,IAAA,gCAEA,IAAAsR,EAAAxQ,EAAAgO,cACAmB,EAAAnP,EAAAqN,aACA+B,EAAApP,EAAAqN,aACA6I,EAAAlW,EAAAsO,mBAkBA,OAfAnB,EAAAlN,QAAAmP,GACAA,EAAAnP,QAAAmN,GACA+B,EAAAlP,QAAAmN,GAEAoD,EAAA/B,UAAA5D,MAAA,EAEAqL,EAAAxH,UAAA7D,MAAA,EACAqL,EAAA9U,KAAA,OACA8U,EAAAjV,MAAA,GAEAiV,EAAAjW,QAAAuQ,EAAA/B,WAEAtB,EAAAlN,QAAAuQ,GACAA,EAAAvQ,QAAAkP,GAEA,CAGA/B,OAAAA,EACAE,MAAAA,EAEAwB,IAAA,SAAAjE,GACA,QAAAxF,IAAAwF,EAAA,OAAAsE,EAAAR,KAAA9D,MACAuE,EAAAT,KAAA9D,MAAA,EAAAA,EACAsE,EAAAR,KAAA9D,MAAAA,GAGAyF,MAAA,SAAAzF,GACA,QAAAxF,IAAAwF,EAAA,OAAA2F,EAAA/B,UAAA5D,MACA2F,EAAA/B,UAAA5D,MAAAA,GAGAyH,MAAA,SAAAzH,GACA,QAAAxF,IAAAwF,EAAA,OAAAuL,UAAAzH,KAAA9D,MACAuL,UAAAzH,KAAA9D,MAAAA,GAGA1F,MAAA,SAAA0F,GACA,QAAAxF,IAAAwF,EAAA,OAAAqL,EAAAxH,UAAA7D,MACAqL,EAAAxH,UAAA7D,MAAAA,GAIA/D,QAAA,WAWA,IAAA,IAAAC,KAVAuG,GAAAA,EAAA1N,aACAwN,EAAAxN,aAEAuN,EAAAvN,WAAA4Q,GACArD,EAAAvN,WAAAwP,GAEA8G,EAAAvW,OACAuW,EAAAtW,aACAwW,UAAAxW,aAEA7C,YACAA,KAAAgK,GAEAqG,EAAA","file":"SFMediaStream.min.js","sourcesContent":["// Minimum 3 bufferElement\r\nwindow.ScarletsAudioBufferStreamer = function(bufferElement, chunksDuration, webAudio){\r\n\tif(!bufferElement || bufferElement < 3) bufferElement = 3;\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.bufferElement = [];\r\n\tscope.bufferAvailable = [];\r\n\tscope.bufferPending = [];\r\n\tscope.currentBuffer = 0;\r\n\tscope.playing = false;\r\n\tscope.buffering = false;\r\n\tscope.streaming = false;\r\n\tscope.currentDuration = false;\r\n\tscope.latency = 0;\r\n\tscope.error = 0;\r\n\tscope.realtime = false;\r\n\tscope.bufferSkip = 0.07;\r\n\tscope.mimeType = null;\r\n\r\n\t// Use webAudio for mobile, and HTML5 audio for computer\r\n\tscope.webAudio = webAudio || ScarletsMedia.extra.isMobile() ? true : false; // Mobile browser have security on HTML element\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node  \r\n\t// Avoid webAudio for computer browser because memory usage\r\n\r\n\tvar bufferHeader = false;\r\n\tvar bufferHeaderLength = false;\r\n\r\n\tscope.setBufferHeader = function(arrayBuffer){\r\n\t\tif(!arrayBuffer){\r\n\t\t\tbufferHeader = bufferHeaderLength = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tbufferHeader = arrayBuffer;\r\n\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\r\n\t\t// Find buffer skip\r\n\t\tif(scope.audioContext)\r\n\t\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t\tscope.bufferSkip = audioBuffer.duration;\r\n\t\t\t});\r\n\t}\r\n\r\n\t// First initialization\r\n\tfor (var i = 0; i < bufferElement; i++) addBufferElement(i);\r\n\tfunction addBufferElement(i){\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.bufferElement.push(createBufferSource());\r\n\t\t\tscope.bufferAvailable.push(false);\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tvar audioHandler = new Audio();\r\n\t\t\tif(audioHandler){\r\n\t\t\t\tscope.bufferElement.push(audioHandler);\r\n\t\t\t\tscope.bufferAvailable.push(false);\r\n\r\n\t\t\t\taudioHandler.onended = function(){\r\n\t\t\t\t\tif(scope.debug) console.log(\"Buffer ended with ID: \"+i);\r\n\r\n\t\t\t\t\tURL.revokeObjectURL(this.src);\r\n\t\t\t\t\tthis.src = '';\r\n\r\n\t\t\t\t\tif(!scope.realtime){\r\n\t\t\t\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t\t\t\t\tscope.playing = false;\r\n\t\t\t\t\t\tscope.buffering = true;\r\n\t\t\t\t\t\tscope.playAvailable();\r\n\r\n\t\t\t\t\t\tif(scope.bufferAvailable.indexOf(false) !== -1 && scope.bufferPending.length != 0)\r\n\t\t\t\t\t\t\tfillEmptyBuffer();\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeaderLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeaderLength);\r\n\t\tconsole.log(finalBuffer.buffer);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(!scope.streaming) return;\r\n\t\tvar streamingTime = arrayBuffer[1];\r\n\t\tscope.realtime = false;\r\n\r\n\t\tif(chunksDuration){\r\n\t\t\tvar unplayed = scope.bufferPending.length;\r\n\t\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\t\tif(scope.bufferAvailable[i]) unplayed++;\r\n\t\t\t}\r\n\t\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) \r\n\t\t\t\t\t\t\t\t+ chunksDuration*unplayed + scope.audioContext.baseLatency;\r\n\t\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.push(arrayBuffer[0]);\r\n\t\tfillEmptyBuffer();\r\n\r\n\t\tif(scope.buffering)\r\n\t\t\tscope.playAvailable();\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tvar fileReader = new FileReader();\r\n\tvar realtimeBufferInterval = 0; // Need 3 bufferElement, other than this will give lower quality\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(arrayBuffer[0].byteLength === 0) return;\r\n\t\tarrayBuffer = arrayBuffer[0];\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +\r\n\t\t\tchunksDuration/1000 + scope.audioContext.baseLatency;\r\n\r\n\t\tscope.realtime = true;\r\n\t\t\r\n\t\tvar index = realtimeBufferInterval;\r\n\t\trealtimeBufferInterval++;\r\n\t\tif(realtimeBufferInterval > 2)\r\n\t\t\trealtimeBufferInterval = 0;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, arrayBuffer], {type:scope.mimeType}));\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tURL.revokeObjectURL(scope.bufferElement[index].src);\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, arrayBuffer], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\t}\r\n\r\n\tvar fillEmptyBuffer = function(){\r\n\t\tvar index = scope.bufferAvailable.indexOf(false, scope.currentBuffer);\r\n\t\tif(index==-1)\r\n\t\t\tindex = scope.bufferAvailable.indexOf(false);\r\n\t\tif(index==-1||scope.bufferPending.length==0)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.shift();\r\n\t\tscope.bufferAvailable[index] = true;\r\n\r\n\t\tif(scope.buffering) scope.playAvailable();\r\n\t\tif(scope.debug) console.log(\"Buffer updated with ID: \"+index);\r\n\t}\r\n\r\n\tscope.playBuffer = function(index){\r\n\t\tif(!scope.bufferElement[index].duration)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.debug) console.log(\"Current stream duration: \"+scope.bufferElement[index].duration);\r\n\r\n\t\tif(chunksDuration===false){ //Skip to end to get current duration\r\n\t\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.buffering = false;\r\n\t\tscope.playing = true;\r\n\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\tif(scope.bufferElement[index].start)\r\n\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\telse {\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\r\n\t\tscope.currentBuffer = index;\r\n\t\tif(scope.debug) console.log(\"Playing buffer ID: \"+scope.currentBuffer);\r\n\t}\r\n\r\n\tscope.playAvailable = function(){\r\n\t\tif(scope.playing) return;\r\n\r\n\t\tif(scope.bufferAvailable[scope.currentBuffer])\r\n\t\t\treturn scope.playBuffer(scope.currentBuffer);\r\n\r\n\t\telse{\r\n\t\t\tvar index = scope.bufferAvailable.indexOf(true, scope.currentBuffer);\r\n\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\r\n\t\t\telse{ // Scan from first array\r\n\t\t\t\tindex = scope.bufferAvailable.indexOf(true);\r\n\t\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.streaming = scope.buffering = true;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tscope.bufferPending.splice(0);\r\n\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\tscope.bufferElement[i].stop();\r\n\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t}\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tscope.currentBuffer = 0;\r\n\t}\r\n}","/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n'use strict';\r\n\r\n// Initialize global data\r\nwindow.ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tif(!window.AudioContext) return removeListener();\r\n\t\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nwindow.ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tself.play = function(callback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\telement.play();\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, callback);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.play();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i]}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload) element.load();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// streamInfo = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nwindow.ScarletsMediaPresenter = function(streamInfo, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var streamInfo = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\r\n\tscope.mediaGranted = false;\r\n\r\n\tvar fileReader = new FileReader();\r\n\tscope.options = {};\r\n\tif(streamInfo.audio&&!streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm'))\r\n\t\t\tscope.options.mimeType = 'audio/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4';\r\n\t}\r\n\telse if(!streamInfo.audio&&streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg'))\r\n\t\t\tscope.options.mimeType = 'video/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'video/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\telse{\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\r\n\tvar recordingInterval = false;\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, scope.options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\tscope.mediaRecorder.requestData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e) {\r\n\t\t\tif(bufferHeaderLength !== false){\r\n\t\t\t\tif(e.data.size === 0) return;\r\n\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tvar arrayBuffer = this.result;\r\n\r\n\t\t\t\tif(bufferHeaderLength === false){\r\n\t\t\t\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\t\t\t\t\tif(bufferHeaderLength == 0){\r\n\t\t\t\t\t\tbufferHeaderLength = false;\r\n\t\t\t\t\t\tsetTimeout(function(){scope.mediaRecorder.requestData()}, 0);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// ToDo: Clean media header\r\n\t\t\t\t\tscope.bufferHeader = arrayBuffer;\r\n\r\n\t\t\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\t\t\tscope.onRecordingReady(scope.bufferHeader);\r\n\t\t\t\t\tscope.recordingReady = true;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(e.data);\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start();\r\n\r\n\t\t// Stop recording after 3 seconds and broadcast it to server\r\n\t\trecordingInterval = ScarletsMedia.extra.preciseInterval(function(){\r\n\t\t\tif(!scope.recordingReady) return;\r\n\t\t\tscope.mediaRecorder.requestData();\r\n\t\t}, latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(!scope.mediaGranted || !scope.mediaRecorder.stream || !scope.mediaRecorder.stream.active){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(streamInfo).then(mediaGranted).catch(console.error);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start();\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tScarletsMedia.extra.clearPreciseInterval(recordingInterval);\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t// \r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\t\t\t\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};","ScarletsMedia.chorus = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.conReverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.delay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.distortion = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.dubDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.fade = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.flanger = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.harmonizer = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMedia.noise = function(){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.pingPongDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.pitchShift = function(sourceNode){\r\n    var context = this.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMedia.reverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.stereoPanner = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.tremolo = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.vibrato = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};"]}