{"version":3,"sources":["a_init.js","AudioStreamer.js","BufferHeader.js","Convert.js","MediaBuffer.js","MediaPlayer.js","MediaPresenter.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js","VideoStreamer.js","z_extra.js"],"names":["global","factory","exports","_typeof","module","window","this","moduleMode","ScarletsMedia","audioContext","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","ScarletsMediaEffect","audioCodecs","webm","mp4","ogg","videoCodecs","3gpp","waitingUnlock","userInteracted","AudioContext","console","error","mobileMediaUnlock","e","emptyBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","onended","disconnect","removeListener","start","noteOn","resume","document","removeEventListener","i","length","addEventListener","ScarletsAudioStreamer","chunksDuration","chunksSeconds","scope","debug","playing","latency","mimeType","bufferElement","onStop","outputNode","directAudioOutput","bufferHeader","mediaBuffer","audioElement","element","Audio","audioNode","target","node","createGain","stop","buffering","setBufferHeader","packet","data","arrayBuffer","MediaBuffer","Uint8Array","src","objectURL","decodeAudioData","slice","audioBuffer","noiseLength","getChannelData","webAudioBufferInsert","index","temp","frameCount","channelLength","numberOfChannels","newBuffer","sampleRate","set","subarray","cleanNoise","context","playStream","bufferElementIndex","realtimeBufferPlay","streamingTime","log","byteLength","Number","String","Date","now","baseLatency","finalBuffer","addBufferHeader","receiveBuffer","append","paused","play","BufferHeader","audio/webm;codecs=opus","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","MediaSource","URL","createObjectURL","removing","totalTime","sourceBuffer","buffers","startAppending","appendBuffer","onsourceopen","addSourceBuffer","mode","onerror","onupdateend","remove","updating","shift","buffered","push","abort","readyState","endOfStream","ScarletsMediaPlayer","self","constructor","createElement","body","appendChild","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","load","canPlayType","extra","objectPropertyLinker","preload","crossorigin","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","pause","currentTime","volume","stillWaiting","successCallback","errorCallback","then","catch","fadeNumber","num","callback","prepare","links","force","querySelectorAll","once","off","insertAdjacentHTML","split","join","eventRegistered","eventTrigger","type","on","eventName","name","splice","indexOf","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","currentSrc","j","x","random","ScarletsMediaPresenter","options","mediaStream","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","captureStream","mediaType","video","MediaRecorder","isTypeSupported","supportedMimeType","codecsList","format","codecs","audio","createMediaStreamSource","pendingConnect","firstSourceConnect","bufferHeaderLength","onstart","isVideo","headerLatency","ondataavailable","state","size","predefinedBuffer","chrome","buff","Blob","atob","UInt","charCodeAt","getBufferHeader","startTime","hasVideo","setTimeout","createMediaStreamDestination","reAddTracks","streams","getTracks","addTrack","afterStop","startRecording","screen","navigator","mediaDevices","getDisplayMedia","getUserMedia","stopRecording","removeTrack","chorus","sourceNode","output","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","value","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","abs","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","denormalize","normalize","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","to","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","fadeTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode","ScarletsVideoStreamer","videoElement","audioConnect","audioDisconnect","isMobile","test","userAgent","property","configurable","min","max","maxFade","from","increment","onIncrease","onFinish","current","interval","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseInterval","clearPreciseInterval","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","Media","MediaEffect","AudioStreamer","VideoStreamer","MediaPlayer","MediaPresenter"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\n\tScarletsFiction MediaStream Library\n\n\tHTML5 media streamer library for playing music, video, playlist,\n\tor even live streaming microphone & camera with node server\n\thttps://github.com/ScarletsFiction/SFMediaStream\n*/\n(function(global, factory){\n  if(typeof exports === 'object' && typeof module !== 'undefined'){\n  \tmodule.exports = {};\n  \tfactory(module.exports, window, true);\n  }\n  else factory(global, window);\n}(this || window, (function(global, window, moduleMode){'use strict';\n// ===== Module Init =====\n\n// Initialize global data\nvar ScarletsMedia = {\n\taudioContext: false, // Created after user gesture\n\n\t// Get Audio Node from HTML5's audio tag\n\tgetElementAudioNode:function(elem){\n\t\telem.crossOrigin = 'anonymous';\n\t\treturn this.audioContext.createMediaElementSource(elem);\n\t},\n\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\n\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\n\tgetElementVideoNode:function(elem){\n\t\telem.crossOrigin = 'anonymous';\n\t\treturn null;\n\t}\n};\n\nvar ScarletsMediaEffect = {};\nvar audioCodecs = {\n\twebm:['opus', 'vorbis'],\n\tmp4:['mp4a.67', 'mp4a.40.29', 'mp4a.40.5', 'mp4a.40.2', 'mp3'],\n\togg:['opus', 'vorbis'], // This may not work on mobile\n};\nvar videoCodecs = {\n\twebm:['vp8,opus', 'vp8,vorbis'],\n\tmp4:['mp4v.20.8,mp4a.40.2', 'mp4v.20.240,mp4a.40.2', 'avc1.42E01E,mp4a.40.2', 'avc1.58A01E,mp4a.40.2', 'avc1.64001E,mp4a.40.2'],\n\t'3gpp':['mp4v.20.8,samr'],\n\togg:['dirac,vorbis', 'theora,vorbis'], // This may not work on mobile\n};\n\nvar waitingUnlock = [];\nvar userInteracted = false;\n\n// Unlock mobile media security\n(function(){\n\tif(!window.AudioContext) return console.error(\"`AudioContext` was not available\");\n\tScarletsMedia.audioContext = new AudioContext();\n\n\tvar mobileMediaUnlock = function(e){\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\n\t\tsource.buffer = emptyBuffer;\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\n\n\t\tsource.onended = function(){\n\t\t\tsource.disconnect(0);\n\t\t\tsource = emptyBuffer = null;\n\n\t\t\tremoveListener();\n\t\t}\n\n\t\t// Play the empty buffer.\n\t\tif(!source.start) source.noteOn(0);\n\t\telse source.start(0);\n\t\tScarletsMedia.audioContext.resume();\n\t}\n\n\tfunction removeListener(){\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\n\n\t\tfor (var i = 0; i < waitingUnlock.length; i++) {\n\t\t\twaitingUnlock[i]();\n\t\t}\n\n\t\twaitingUnlock.length = 0;\n\t}\n\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\n})();","// Minimum 3 bufferElement\nvar ScarletsAudioStreamer = function(chunksDuration){\n\tif(!chunksDuration) chunksDuration = 1000;\n\tvar chunksSeconds = chunksDuration/1000;\n\n\tvar scope = this;\n\n\tscope.debug = false;\n\tscope.playing = false;\n\tscope.latency = 0;\n\tscope.mimeType = null;\n\tscope.bufferElement = [];\n\n\tscope.onStop = null;\n\n\tscope.audioContext = ScarletsMedia.audioContext;\n\tscope.outputNode = false; // Set this to a connectable Audio Node\n\n\t// If the outputNode is not set, then the audio will be outputted directly\n\tvar directAudioOutput = true;\n\n\tvar bufferHeader = false;\n\tvar mediaBuffer = false;\n\n\tvar audioElement = scope.element = new Audio();\n\tvar audioNode = scope.audioContext.createMediaElementSource(audioElement);\n\n\t// ToDo: we may need to try to recreate the element if error happen\n\t// Or reducing the extra latency\n\taudioElement.addEventListener('error', function(e){\n\t\tconsole.error(e.target.error);\n\t});\n\n\tscope.connect = function(node){\n\t\tif(directAudioOutput === true){\n\t\t\tdirectAudioOutput = false;\n\t\t\taudioNode.disconnect();\n\t\t}\n\n\t\tscope.outputNode = scope.audioContext.createGain();\n\t\tscope.outputNode.connect(node);\n\t\taudioNode.connect(node);\n\t}\n\n\tscope.disconnect = function(node){\n\t\tscope.outputNode.disconnect(node);\n\t\tdirectAudioOutput = true;\n\n\t\taudioNode.disconnect(node);\n\t\taudioNode.connect(scope.audioContext.destination);\n\t}\n\n\tscope.stop = function(){\n\t\tmediaBuffer.stop();\n\t\tscope.playing = false;\n\t\tscope.buffering = false;\n\t\tif (scope.onStop) scope.onStop();\n\t}\n\n\tscope.setBufferHeader = function(packet){\n\t\tif(!packet.data){\n\t\t\tbufferHeader = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar arrayBuffer = packet.data;\n\t\tscope.mimeType = packet.mimeType;\n\n\t\tif(mediaBuffer !== false)\n\t\t\tmediaBuffer.stop();\n\t\telse audioNode.connect(scope.audioContext.destination);\n\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\n\n\t\taudioElement.src = scope.objectURL = mediaBuffer.objectURL;\n\n\t\t// Get buffer noise length\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\n\t\t\t// headerDuration = audioBuffer.duration;\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\n\t\t});\n\t}\n\n\t// ===== For handling WebAudio =====\n\tfunction createBufferSource(){\n\t\tvar temp = scope.audioContext.createBufferSource();\n\t\ttemp.onended = function(){\n\t\t\tthis.stop();\n\t\t\tthis.disconnect();\n\t\t}\n\t\treturn temp;\n\t}\n\n\tvar addBufferHeader = function(arrayBuffer){\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\n\t\tfinalBuffer.set(bufferHeader, 0);\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\n\t\treturn finalBuffer.buffer;\n\t}\n\n\tvar noiseLength = 0;\n\tfunction cleanNoise(buffer){\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\n\t\tif(frameCount === 0) return false;\n\n  \t\tvar channelLength = buffer.numberOfChannels;\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\n\n\t\tfor (var i = 0; i < channelLength; i++) {\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\n\t    }\n\n\t    return newBuffer;\n\t}\n\n\tfunction webAudioBufferInsert(index, buffer){\n\t\tscope.bufferElement[index] = createBufferSource();\n\t\tbuffer = cleanNoise(buffer);\n\n\t\tif(buffer === false) return false;\n\t\tscope.bufferElement[index].buffer = buffer;\n\n\t\tif(scope.outputNode && scope.outputNode.context && directAudioOutput === false)\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\n\n\t\telse // Direct output to destination\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\n\t\treturn true;\n\t}\n\n\t// ===== Realtime Playing =====\n\t// Play audio immediately after received\n\n\tscope.playStream = function(){\n\t\tscope.playing = true;\n\t}\n\n\tvar bufferElementIndex = 0;\n\tscope.realtimeBufferPlay = function(packet){\n\t\tif(scope.playing === false) return;\n\n\t\tvar arrayBuffer = packet[0];\n\t\tvar streamingTime = packet[1];\n\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer.byteLength);\n\t\tif(arrayBuffer.byteLength === 0) return;\n\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) + chunksSeconds + scope.audioContext.baseLatency;\n\n\t\tvar index = bufferElementIndex;\n\t\tbufferElementIndex++;\n\t\tif(bufferElementIndex > 2)\n\t\t\tbufferElementIndex = 0;\n\n\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\n\t\t\tif(webAudioBufferInsert(index, buffer) === false)\n\t\t\t\treturn;\n\n\t\t\tscope.bufferElement[index].start(0);\n\t\t});\n\t}\n\n\t// ====== Synchronous Playing ======\n\t// Play next audio when last audio was finished\n\n\tscope.receiveBuffer = function(packet){\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\n\n\t\tvar arrayBuffer = packet[0];\n\t\tvar streamingTime = packet[1];\n\n\t\tmediaBuffer.append(arrayBuffer);\n\n\t\tif(audioElement.paused)\n\t\t\taudioElement.play();\n\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) +  scope.audioContext.baseLatency + chunksSeconds;\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\n\t}\n}\n","var BufferHeader = {\n\t\"audio/webm;codecs=opus\": \"GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQRChYECGFOAZwH/////////FUmpZpkq17GDD0JATYCGQ2hyb21lV0GGQ2hyb21lFlSua7+uvdeBAXPFh7o5nyc1kHqDgQKGhkFfT1BVU2Oik09wdXNIZWFkAQIAAIC7AAAAAADhjbWERzuAAJ+BAmJkgSAfQ7Z1Af/////////ngQCjjIEAAID/A//+//7//qM=\"\n};\n\nfunction getBufferHeader(type) {\n\tif (!window.chrome && type === \"audio/webm;codecs=opus\" ) {\n\t\t// this header is only for chrome based brosers\n\t\treturn false;\n\t}\n\n\tvar buff = BufferHeader[type];\n\tif(buff === void 0) return false;\n\n\tif(buff.constructor === Blob)\n\t\treturn buff;\n\n\tbuff = atob(buff);\n\n\tvar UInt = new Uint8Array(buff.length);\n\tfor (var i = 0; i < buff.length; i++)\n\t\tUInt[i] = buff.charCodeAt(i);\n\n\treturn BufferHeader[type] = new Blob([UInt]);\n}","ScarletsMedia.convert = {\n\t// Converts a MIDI pitch number to frequency.\n\t// midi = 0 ~ 127\n\tmidiToFreq:function (midi) {\n\t    if(midi <= -1500) return 0;\n\t    else if(midi > 1499) return 3.282417553401589e+38;\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\n\t},\n\n\t// Converts frequency to MIDI pitch.\n\tfreqToMidi:function(freq){\n\t\tif(freq > 0)\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\n\t\telse return -1500;\n\t},\n\n    // Converts power to decibel. Note that it is off by 100dB to make it\n\tpowerToDb:function(power){\n\t    if (power <= 0)\n\t    \treturn 0;\n\t    else {\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\n\t        if(db < 0) return 0;\n\t        return db;\n\t    }\n\t},\n\n    // Converts decibel to power\n\tdbToPower:function(db){\n\t    if (db <= 0) return 0;\n\t    else {\n  \t        if (db > 870) db = 870;\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\n\t    }\n\t},\n\n\t// Converts amplitude to decibel.\n\tampToDb:function(lin){\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\n\t},\n\n\t// Converts decibel to amplitude\n\tdbToAmp:function(db) {\n\t    return Math.pow(10.0, db / 20.0);\n\t},\n\n\t// Converts MIDI velocity to amplitude\n\tvelToAmp:function (velocity) {\n\t    return velocity / 127;\n\t},\n}","var MediaBuffer = function(mimeType, chunksDuration, bufferHeader){\n\tvar scope = this;\n\tscope.source = new MediaSource();\n\tscope.objectURL = URL.createObjectURL(scope.source);\n\n\tvar removing = false;\n\tvar totalTime = 0; // miliseconds\n\tvar sourceBuffer = null;\n\tvar buffers = [];\n\n\tscope.source.onsourceopen = function(){\n\t\tsourceBuffer = scope.source.addSourceBuffer(mimeType);\n\t\tsourceBuffer.mode = 'sequence';\n\t\tsourceBuffer.appendBuffer(bufferHeader);\n\n\t\tsourceBuffer.onerror = function(e){\n\t\t\tconsole.error(\"SourceBuffer error:\", e);\n\t\t}\n\n\t\tsourceBuffer.onupdateend = function(){\n\t\t\tif(removing){\n\t\t\t\tremoving = false;\n\t\t\t\ttotalTime = 10000;\n\n\t\t\t\t// 0 ~ 10 seconds\n\t\t\t\tsourceBuffer.remove(0, 10);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(!sourceBuffer.updating && buffers.length !== 0)\n\t\t\t\tstartAppending(buffers.shift());\n\t\t};\n\t};\n\n\tfunction startAppending(buffer){\n\t\tsourceBuffer.appendBuffer(buffer);\n\t\ttotalTime += chunksDuration;\n\t\t// console.log(totalTime, buffer);\n\t}\n\n\tscope.source.onerror = function(e){\n\t\tconsole.error(\"MediaSource error:\", e);\n\t}\n\n\tscope.append = function(arrayBuffer){\n\t\tif(sourceBuffer === null)\n\t\t\treturn false;\n\n\t\tif (!sourceBuffer.updating && sourceBuffer.buffered.length === 2)\n\t\t\t// The problem of accessing to 'sourceBuffer.buffered' is that after you append data, the SourceBuffer instance becomes temporarily unusable while it's working.\n\t\t\t// During this time, the SourceBuffer's updating property will be set to true, so it's easy to check for.\n\t\t\tconsole.log('something wrong');\n\n\t\tif(totalTime >= 20000)\n\t\t\tremoving = true;\n\n\t\tif(!sourceBuffer.updating)\n\t\t\tstartAppending(arrayBuffer);\n\t\telse\n\t\t\tbuffers.push(arrayBuffer);\n\n\t\treturn totalTime/1000;\n\t}\n\n\tscope.stop = function(){\n\t\tif(sourceBuffer.updating)\n\t\t\tsourceBuffer.abort();\n\n\t\tif(scope.source.readyState === \"open\")\n\t\t\tscope.source.endOfStream();\n\t}\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\nvar ScarletsMediaPlayer = function(element){\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n\tvar self = this;\n\n\tif(element === void 0)\n\t\telement = 'audio';\n\n\tif(element.constructor === String){\n\t\tif(element !== 'audio' && element !== 'video')\n\t\t\treturn console.error('Supported player is \"audio\" or \"video\"');\n\n\t\telement = document.createElement(element);\n\t\tdocument.body.appendChild(element);\n\t}\n\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\n\n\t// Get element audio for output node\n\tvar audioOutputNode = false;\n\tObject.defineProperty(self, 'audioOutput', {\n\t\tget: function(){\n\t\t\tif(!audioOutputNode)\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\n\n\t\t\treturn audioOutputNode;\n\t\t},\n\t\tenumerable: true\n\t});\n\n\tif(element.tagName.toLowerCase() === 'video'){\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\n\n\t\t// Get element video for output node\n\t\tvar videoOutputNode = false;\n\t\tObject.defineProperty(self, 'videoOutput', {\n\t\t\tget: function(){\n\t\t\t\tif(!videoOutputNode)\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\n\n\t\t\t\treturn videoOutputNode;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t});\n\t}\n\n\t// Reference element function\n\tself.load = function(){\n\t\telement.load();\n\t}\n\n\tself.canPlayType = function(){\n\t\telement.canPlayType();\n\t}\n\n\t// Reference element property\n\tfor (var i = 0; i < propertyLinker.length; i++) {\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\n\t}\n\n\tself.preload = true;\n\telement.preload = 'metadata';\n\telement.crossorigin = 'anonymous';\n\tself.audioFadeEffect = true;\n\n\tself.speed = function(set){\n\t\tif(set === undefined) return element.defaultPlaybackRate;\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\n\t}\n\n\tself.mute = function(set){\n\t\tif(set === undefined) return element.muted;\n\t\telement.defaultMuted = element.muted = set;\n\t}\n\n\tself.stop = function(){\n\t\tself.pause();\n\t\tself.currentTime = 0;\n\t}\n\n\tvar volume = 1;\n\tself.volume = function(set){\n\t\tif(set === undefined) return volume;\n\t\telement.volume = volume = set;\n\t}\n\n\tvar stillWaiting = false;\n\tfunction play(successCallback, errorCallback){\n\t\telement.play().then(function(){\n\t\t\tstillWaiting = false;\n\t\t\tif(successCallback) successCallback();\n\t\t}).catch(function(e){\n\t\t\tif(errorCallback) errorCallback(e);\n\t\t\telse{\n\t\t\t\t// If user haven't interacted with the page\n\t\t\t\t// and media play was requested, let's pending it\n\t\t\t\tif(userInteracted === false){\n\t\t\t\t\tif(stillWaiting === false){\n\t\t\t\t\t\twaitingUnlock.push(function(){\n\t\t\t\t\t\t\tplay(successCallback, errorCallback);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tself.play = function(successCallback, errorCallback){\n\t\tif(!element.paused){\n\t\t\tif(successCallback) successCallback();\n\t\t\treturn;\n\t\t}\n\t\tif(self.audioFadeEffect){\n\t\t\telement.volume = 0;\n\t\t\tplay(successCallback, errorCallback);\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\n\t\t\t\telement.volume = num;\n\t\t\t}, successCallback);\n\t\t\treturn;\n\t\t}\n\n\t\tplay(successCallback, errorCallback);\n\t}\n\n\tself.pause = function(callback){\n\t\tif(element.paused){\n\t\t\tif(callback) callback();\n\t\t\treturn;\n\t\t}\n\t\tif(self.audioFadeEffect){\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\n\t\t\t\telement.volume = num;\n\t\t\t}, function(){\n\t\t\t\telement.pause();\n\t\t\t\tif(callback) callback();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\telement.pause();\n\t\tif(callback) callback();\n\t}\n\n\tself.prepare = function(links, callback, force){\n\t\t// Stop playing media\n\t\tif(!force && !element.paused)\n\t\t\treturn self.pause(function(){\n\t\t\t\tself.prepare(links, callback, true);\n\t\t\t});\n\n\t\tvar temp = element.querySelectorAll('source');\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\n\t\t\ttemp[i].remove();\n\t\t}\n\n\t\tif(self.preload && callback){\n\t\t\tself.once('canplay', callback);\n\t\t\tself.once('error', function(){\n\t\t\t\tself.off('canplay', callback);\n\t\t\t});\n\t\t}\n\n\t\tif(typeof links === 'string')\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links.split('\"').join('\\\\\"')}\"/>`);\n\t\telse{\n\t\t\ttemp = '';\n\t\t\tfor (var i = 0; i < links.length; i++) {\n\t\t\t\ttemp += `<source src=\"${links[i].split('\"').join('\\\\\"')}\"/>`;\n\t\t\t}\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\n\t\t}\n\n\t\t// Preload data\n\t\tif(self.preload)\n\t\t\telement.load();\n\n\t\telse if(callback)\n\t\t\tcallback();\n\t}\n\n\tvar eventRegistered = {};\n\tfunction eventTrigger(e){\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\n\t\t\teventRegistered[e.type][i](e, self);\n\t\t}\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n\tself.on = function(eventName, callback){\n\t\tvar name = eventName.toLowerCase();\n\t\tif(eventRegistered[name] === undefined){\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\n\t\t\teventRegistered[name] = [];\n\t\t}\n\t\teventRegistered[name].push(callback);\n\t\treturn self;\n\t}\n\n\tself.off = function(eventName, callback){\n\t\tvar name = eventName.toLowerCase();\n\t\tif(eventRegistered[name] === undefined){\n\t\t\telement.removeEventListener(eventName, callback, true);\n\t\t\treturn;\n\t\t}\n\n\t\tif(!callback)\n\t\t\teventRegistered[name].splice(0);\n\t\telse\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\n\n\t\tif(eventRegistered[name].length === 0){\n\t\t\teventRegistered[name] = undefined;\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\n\t\t}\n\t\treturn self;\n\t}\n\n\tself.once = function(eventName, callback){\n\t\telement.addEventListener(eventName, callback, {once:true});\n\t\treturn self;\n\t}\n\n\tself.destroy = function(){\n\t\tfor(var key in eventRegistered){\n\t\t\tself.off(key);\n\t\t}\n\t\tself.playlist.list.splice(0);\n\t\tself.playlist.original.splice(0);\n\t\tfor(var key in self){\n\t\t\tdelete self[key];\n\t\t}\n\t\tself = null;\n\n\t\telement.pause();\n\t\telement.innerHTML = '';\n\t}\n\n\tvar playlistInitialized = false;\n\tfunction internalPlaylistEvent(){\n\t\tif(playlistInitialized) return;\n\t\tplaylistInitialized = true;\n\n\t\tself.on('ended', function(){\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\n\t\t\t\tself.playlist.next(true);\n\t\t\telse if(self.playlist.loop)\n\t\t\t\tself.playlist.play(0);\n\t\t});\n\t}\n\n\tfunction playlistTriggerEvent(name){\n\t\tif(!eventRegistered[name]) return;\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\n\t\t}\n\t}\n\n\tself.playlist = {\n\t\tcurrentIndex:0,\n\t\tlist:[],\n\t\toriginal:[],\n\t\tloop:false,\n\t\tshuffled:false,\n\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\n\t\treload(lists){\n\t\t\tthis.original = lists;\n\t\t\tthis.shuffle(this.shuffled);\n\t\t\tinternalPlaylistEvent();\n\t\t},\n\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\n\t\tadd(obj){\n\t\t\tthis.original.push(obj);\n\t\t\tthis.shuffle(this.shuffled);\n\t\t\tinternalPlaylistEvent();\n\t\t},\n\n\t\t// index from 'original' property\n\t\tremove(index){\n\t\t\tthis.original.splice(index, 1);\n\t\t\tthis.shuffle(this.shuffled);\n\t\t},\n\n\t\tnext(autoplay){\n\t\t\tthis.currentIndex++;\n\t\t\tif(this.currentIndex >= this.list.length){\n\t\t\t\tif(this.loop)\n\t\t\t\t\tthis.currentIndex = 0;\n\t\t\t\telse{\n\t\t\t\t\tthis.currentIndex--;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(autoplay)\n\t\t\t\tthis.play(this.currentIndex);\n\t\t\telse playlistTriggerEvent('playlistchange');\n\t\t},\n\n\t\tprevious(autoplay){\n\t\t\tthis.currentIndex--;\n\t\t\tif(this.currentIndex < 0){\n\t\t\t\tif(this.loop)\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\n\t\t\t\telse{\n\t\t\t\t\tthis.currentIndex++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(autoplay)\n\t\t\t\tthis.play(this.currentIndex);\n\t\t\telse playlistTriggerEvent('playlistchange');\n\t\t},\n\n\t\tplay(index){\n\t\t\tthis.currentIndex = index;\n\t\t\tplaylistTriggerEvent('playlistchange');\n\n\t\t\tvar src = this.list[index].stream;\n\t\t\tif(self.currentSrc === src)\n\t\t\t\tself.play();\n\t\t\telse self.prepare(this.list[index].stream, function(){\n\t\t\t\tself.play();\n\t\t\t});\n\t\t},\n\n\t\tshuffle(set){\n\t\t\tif(set === true){\n\t\t\t    var j, x, i;\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\n\t\t\t        x = this.list[i];\n\t\t\t        this.list[i] = this.list[j];\n\t\t\t        this.list[j] = x;\n\t\t\t    }\n\t\t\t}\n\t\t\telse this.list = this.original.slice(0);\n\n\t\t\tthis.shuffled = set;\n\t\t}\n\t};\n}","// options = mediaDevices.getUserMedia({thisData})\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\nvar ScarletsMediaPresenter = function(options, latency){\n\tvar scope = this;\n\tif(!latency) latency = 1000;\n\n\t// The options are optional\n\t//var options = {\n\t//    mediaStream: new MediaStream(), // For custom media stream\n\t//    element: document.querySelector(...), // Record <audio>, <video>, <canvas>\n\t//    screen: true, // Recording the screen\n\t//\n\t//    audio:{\n\t//        channelCount:1,\n\t//        echoCancellation: false\n\t//    },\n\t//    video:{\n\t//        frameRate:15,\n\t//        width: 1280,\n\t//        height: 720,\n\t//        facingMode: (front ? \"user\" : \"environment\")\n\t//    }\n\t//};\n\n\tscope.debug = false;\n\tscope.mediaStream = false;\n\n\tscope.onRecordingReady = null;\n\tscope.onBufferProcess = null;\n\tscope.onStop = null;\n\n\tscope.mediaRecorder = null;\n\tscope.recordingReady = false;\n\n\tscope.recording = false;\n\tscope.mediaGranted = false;\n\n\tif(options === void 0)\n\t\toptions = {};\n\n\tif(options.element !== void 0)\n\t\toptions.mediaStream = options.element.captureStream();\n\n\tscope.debug = options.debug;\n\n\t// Deprecated\n\tscope.options = options;\n\n\tvar mediaType = options.video ? 'video' : 'audio';\n\n\t// Check supported mimeType and codecs for the recorder\n\tif (options.mimeType && !MediaRecorder.isTypeSupported(options.mimeType)) {\n\t\tconsole.log(\"MediaRecorder doesn't supports mimetype \" + options.mimeType);\n\t\toptions.mimeType = null;\n\t}\n\n\tif(!options.mimeType){\n\t\tvar supportedMimeType = false;\n\t\tvar codecsList = mediaType === 'audio' ? audioCodecs : videoCodecs;\n\n\t\tfor(var format in codecsList){\n\t\t\tvar mimeType = mediaType+'/'+format;\n\t\t\tvar codecs = codecsList[format];\n\n\t\t\tfor (var i = 0; i < codecs.length; i++) {\n\t\t\t\tvar temp = mimeType+';codecs='+codecs[i];\n\t\t\t\tif(MediaRecorder.isTypeSupported(temp) && MediaSource.isTypeSupported(temp)){\n\t\t\t\t\tsupportedMimeType = temp;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(supportedMimeType === false && MediaRecorder.isTypeSupported(mimeType) && MediaSource.isTypeSupported(mimeType))\n\t\t\t\tsupportedMimeType = mimeType;\n\n\t\t\tif(supportedMimeType !== false)\n\t\t\t\tbreak;\n\t\t}\n\t\toptions.mimeType = supportedMimeType;\n\n\t\tif (scope.debug) console.log(\"mimeType: \"+supportedMimeType);\n\t}\n\n\tvar mediaGranted = function(mediaStream) {\n\t\tscope.mediaGranted = true;\n\n\t\t// For adding effect later (if audio available)\n\t\tif(options.audio !== void 0){\n\t\t\tscope.source = ScarletsMedia.audioContext.createMediaStreamSource(mediaStream);\n\t\t\tscope.mediaStream = mediaStream = scope.destination.stream;\n\n\t\t\tif(pendingConnect.length !== 0){\n\t\t\t\tfor (var i = 0; i < pendingConnect.length; i++)\n\t\t\t\t\tscope.source.connect(pendingConnect[i]);\n\n\t\t\t\tfirstSourceConnect = false;\n\t\t\t\tpendingConnect.length = 0;\n\t\t\t}\n\t\t\telse scope.source.connect(scope.destination);\n\t\t}\n\n\t\tscope.bufferHeader = null;\n\t\tvar bufferHeaderLength = false;\n\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, options);\n\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\n\t\tscope.mediaRecorder.onstart = function(e) {\n\t\t\tscope.recording = true;\n\t\t};\n\n\t\tconst isVideo = options.video !== void 0;\n\t\tconst headerLatency = isVideo ? 565 : 100;\n\n\t\tscope.mediaRecorder.ondataavailable = function(e){\n\t\t\t// Stream segments after the header was obtained\n\t\t\tif (bufferHeaderLength !== false){\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return if the recording was stopped\n\t\t\tif(scope.mediaRecorder.state !== 'recording')\n\t\t\t\treturn;\n\n\t\t\tif(e.data.size <= 1) return;\n\n\t\t\t// The audio buffer can contain some duration that causes a noise\n\t\t\t// So we will need to remove it on streamer side\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\n\t\t\tscope.bufferHeader = e.data;\n\n\t\t\tvar predefinedBuffer = getBufferHeader(scope.mediaRecorder.mimeType);\n\t\t\tif(predefinedBuffer !== false)\n\t\t\t\tscope.bufferHeader = predefinedBuffer;\n\n\t\t\tbufferHeaderLength = scope.bufferHeader.size;\n\n\t\t\tif(bufferHeaderLength > 900 || bufferHeaderLength < 100)\n\t\t\t\tconsole.log('%c[WARN] The buffer header length was more than 0.9KB or smaller than 0.1KB. This sometime cause decode error on streamer side. Try to avoid any heavy CPU usage when using the recorder.', \"color:yellow\");\n\n\t\t\tif(scope.onRecordingReady)\n\t\t\t\tscope.onRecordingReady({\n\t\t\t\t\tmimeType:options.mimeType,\n\t\t\t\t\tstartTime:Date.now(),\n\t\t\t\t\thasVideo:isVideo,\n\t\t\t\t\tdata:scope.bufferHeader\n\t\t\t\t});\n\n\t\t\tscope.recordingReady = true;\n\n\t\t\tif(latency === headerLatency) return;\n\n\t\t\t// Record with the custom latency\n\t\t\tscope.mediaRecorder.stop();\n\t\t\tsetTimeout(function(){\n\t\t\t\tscope.mediaRecorder.start(latency);\n\t\t\t}, 10);\n\t\t};\n\n\t\t// Get first header\n\t\tscope.mediaRecorder.start(headerLatency);\n\t}\n\n\tvar pendingConnect = [];\n\n\tscope.source = void 0;\n\tscope.destination = ScarletsMedia.audioContext.createMediaStreamDestination();\n\n\tvar firstSourceConnect = true;\n\tscope.connect = function(node){\n\t\tif(scope.source === void 0){\n\t\t\tpendingConnect.push(node);\n\t\t\treturn;\n\t\t}\n\n\t\tif(firstSourceConnect){\n\t\t\ttry{\n\t\t\t\tscope.source.disconnect(scope.destination);\n\t\t\t}catch(e){}\n\n\t\t\tfirstSourceConnect = false;\n\t\t}\n\n\t\tscope.source.connect(node);\n\t}\n\n\tscope.disconnect = function(node){\n\t\tif(scope.source)\n\t\t\tscope.source.disconnect(node);\n\t\telse{\n\t\t\tvar i = pendingConnect.indexOf(node);\n\t\t\tif(i === -1)\n\t\t\t\treturn;\n\n\t\t\tpendingConnect.splice(i, 1);\n\t\t}\n\t}\n\n\tfunction reAddTracks(mediaStream) {\n\t\tvar streams = mediaStream.getTracks();\n\t\tfor(var i = 0; i < streams.length; i++)\n\t\t\tscope.mediaRecorder.stream.addTrack(streams[i]);\n\n\t\tscope.mediaRecorder.start(latency);\n\t\tscope.recording = true;\n\t}\n\n\tvar afterStop = false;\n\tscope.startRecording = function(){\n\t\tif(afterStop){\n\t\t\tafterStop = false;\n\n\t\t\tif(!options.mediaStream){ // Not custom\n\t\t\t\tif(!scope.options.screen) // Camera / Audio\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(reAddTracks).catch(console.error);\n\t\t\t\telse // Screen\n\t\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(reAddTracks).catch(console.error);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\telse if(scope.mediaGranted === false || scope.mediaRecorder === null){\n\t\t\tscope.recordingReady = false;\n\n\t\t\tif(options.mediaStream) // Custom\n\t\t\t\tmediaGranted(options.mediaStream);\n\t\t\telse if(!scope.options.screen) // Camera / Audio\n\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(mediaGranted).catch(console.error);\n\t\t\telse // Screen\n\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(mediaGranted).catch(console.error);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif(scope.mediaRecorder.state !== 'recording'){\n\t\t\tscope.mediaRecorder.start(latency);\n\t\t\tscope.recording = true;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tscope.stopRecording = function(){\n\t\tif (!scope.recording ||!scope.mediaRecorder) {\n\t\t\treturn;\n\t\t}\n\t\tscope.recording = false;\n\t\tscope.mediaRecorder.stop();\n\n\t\tif(!options.mediaStream){\n\t\t\t// Turn off stream from microphone/camera\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\n\t\t\tfor(var i = 0; i < streams.length; i++){\n\t\t\t\tstreams[i].stop();\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\n\t\t\t}\n\t\t}\n\n\t\t// scope.mediaRecorder.ondataavailable = null;\n\t\t// scope.mediaRecorder.onstart = null;\n\n\t\tscope.bufferHeader = null;\n\n\t\tafterStop = true;\n\n\t\tif (scope.onStop) scope.onStop();\n\t};\n}\n\nScarletsMediaPresenter.isTypeSupported = function(mimeType){\n\tif(!MediaSource.isTypeSupported(mimeType))\n\t\treturn \"MediaSource is not supporting this type\";\n\tif(!MediaRecorder.isTypeSupported(mimeType))\n\t\treturn \"MediaRecorder is not supporting this type\";\n\treturn \"Maybe supported\";\n}\n","ScarletsMediaEffect.chorus = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar dry = context.createGain();\n    var wet = context.createGain();\n    var splitter = context.createChannelSplitter(2);\n    var merger = context.createChannelMerger(2);\n    sourceNode.connect(splitter);\n    sourceNode.connect(dry);\n\n    var channel = [{/* left */}, {/* right */}];\n\n    for (var i = 0; i < channel.length; i++) {\n    \tvar c = channel[i];\n\n    \t// Declaration\n    \tc.stream = context.createGain();\n    \tc.delayVibrato = context.createDelay();\n    \tc.delayFixed = context.createDelay();\n    \tc.feedback = context.createGain();\n    \tc.feedforward = context.createGain();\n    \tc.blend = context.createGain();\n\n    \t// Connection\n\t    splitter.connect(c.stream, i, 0);\n\t    c.stream.connect(c.delayVibrato);\n\t    c.stream.connect(c.delayFixed);\n\t    c.delayVibrato.connect(c.feedforward);\n\t    c.delayVibrato.connect(merger, 0, i);\n\t    c.delayFixed.connect(c.feedback);\n\t    c.feedback.connect(c.stream);\n\t    c.blend.connect(merger, 0, i);\n    }\n\n    // Output\n    merger.connect(wet);\n    dry.connect(output);\n    wet.connect(output);\n\n    // LFO modulation\n    var lfo = context.createOscillator();\n    var LDepth = context.createGain();\n    var RDepth = context.createGain();\n    lfo.connect(LDepth);\n    lfo.connect(RDepth);\n    LDepth.connect(channel[0].delayVibrato.delayTime);\n    RDepth.connect(channel[1].delayVibrato.delayTime);\n    lfo.start(0);\n\n    // Settings\n    lfo.type = 'sine';\n    lfo.frequency.value = 0.15;\n    LDepth.gain.value = 0.013;\n    RDepth.gain.value = -0.017;\n    channel[0].delayFixed.delayTime.value = 0.005;\n    channel[1].delayFixed.delayTime.value = 0.007;\n    channel[0].delayVibrato.delayTime.value = 0.013;\n    channel[1].delayVibrato.delayTime.value = 0.017;\n\n    var options = {rate:0, intensity:0, mix:0};\n\n\tvar ret =  {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\trate: function (value) { // value: 0 ~ 1\n\t\t\tif(value === undefined) return options.rate;\n\t\t\toptions.rate = value;\n\n\t    \tvalue = value * 0.29 + 0.01;\n\t    \tlfo.frequency.value = value;\n\t    },\n\n\t    intensity: function (value) { // value: 0 ~ 1\n\t\t\tif(value === undefined) return options.intensity;\n\t\t\toptions.intensity = value;\n\n\t    \tvar blend = 1.0 - (value * 0.2929);\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\n\t    \tvar feedback = value * 0.7071;\n\n\t    \tfor (var i = 0; i < channel.length; i++) {\n\t\t    \tchannel[i].blend.gain.value = blend;\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\n\t\t    \tchannel[i].feedback.gain.value = feedback;\n\t    \t}\n\t    },\n\n\t    mix: function (value) {\n\t\t\tif(value === undefined) return options.mix;\n\t\t\toptions.mix = value;\n\t\t\t\n\t    \tdry.gain.value = value;\n\t    },\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tlfo.stop(0);\n\t\t\tlfo.disconnect();\n\t\t\t\n\t    \tfor (var i = 0; i < channel.length; i++) {\n\t\t    \tchannel[i].stream.disconnect();\n\t    \t}\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n\t// Initial settings\n    ret.rate(0.5);\n    ret.intensity(0.0);\n    ret.mix(0.75);\n\n\treturn ret;\n};","ScarletsMediaEffect.conReverb = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n    var reverbNode = context.createConvolver();\n\tvar wetGainNode = context.createGain();\n\tvar dryGainNode = context.createGain();\n\n\tsourceNode.connect(dryGainNode);\n\tsourceNode.connect(reverbNode);\n\n    reverbNode.connect(wetGainNode);\n    dryGainNode.connect(output);\n    wetGainNode.connect(output);\n\n    function setBuffer(buffer){\n    \tif(reverbNode.buffer !== null){\n    \t\treverbNode.disconnect();\n    \t\treverbNode = context.createConvolver();\n\n\t\t\tsourceNode.connect(reverbNode);\n\t\t    reverbNode.connect(wetGainNode);\n    \t}\n    \treverbNode.buffer = buffer;\n    }\n\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\t// This must be set\n\t\tsetBuffer:setBuffer,\n\n\t\t// Load audio buffer from url\n\t\tloadBuffer:function(url){\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\n\t\t\tajaxRequest.open('GET', url, true);\n\t\t\tajaxRequest.responseType = 'arraybuffer';\n\n\t\t\tajaxRequest.onload = function(){\n\t\t\t  var audioData = ajaxRequest.response;\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\n\t\t\t      setBuffer(buffer);\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\n\t\t\t}\n\n\t\t\tajaxRequest.send();\n\t\t},\n\n\t\tmix: function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\tdryGainNode.disconnect();\n\t\t\toutput.disconnect();\n\t\t\treverbNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n};","ScarletsMediaEffect.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar filterNode = context.createBiquadFilter();\n\tfilterNode.type = passType || 'lowpass';\n\tfilterNode.frequency.value = 350;\n\tfilterNode.Q.value = 1;\n\tfilterNode.connect(output);\n\tsourceNode.connect(filterNode);\n\t\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\t\t\n\t\ttype: function(value){\n\t\t\tif(value === undefined)\n\t\t\t\treturn filterNode.type;\n\t\t\tfilterNode.type = value;\n\t\t},\n\t\tfrequency: function(value){\n\t\t\tif(value === undefined)\n\t\t\t\treturn filterNode.frequency.value;\n\t\t\tfilterNode.frequency.value = value;\n\t\t},\n\t\twidth: function(value){\n\t\t\tif(value === undefined)\n\t\t\t\treturn filterNode.Q.value;\n\t\t\tfilterNode.Q.value = value;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\tfilterNode.disconnect();\n\t\t\toutput.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n};","ScarletsMediaEffect.delay = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar dryGainNode = context.createGain();\n\tvar wetGainNode = context.createGain();\n\tvar feedbackGainNode = context.createGain();\n\tvar delayNode = context.createDelay();\n\n\tsourceNode.connect(dryGainNode);\n\tdryGainNode.connect(output);\n\n\tdelayNode.connect(feedbackGainNode);\n\tfeedbackGainNode.connect(delayNode);\n\n\tsourceNode.connect(delayNode);\n\tdelayNode.connect(wetGainNode);\n\t\n\twetGainNode.connect(output);\n\t\n\tvar ret = {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tmix:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\t\ttime:function(value){ // value: 0 ~ 180\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\n\t\t\tdelayNode.delayTime.value = value;\n\t\t},\n\t\tfeedback:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\n\t\t\tfeedbackGainNode.gain.value = value;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tdryGainNode.disconnect();\n\t\t\twetGainNode.disconnect();\n\t\t\tfeedbackGainNode.disconnect();\n\t\t\tdelayNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n\tret.mix(0.5);\n\tret.time(0.3);\n\tret.feedback(0.5);\n\n\treturn ret;\n};","ScarletsMediaEffect.distortion = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\tvar deg = 57 * Math.PI / 180;\n\n\tvar waveShaperNode = context.createWaveShaper();\n\twaveShaperNode.connect(output);\n\tsourceNode.connect(waveShaperNode);\n\n\tvar options = {\n\t\tamount:0\n\t};\n\treturn {\n\t\tset:function(amount){ // amount: 0 ~ 1\n\t\t\tif(amount === undefined) return options.amount;\n\t\t\toptions.amount = amount;\n\t\t\t\n\t\t\tamount = amount * 10;\n\t\t    var curve = new Float32Array(context.sampleRate);\n\t\t    var temp = 2 / context.sampleRate;\n\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\n\t\t    \tvar x = i * temp - 1;\n\n\t\t    \t// http://kevincennis.github.io/transfergraph/\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\n\t\t    }\n\n\t\t    waveShaperNode.curve = curve;\n\t\t},\n\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\twaveShaperNode.disconnect();\n\t\t\toutput.disconnect();\n\n\t\t\twaveShaperNode = output = null;\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t}\n\t};\n};","ScarletsMediaEffect.dubDelay = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar dryGainNode = context.createGain();\n\tvar wetGainNode = context.createGain();\n\tvar feedbackGainNode = context.createGain();\n\tvar delayNode = context.createDelay();\n\tvar bqFilterNode = context.createBiquadFilter(); \n\n\tsourceNode.connect(dryGainNode);\n\tdryGainNode.connect(output);\n\n\tsourceNode.connect(wetGainNode);\n\tsourceNode.connect(feedbackGainNode);\n\n\tfeedbackGainNode.connect(bqFilterNode);\n\tbqFilterNode.connect(delayNode);\n\tdelayNode.connect(feedbackGainNode);\n\tdelayNode.connect(wetGainNode);\n\n\twetGainNode.connect(output);\n\t\n\tvar ret = {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\t\t\n\t\tmix:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\t\ttime:function(value){ // value: 0 ~ 180\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\n\t\t\tdelayNode.delayTime.value = value;\n\t\t},\n\t\tfeedback:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\n\t\t\tfeedbackGainNode.gain.value = value;\n\t\t},\n\t\tcutoff:function(value){ // value: 0 ~ 4000\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\n\t\t\tbqFilterNode.frequency.value = value;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tdryGainNode.disconnect();\n\t\t\twetGainNode.disconnect();\n\t\t\tfeedbackGainNode.disconnect();\n\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n\tret.mix(0.5);\n\tret.time(0.7);\n\tret.feedback(0.6);\n\tret.cutoff(700);\n\n\treturn ret;\n};","ScarletsMediaEffect.equalizer = function(frequencies, sourceNode){\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\n\tvar context = ScarletsMedia.audioContext;\n\t\n\tvar output = context.createGain(); // Combine all effect\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar equalizer = {};\n\tvar lastIndex = freq.length - 1;\n\n\tfor (var i = 0; i < freq.length; i++) {\n        var filter = context.createBiquadFilter(); // Frequency pass\n\t\tfilter.gain.value = 0;\n        filter.frequency.value = freq[i];\n\n        if(i === 0) filter.type = 'lowshelf';\n        else if(i === lastIndex) filter.type = 'highshelf';\n        else filter.type = 'peaking';\n\n\t\tif(i !== 0)\n\t    \tequalizer[freq[i - 1]].connect(filter);\n        equalizer[freq[i]] = filter;\n\t}\n\n\tsourceNode.connect(equalizer[freq[0]]);\n\tfilter.connect(output);\n\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\t\t\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\n\t\t\tequalizer[frequency].gain.value = dB;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tfor (var i = 0; i < freq.length; i++) {\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\n\t\t\t}\n\t\t\tequalizer.splice(0);\n\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\tequalizer = output = null;\n\t\t}\n\t};\n};","ScarletsMediaEffect.fade = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\toutput.gain.value = 1;\n\tsourceNode.connect(output);\n\t\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\n\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\n\n\t\t\tif(callback) setTimeout(callback, time * 1000);\n\t\t},\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\n\n\t\t\tvar remainingTime = output.gain.value * value;\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\n\n\t\t\tif(callback) setTimeout(callback, time * 1000);\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n};","ScarletsMediaEffect.flanger = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar inputFeedbackNode = context.createGain();\n\tvar wetGainNode = context.createGain();\n\tvar dryGainNode = context.createGain();\n\tvar delayNode = context.createDelay();\n\tvar oscillatorNode = context.createOscillator();\n\tvar gainNode = context.createGain();\n\tvar feedbackNode = context.createGain();\n\toscillatorNode.type = 'sine';\n\n\tsourceNode.connect(inputFeedbackNode);\n\tsourceNode.connect(dryGainNode);\n\n\tinputFeedbackNode.connect(delayNode);\n\tinputFeedbackNode.connect(wetGainNode);\n\n\tdelayNode.connect(wetGainNode);\n\tdelayNode.connect(feedbackNode);\n\n\tfeedbackNode.connect(inputFeedbackNode);\n\n\toscillatorNode.connect(gainNode);\n\tgainNode.connect(delayNode.delayTime);\n\n\tdryGainNode.connect(output);\n\twetGainNode.connect(output);\n\n\toscillatorNode.start(0);\n\t\n\tvar ret = {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tmix: function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\t\ttime:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\n\t\t},\n\t\tspeed:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\n\t\t},\n\t\tdepth:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\n\t\t},\n\t\tfeedback:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tinputFeedbackNode.disconnect();\n\t\t\tdryGainNode.disconnect();\n\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n\tret.time(0.45);\n\tret.speed(0.2);\n\tret.depth(0.1);\n\tret.feedback(0.1);\n\tret.mix(0.5);\n\n\treturn ret;\n};","ScarletsMediaEffect.harmonizer = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n  \tvar bands = 8;\n\n\t// Cascading 2 filters for sharp resonance.\n    var filters1 = [];\n    var filters2 = [];\n    var gains = [];\n\n    for (var i = 0; i < bands; i++) {\n      filters1[i] = context.createBiquadFilter();\n      filters1[i].type = 'bandpass';\n      filters2[i] = context.createBiquadFilter();\n      filters2[i].type = 'bandpass';\n      sourceNode.connect(filters1[i]);\n\n      gains[i] = context.createGain();\n      gains[i].connect(output);\n      filters1[i].connect(filters2[i]).connect(gains[i]);\n    }\n\n    output.gain.value = 35.0;\n    var options = {\n    \tpitch:0,\n    \tslope:0,\n    \twidth:0\n    };\n\n\tvar ret = {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\t\t\n\t\t// Change frequency of filters\n\t    pitch: function (value) {\n\t\t\tif(value === undefined) return options.pitch;\n\t\t\toptions.pitch = value;\n\t\t\t\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\n\t    \tfor (var i = 0; i < bands; i++) {\n\t    \t\tfilters1[i].frequency.value = f0;\n\t    \t\tfilters2[i].frequency.value = f0;\n\t    \t}\n\t    },\n\n\t    slope: function (value) {\n\t\t\tif(value === undefined) return options.slope;\n\t\t\toptions.slope = value;\n\t\t\t\n\t    \tfor (var i = 0; i < bands; i++) {\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\n\t    \t}\n\t    },\n\n\t    width: function (value) {\n\t\t\tif(value === undefined) return options.width;\n\t\t\toptions.width = value;\n\t\t\t\n\t    \tfor (var i = 1; i < bands; i++) {\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\n\t    \t\tfilters1[i].Q.value = q;\n\t    \t\tfilters2[i].Q.value = q;\n\t    \t}\n\t    },\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\n\t\t    for (var i = 0; i < bands; i++) {\n\t\t        filters1[i].disconnect();\n\t\t  \t}\n\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n    ret.pitch(34);\n    ret.slope(0.65);\n    ret.width(0.15);\n\n\treturn ret;\n\n\t// sample\n\t// noise x0.25 -> harmonizer -> reverb x0.85\n};","ScarletsMediaEffect.noise = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar length = Math.floor(context.sampleRate * 9.73);\n\tvar noiseFloat32 = new Float32Array(length);\n\n\tfor (var i = 0; i < length; i++) {\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\n\t}\n\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\n\n    var src = context.createBufferSource();\n    src.to(output);\n    src.loop = true;\n    src.start(0);\n    src.buffer = noiseBuffer;\n    src.loopStart = Math.random() * 9.73;\n\t\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tsrc.loop = false;\n\t\t\tsrc.buffer = null;\n    \t\tsrc.stop(0);\n\t\t\tsrc.disconnect();\n\t\t\tsrc = null;\n\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n};\n","ScarletsMediaEffect.pingPongDelay = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\tvar mix = 0;\n\n\tvar delayNodeLeft = context.createDelay();\n\tvar delayNodeRight = context.createDelay();\n\tvar dryGainNode = context.createGain();\n\tvar wetGainNode = context.createGain();\n\tvar feedbackGainNode = context.createGain();\n\tvar channelMerger = context.createChannelMerger(2);\n\n\tsourceNode.connect(dryGainNode);\n\tdryGainNode.connect(output);\n\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\n\tdelayNodeRight.connect(channelMerger, 0, 1);\n\tdelayNodeLeft.connect(delayNodeRight);\n\n\tfeedbackGainNode.connect(delayNodeLeft);\n\tdelayNodeRight.connect(feedbackGainNode);\n\n\tsourceNode.connect(feedbackGainNode);\n\n\tchannelMerger.connect(wetGainNode);\n\twetGainNode.connect(output);\n\t\n\tvar ret = {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tmix: function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\t\ttime:function(value){ // value: 0 ~ 180\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\n\t\t\tdelayNodeLeft.delayTime.value = value;\n\t\t\tdelayNodeRight.delayTime.value = value;\n\t\t},\n\t\tfeedback:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\n\t\t\tfeedbackGainNode.gain.value = value;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tdryGainNode.disconnect();\n\t\t\tfeedbackGainNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n\tret.mix(0.5);\n\tret.time(0.3);\n\tret.feedback(0.5);\n\n\treturn ret;\n};","ScarletsMediaEffect.pitchShift = function(sourceNode){\n    var context = ScarletsMedia.audioContext;\n    var output = context.createGain();\n    var input = sourceNode === undefined ? context.createGain() : null;\n    if(input) sourceNode = input;\n\n    var bufferTime = 0.100;\n    var fadeTime = bufferTime / 2;\n    var bufferRate = bufferTime * context.sampleRate;\n\n    // Delay amount for changing pitch.\n    var modulateGain1 = context.createGain();\n    var modulateGain2 = context.createGain();\n\n    var delayNode1 = context.createDelay();\n    var delayNode2 = context.createDelay();\n    modulateGain1.connect(delayNode1.delayTime);\n    modulateGain2.connect(delayNode2.delayTime);\n\n    sourceNode.connect(delayNode1);\n    sourceNode.connect(delayNode2);\n\n    var fTime = context.currentTime + fadeTime;\n    var bTime = context.currentTime + bufferTime;\n\n    function createPitchBuffer(shiftUp){\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\n        var pitch = buffer.getChannelData(0);\n        \n        // Buffer pitch shift\n        for (var i = 0; i < bufferRate; i++) {\n            if(shiftUp)\n              pitch[i] = (bufferRate - i) / bufferRate;\n            else\n              pitch[i] = i / bufferRate;\n        }\n\n        return buffer;\n    }\n    \n    // Delay modulation.\n    var bufferSource = [0,0,0,0];\n    var bufferGain = [0,0,0,0];\n    for (var i = 0; i < bufferSource.length; i++) {\n        bufferSource[i] = context.createBufferSource();\n        bufferSource[i].loop = true;\n\n        bufferGain[i] = context.createGain();\n\n        if(i < 2)\n            bufferSource[i].buffer = createPitchBuffer(false);\n        else {\n            bufferSource[i].buffer = createPitchBuffer(true);\n            bufferGain[i].gain.value = 0;\n        }\n\n        if(i % 2){ // Odd\n            bufferGain[i].connect(modulateGain2);\n\t    \tbufferSource[i].start(bTime);\n        }\n        else { // Even\n            bufferGain[i].connect(modulateGain1);\n\t    \tbufferSource[i].start(fTime);\n        }\n\n        bufferSource[i].connect(bufferGain[i]);\n    }\n\n    function createPitchFadeBuffer(){\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\n        var pitch = buffer.getChannelData(0);\n            \n        var fadeLength = fadeTime * context.sampleRate;\n        var bufferLeft = bufferRate - fadeLength;\n        \n        // Buffer pitch shift\n        for (var i = 0; i < bufferRate; i++) {\n            if (i < fadeLength)\n                pitch[i] = Math.sqrt(i / fadeLength);\n            else\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\n        }\n\n        return buffer;\n    }\n\n    var fadeBuffer = createPitchFadeBuffer();\n\n    // Delay modulation.\n    var fadeNode = [0,0];\n    var mixNode = [0,0];\n    for (var i = 0; i < fadeNode.length; i++) {\n        fadeNode[i] = context.createBufferSource();\n        fadeNode[i].loop = true;\n        fadeNode[i].buffer = fadeBuffer;\n\n        mixNode[i] = context.createGain();\n    \tmixNode[i].gain.value = 0;\n        fadeNode[i].connect(mixNode[i].gain);\n\n        if(i % 2){ // Odd\n            bufferGain[i].connect(modulateGain2);\n\t    \tfadeNode[i].start(bTime);\n        }\n        else { // Even\n            bufferGain[i].connect(modulateGain1);\n\t    \tfadeNode[i].start(fTime);\n        }\n\n        mixNode[i].connect(output);\n    }\n    \n    delayNode1.connect(mixNode[0]);\n    delayNode2.connect(mixNode[1]);\n\n    function pitchGain(value){\n\t    modulateGain1.gain.value = \n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\n    }\n\n    var ret = {\n        // Connect to output\n        // output.connect(context.destination);\n        output:output,\n        input:input,\n\n        // pitchNode:[modulateGain1, modulateGain2],\n\n        shift:function(value){ // -3 ~ 3\n            if(value === undefined) return;\n\n            var pitchUp = value > 0;\n\t\t    bufferGain[0].gain.value = \n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\n\t\t    bufferGain[2].gain.value = \n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\n\n\t\t    pitchGain(value);\n        },\n\n        // This should be executed to clean memory\n        destroy:function(){\n            if(input) input.disconnect();\n            output.disconnect();\n\n            for (var i = 0; i < fadeNode.length; i++) {\n            \tfadeNode[i].stop();\n            \tfadeNode[i].disconnect();\n            \tmixNode[i].disconnect();\n            }\n\n            for (var i = 0; i < bufferSource.length; i++) {\n            \tbufferSource[i].stop();\n            \tbufferSource[i].disconnect();\n            \tbufferGain[i].disconnect();\n            }\n\n            modulateGain1.disconnect();\n\t\t\tmodulateGain2.disconnect();\n\t\t\tdelayNode1.disconnect();\n\t\t\tdelayNode2.disconnect();\n            \n            for(var key in this){\n                delete this[key];\n            }\n            output = null;\n        }\n    };\n\n    pitchGain(0);\n    return ret;\n}","ScarletsMediaEffect.reverb = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\t\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar reverbNode = context.createConvolver();\n\tvar wetGainNode = context.createGain();\n\tvar dryGainNode = context.createGain();\n\t\n\tsourceNode.connect(dryGainNode);\n\tdryGainNode.connect(output);\n\twetGainNode.connect(output);\n\n\tvar time = 1,\n\t\tdecay = 0.1,\n\t\treverse = false;\n\n\tfunction rebuildImpulse(){\n\t\tvar length = context.sampleRate * time;\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\n\t\tvar impulseL = impulse.getChannelData(0);\n\t\tvar impulseR = impulse.getChannelData(1);\n\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tvar n = reverse ? length - i : i;\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n\t\t}\n\n\t    reverbNode.disconnect();\n\n\t    reverbNode = context.createConvolver();\n\t    sourceNode.connect(reverbNode);\n\t    reverbNode.connect(wetGainNode);\n\n\t\treverbNode.buffer = impulse;\n\t}\n\trebuildImpulse();\n\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tmix: function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\n\t\ttime: function(value){ // value: 0 ~ 3\n\t\t\tif(value === undefined) return time;\n\t\t\ttime = value;\n\t\t\trebuildImpulse();\n\t\t},\n\n\t\tdecay: function(value){// value: 0 ~ 3\n\t\t\tif(value === undefined) return decay;\n\t\t\tdecay = value;\n\t\t\trebuildImpulse();\n\t\t},\n\n\t\treverse: function(value){ // value: bool\n\t\t\tif(value === undefined) return reverse;\n\t\t\treverse = value;\n\t\t\trebuildImpulse();\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\tdryGainNode.disconnect();\n\t\t\toutput.disconnect();\n\t\t\treverbNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n};","ScarletsMediaEffect.stereoPanner = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar stereoSupport = false;\n\tif(context.createStereoPanner){\n\t\tvar pannerNode = context.createStereoPanner();\n\t\tstereoSupport = true;\n\t}\n\telse {\n\t\tvar pannerNode = context.createPanner();\n\t\tpannerNode.type = 'equalpower';\n\t}\n\n\tsourceNode.connect(pannerNode);\n\tpannerNode.connect(output);\n\tpannerNode.pan.value = 0;\n\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tset:function(pan){ // pan: -1 ~ 1\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\n\t\t\tif(stereoSupport)\n\t\t\t\tpannerNode.pan.value = pan;\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tpannerNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = pannerNode = null;\n\t\t}\n\t};\n};","ScarletsMediaEffect.tremolo = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tvar dryGainNode = context.createGain();\n\tvar wetGainNode = context.createGain();\n\n\tvar tremoloGainNode = context.createGain();\n\ttremoloGainNode.gain.value = 0;\n\n\tvar shaperNode = context.createWaveShaper();\n\tshaperNode.curve = new Float32Array([0, 1]);\n\tshaperNode.connect(tremoloGainNode.gain);\n\n\tsourceNode.connect(dryGainNode);\n\tdryGainNode.connect(output);\n\n\tvar lfoNode = context.createOscillator();\n\tlfoNode.connect(shaperNode);\n\tlfoNode.type = 'sine';\n\tlfoNode.start(0);\n\n\tsourceNode.connect(tremoloGainNode);\n\ttremoloGainNode.connect(wetGainNode);\n\twetGainNode.connect(output);\n\n\tvar ret = {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\n\t\tmix: function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\t\tspeed:function(value){\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\n\t\t},\n\t\tdepth:function(value){\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\t\t\tdryGainNode.disconnect();\n\t\t\ttremoloGainNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n\n\tret.speed(0.2);\n\tret.depth(1);\n\tret.mix(0.8);\n\n\treturn ret;\n};","ScarletsMediaEffect.vibrato = function(sourceNode){\n\tvar context = ScarletsMedia.audioContext;\n\tvar output = context.createGain();\n\tvar input = sourceNode === undefined ? context.createGain() : null;\n\tif(input) sourceNode = input;\n\n\tconsole.log(\"Vibrato was not finished yet\");\n\n    var delayNode = context.createDelay();\n\tvar wetGainNode = context.createGain();\n\tvar dryGainNode = context.createGain();\n    var lfoNode = context.createOscillator();\n    //var depthNode = context.createGain();\n\n\tsourceNode.connect(dryGainNode);\n\tdryGainNode.connect(output);\n\twetGainNode.connect(output);\n\n    delayNode.delayTime.value = 1;\n    //depthNode.gain.value = 1;\n    lfoNode.frequency.value = 3;\n    lfoNode.type = 'sine';\n    lfoNode.start(0);\n\n    lfoNode.connect(delayNode.delayTime);\n    //depthNode.connect(delayNode.delayTime);\n    sourceNode.connect(delayNode);\n    delayNode.connect(wetGainNode);\n\n\treturn {\n\t\t// Connect to output\n\t\t// output.connect(context.destination);\n\t\toutput:output,\n\t\tinput:input,\n\t\t\n\t\tmix:function(value){ // value: 0 ~ 1\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\n\t\t\tdryGainNode.gain.value = 1 - value;\n\t\t\twetGainNode.gain.value = value;\n\t\t},\n\t\t\n\t\tdelay:function(value){\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\n\t\t\tdelayNode.delayTime.value = value;\n\t\t},\n\t\t\n\t\tdepth:function(value){\n\t\t\tif(value === undefined) return depthNode.gain.value;\n\t\t\tdepthNode.gain.value = value;\n\t\t},\n\t\t\n\t\tspeed:function(value){\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\n\t\t\tlfoNode.frequency.value = value;\n\t\t},\n\n\t\t// This should be executed to clean memory\n\t\tdestroy:function(){\n\t\t\tif(input) input.disconnect();\n\t\t\toutput.disconnect();\n\n    \t\tsourceNode.disconnect(delayNode);\n    \t\tsourceNode.disconnect(dryGainNode);\n\n\t\t\tlfoNode.stop();\n\t\t\tlfoNode.disconnect();\n\t\t\tdepthNode.disconnect();\n\t\t\t\n\t\t\tfor(var key in this){\n\t\t\t\tdelete this[key];\n\t\t\t}\n\t\t\toutput = null;\n\t\t}\n\t};\n};","// Minimum 3 bufferElement\nvar ScarletsVideoStreamer = function(videoElement, chunksDuration){\n\tif(!chunksDuration) chunksDuration = 1000;\n\tvar chunksSeconds = chunksDuration/1000;\n\n\tvar scope = this;\n\n\tscope.debug = false;\n\tscope.playing = false;\n\tscope.latency = 0;\n\tscope.mimeType = null;\n\n\tscope.audioContext = ScarletsMedia.audioContext;\n\tscope.outputNode = false; // Set this to a connectable Audio Node\n\n\t// If the outputNode is not set, then the audio will be outputted directly\n\tvar directAudioOutput = true;\n\n\tvar mediaBuffer = false;\n\tvar audioNode = scope.audioContext.createMediaElementSource(videoElement);\n\n\tvideoElement.addEventListener('error', function(e){\n\t\tconsole.error(e.target.error);\n\t});\n\n\tscope.audioConnect = function(node){\n\t\tif(directAudioOutput === true){\n\t\t\tdirectAudioOutput = false;\n\t\t\taudioNode.disconnect();\n\t\t}\n\n\t\tscope.outputNode = scope.audioContext.createGain();\n\t\tscope.outputNode.connect(node);\n\t\taudioNode.connect(node);\n\t}\n\n\tscope.audioDisconnect = function(){\n\t\toutputNode.disconnect();\n\t\tdirectAudioOutput = true;\n\n\t\taudioNode.disconnect();\n\t\taudioNode.connect(scope.audioContext.destination);\n\t}\n\n\tscope.stop = function(){\n\t\tmediaBuffer.stop();\n\t\tscope.playing = false;\n\t\tscope.buffering = false;\n\t}\n\n\tscope.setBufferHeader = function(packet){\n\t\tif(!packet || !packet.data)\n\t\t\treturn;\n\n\t\tvar arrayBuffer = packet.data;\n\t\tscope.mimeType = packet.mimeType;\n\n\t\tif(mediaBuffer !== false)\n\t\t\tmediaBuffer.stop();\n\t\telse audioNode.connect(scope.audioContext.destination);\n\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\n\n\t\tvideoElement.src = scope.objectURL = mediaBuffer.objectURL;\n\t}\n\n\tscope.playStream = function(){\n\t\tscope.playing = true;\n\t}\n\n\tscope.receiveBuffer = function(packet){\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\n\n\t\tvar arrayBuffer = packet[0];\n\t\tvar streamingTime = packet[1];\n\n\t\tmediaBuffer.append(arrayBuffer);\n\n\t\tif(videoElement.paused)\n\t\t\tvideoElement.play();\n\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) + scope.audioContext.baseLatency + chunksSeconds;\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\n\t}\n}\n","ScarletsMedia.extra = new function(){\n\tvar self = this;\n\tself.isMobile = function(){\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\n\t}\n\n\tself.objectPropertyLinker = function(self, target, property){\n\t\tObject.defineProperty(self, property, {\n\t\t  get: function(){ return target[property]; },\n\t\t  set: function(value){ target[property] = value; },\n\t\t  enumerable: true,\n\t\t  configurable: true\n\t\t});\n\t}\n\n\tself.normalize = function(value, min, max){\n\t\treturn ((max - min) * value) + min;\n\t}\n\n\tself.denormalize = function(value, min, max){\n\t\treturn (value - min) / (max - min);\n\t}\n\n\tvar maxFade = 0;\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\n\t\tmaxFade = 0;\n\t\tvar current = from;\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\n\t\tif(!interval || interval == Infinity){\n\t\t\tsetTimeout(function(){\n\t\t\t\tif(onIncrease) onIncrease(to);\n\t\t\t\tif(onFinish) onFinish();\n\t\t\t}, fadeTime);\n\t\t\treturn;\n\t\t}\n\n\t\tvar timer = setInterval(function(){\n\t\t\tif(maxFade>=100) clearInterval(timer);\n\t\t\tmaxFade++;\n\t\t\n\t\t\tcurrent = (current+increment)*1000;\n\t\t\tcurrent = Math.ceil(current)/1000;\n\t\t\n\t\t\t//Increasing and current is more than target\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\n\t\t\t\t||\n\t\t\t//Decreasing and current is lower than target\n\t\t\t(increment <= 0 && (current <= to || from <= to))\n\t\t\t\t||\n\t\t\t//Infinity or Zero number\n\t\t\t(current == Infinity || !current))\n\t\t\t{\n\t\t\t\tclearInterval(timer);\n\t\t\t\tonIncrease(to);\n\t\t\t\tif(onFinish) onFinish();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif(onIncrease) onIncrease(current); \n\t\t}, interval);\n\t}\n\n\t// ===== Precise Timer =====\n\t// \n\tvar timeout = [];\n\tvar timeoutIncrement = 0;\n\tself.preciseTimeout = function(func, miliseconds){\n\t\tvar now = Date.now();\n\t\ttimeoutIncrement++;\n\t\ttimeout.push({\n\t\t\tid:timeoutIncrement,\n\t\t\twhen:now+miliseconds,\n\t\t\tfunc:func,\n\n\t\t\t// When browser loss focus\n\t\t\tfallback:setTimeout(function(){\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\n\t\t\t}, miliseconds)\n\t\t});\n\t\tstartPreciseTime();\n\t\treturn timeoutIncrement;\n\t}\n\tself.clearPreciseTimeout = function(id){\n\t\tclearPreciseTimer(id, timeout);\n\t}\n\n\tvar interval = [];\n\tvar intervalIncrement = 0;\n\tself.preciseInterval = function(func, miliseconds){\n\t\tvar now = Date.now();\n\t\tintervalIncrement++;\n\t\tvar temp = {\n\t\t\tid:intervalIncrement,\n\t\t\tinterval:miliseconds,\n\t\t\twhen:now+miliseconds,\n\t\t\tfunc:func\n\t\t};\n\n\t\t// When browser loss focus\n\t\ttemp.fallback = setInterval(function(){\n\t\t\tif(temp.when >= Date.now())\n\t\t\t\treturn; // Avoid multiple call\n\n\t\t\ttemp.when += temp.interval;\n\t\t\ttemp.func();\n\t\t}, miliseconds);\n\n\t\tinterval.push(temp);\n\t\tstartPreciseTime();\n\t\treturn intervalIncrement;\n\t}\n\tself.clearPreciseInterval = function(id){\n\t\tvar temp = clearPreciseTimer(id, interval);\n\t\tclearInterval(temp.fallback);\n\t}\n\n\tfunction clearPreciseTimer(id, list){\n\t\tfor (var i in list) {\n\t\t\tif(list[i].id === id)\n\t\t\t\treturn list.splice(i, 1);\n\t\t}\n\t}\n\n\tvar preciseTimerStarted = false;\n\tfunction startPreciseTime(){\n\t\tif(preciseTimerStarted) return;\n\t\tpreciseTimerStarted = true;\n\n\t\tvar preciseTimer = function(){\n\t\t\tif(timeout.length === 0 && interval.length === 0){\n\t\t\t\tpreciseTimerStarted = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trequestAnimationFrame(preciseTimer);\n\t\t\t\n\t\t\tvar currentTime = Date.now();\n\t\t\tfor (var i in timeout) {\n\t\t\t\tif(timeout[i].when < currentTime){\n\t\t\t\t\ttimeout[i].func();\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\n\t\t\t\t\ttimeout.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i in interval) {\n\t\t\t\tif(interval[i].when < currentTime){\n\t\t\t\t\tinterval[i].func();\n\t\t\t\t\tinterval[i].when += interval[i].interval;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\trequestAnimationFrame(preciseTimer);\n\t}\n};\n\nif(moduleMode){\n\tglobal.Media = ScarletsMedia;\n\tglobal.MediaEffect = ScarletsMediaEffect;\n\tglobal.AudioStreamer = ScarletsAudioStreamer;\n\tglobal.VideoStreamer = ScarletsVideoStreamer;\n\tglobal.MediaPlayer = ScarletsMediaPlayer;\n\tglobal.MediaPresenter = ScarletsMediaPresenter;\n}\nelse{\n\tglobal.ScarletsMedia = ScarletsMedia;\n\tglobal.ScarletsMediaEffect = ScarletsMediaEffect;\n\tglobal.ScarletsAudioStreamer = ScarletsAudioStreamer;\n\tglobal.ScarletsVideoStreamer = ScarletsVideoStreamer;\n\tglobal.ScarletsMediaPlayer = ScarletsMediaPlayer;\n\tglobal.ScarletsMediaPresenter = ScarletsMediaPresenter;\n}\n\n// ===== Module End =====\n})));"]}