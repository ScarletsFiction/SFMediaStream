{"version":3,"sources":["a_init.js","AudioStreamer.js","Convert.js","MediaBuffer.js","MediaPlayer.js","MediaPresenter.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js","VideoStreamer.js","z_extra.js"],"names":["global","factory","exports","module","window","this","moduleMode","ScarletsMedia","audioContext","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","ScarletsMediaEffect","audioCodecs","webm","mp4","ogg","videoCodecs","3gpp","AudioContext","console","error","mobileMediaUnlock","e","emptyBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","onended","disconnect","removeListener","start","noteOn","resume","document","removeEventListener","addEventListener","ScarletsAudioStreamer","chunksDuration","chunksSeconds","scope","debug","playing","latency","mimeType","bufferElement","outputNode","directAudioOutput","bufferHeader","mediaBuffer","audioElement","Audio","audioNode","node","createGain","stop","buffering","setBufferHeader","packet","data","arrayBuffer","MediaBuffer","Uint8Array","src","objectURL","decodeAudioData","slice","audioBuffer","noiseLength","getChannelData","length","webAudioBufferInsert","index","temp","frameCount","channelLength","numberOfChannels","newBuffer","sampleRate","i","set","subarray","cleanNoise","context","playStream","bufferElementIndex","realtimeBufferPlay","log","byteLength","Number","String","Date","now","baseLatency","finalBuffer","addBufferHeader","receiveBuffer","append","paused","play","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","MediaSource","URL","createObjectURL","removing","totalTime","removeCount","sourceBuffer","onsourceopen","addSourceBuffer","mode","appendBuffer","onupdateend","remove","onerror","buffered","updating","abort","readyState","endOfStream","ScarletsMediaPlayer","element","self","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","load","canPlayType","extra","objectPropertyLinker","preload","crossorigin","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","successCallback","errorCallback","then","catch","fadeNumber","num","pause","callback","prepare","links","force","querySelectorAll","once","off","insertAdjacentHTML","split","join","eventRegistered","eventTrigger","type","on","eventName","name","push","splice","indexOf","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","options","mediaStream","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","mediaType","video","supportedMimeType","codecsList","format","codecs","MediaRecorder","isTypeSupported","bufferHeaderLength","onstart","ondataavailable","state","size","startTime","streamingTime","startRecording","navigator","mediaDevices","getUserMedia","stopRecording","streams","getTracks","removeTrack","chorus","sourceNode","output","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","value","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","abs","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","currentTime","remainingTime","setTargetAtTime","setTimeout","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","denormalize","normalize","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","to","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","fadeTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","shift","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode","ScarletsVideoStreamer","videoElement","audioConnect","audioDisconnect","isMobile","test","userAgent","target","property","configurable","min","max","maxFade","from","increment","onIncrease","onFinish","current","interval","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseInterval","clearPreciseInterval","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","Media","MediaEffect","AudioStreamer","VideoStreamer","MediaPlayer","MediaPresenter"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n(function(global, factory){\r\n  if(typeof exports === 'object' && typeof module !== 'undefined'){\r\n  \tmodule.exports = {};\r\n  \tfactory(module.exports, window, true);\r\n  }\r\n  else factory(global, window);\r\n}(this || window, (function(global, window, moduleMode){'use strict';\r\n// ===== Module Init =====\r\n\r\n// Initialize global data\r\nvar ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nvar ScarletsMediaEffect = {};\r\nvar audioCodecs = {\r\n\twebm:['opus', 'vorbis'],\r\n\tmp4:['mp4a.67', 'mp4a.40.29', 'mp4a.40.5', 'mp4a.40.2', 'mp3'],\r\n\togg:['opus', 'vorbis'], // This may not work on mobile\r\n};\r\nvar videoCodecs = {\r\n\twebm:['vp8,opus', 'vp8,vorbis'],\r\n\tmp4:['mp4v.20.8,mp4a.40.2', 'mp4v.20.240,mp4a.40.2', 'avc1.42E01E,mp4a.40.2', 'avc1.58A01E,mp4a.40.2', 'avc1.64001E,mp4a.40.2'],\r\n\t'3gpp':['mp4v.20.8,samr'],\r\n\togg:['dirac,vorbis', 'theora,vorbis'], // This may not work on mobile\r\n};\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tif(!window.AudioContext) return console.error(\"`AudioContext` was not available\");\r\n\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","// Minimum 3 bufferElement\r\nvar ScarletsAudioStreamer = function(chunksDuration){\r\n\tvar bufferElement = 3;\r\n\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\tscope.bufferElement = [];\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar bufferHeader = false;\r\n\tvar mediaBuffer = false;\r\n\r\n\tvar audioElement = new Audio();\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(audioElement);\r\n\r\n\tscope.connect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(){\r\n\t\toutputNode.disconnect();\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect();\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet.data){\r\n\t\t\tbufferHeader = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\r\n\r\n\t\taudioElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\r\n\t\t// Get buffer noise length\r\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t// headerDuration = audioBuffer.duration;\r\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\r\n\t\t});\r\n\t}\r\n\r\n\t// ===== For handling WebAudio =====\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tvar noiseLength = 0;\r\n\tfunction cleanNoise(buffer){\r\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\r\n\t\tif(frameCount === 0) return false;\r\n\r\n  \t\tvar channelLength = buffer.numberOfChannels;\r\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\r\n\r\n\t\tfor (var i = 0; i < channelLength; i++) {\r\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\r\n\t    }\r\n\r\n\t    return newBuffer;\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tbuffer = cleanNoise(buffer);\r\n\r\n\t\tif(buffer === false) return false;\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context && directAudioOutput === false)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ===== Realtime Playing =====\r\n\t// Play audio immediately after received\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tvar bufferElementIndex = 0;\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.playing === false) return;\r\n\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(arrayBuffer[0].byteLength === 0) return;\r\n\t\tarrayBuffer = arrayBuffer[0];\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) + chunksSeconds + scope.audioContext.baseLatency;\r\n\r\n\t\tvar index = bufferElementIndex;\r\n\t\tbufferElementIndex++;\r\n\t\tif(bufferElementIndex > 2)\r\n\t\t\tbufferElementIndex = 0;\r\n\r\n\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\r\n\t\t\tif(webAudioBufferInsert(index, buffer) === false)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tscope.bufferElement[index].start(0);\r\n\t\t});\r\n\t}\r\n\r\n\t// ====== Synchronous Playing ======\r\n\t// Play next audio when last audio was finished\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tmediaBuffer.append(arrayBuffer[0]);\r\n\r\n\t\tif(audioElement.paused)\r\n\t\t\taudioElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +  scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","var MediaBuffer = function(mimeType, chunksDuration, bufferHeader){\r\n\tvar scope = this;\r\n\tscope.source = new MediaSource();\r\n\tscope.objectURL = URL.createObjectURL(scope.source);\r\n\r\n\tvar removing = false;\r\n\tvar totalTime = 0;\r\n\tvar removeCount = 10;\r\n\r\n\tvar sourceBuffer = null;\r\n\tscope.source.onsourceopen = function(){\r\n\t\tsourceBuffer = scope.source.addSourceBuffer(mimeType);\r\n\t\tsourceBuffer.mode = 'sequence';\r\n\t\tsourceBuffer.appendBuffer(bufferHeader);\r\n\r\n\t\tsourceBuffer.onupdateend = function(){\r\n\t\t\tif(removing === false) return;\r\n\r\n\t\t\tremoving = false;\r\n\t\t\ttotalTime = 0;\r\n\t\t\tsourceBuffer.remove(0, removeCount);\r\n\t\t\tremoveCount = 20;\r\n\t\t};\r\n\t\tsourceBuffer.onerror = console.error;\r\n\t};\r\n\r\n\tscope.source.onerror = console.error;\r\n\r\n\tscope.append = function(arrayBuffer){\r\n\t\tif(sourceBuffer === null)\r\n\t\t\treturn false;\r\n\r\n\t\tif(sourceBuffer.buffered.length === 2)\r\n\t\t\tconsole.log('something wrong');\r\n\r\n\t\tsourceBuffer.appendBuffer(arrayBuffer);\r\n\t\ttotalTime += chunksDuration;\r\n\t\t// console.log(totalTime, arrayBuffer);\r\n\r\n\t\tif(totalTime >= 20000)\r\n\t\t\tremoving = true;\r\n\r\n\t\treturn totalTime/1000;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tif(sourceBuffer.updating)\r\n\t\t\tsourceBuffer.abort();\r\n\r\n\t\tif(scope.source.readyState === \"open\")\r\n\t\t\tscope.source.endOfStream();\r\n\t}\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nvar ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\telement.crossorigin = 'anonymous';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tfunction play(successCallback, errorCallback){\r\n\t\telement.play().then(function(){\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t}).catch(function(e){\r\n\t\t\tif(errorCallback) errorCallback(e);\r\n\t\t\telse console.error(e);\r\n\t\t});\r\n\t}\r\n\r\n\tself.play = function(successCallback, errorCallback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\tplay(successCallback, errorCallback);\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, successCallback);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tplay(successCallback, errorCallback);\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(self.preload && callback){\r\n\t\t\tself.once('canplay', callback);\r\n\t\t\tself.once('error', function(){\r\n\t\t\t\tself.off('canplay', callback);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links.split('\"').join('\\\\\"')}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i].split('\"').join('\\\\\"')}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload)\r\n\t\t\telement.load();\r\n\r\n\t\telse if(callback)\r\n\t\t\tcallback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.removeEventListener(eventName, callback, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// options = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nvar ScarletsMediaPresenter = function(options, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var options = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front ? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\tscope.mediaStream = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\tscope.mediaGranted = false;\r\n\r\n\tif(options === void 0)\r\n\t\toptions = {};\r\n\r\n\tscope.debug = options.debug;\r\n\r\n\t// Deprecated\r\n\tscope.options = options;\r\n\r\n\tvar mediaType = options.video ? 'video' : 'audio';\r\n\r\n\t// Check supported mimeType and codecs for the recorder\r\n\tif(!options.mimeType){\r\n\t\tvar supportedMimeType = false;\r\n\t\tvar codecsList = mediaType === 'audio' ? audioCodecs : videoCodecs;\r\n\r\n\t\tfor(var format in codecsList){\r\n\t\t\tvar mimeType = mediaType+'/'+format;\r\n\t\t\tvar codecs = codecsList[format];\r\n\r\n\t\t\tfor (var i = 0; i < codecs.length; i++) {\r\n\t\t\t\tvar temp = mimeType+';codecs=\"'+codecs[i]+'\"';\r\n\t\t\t\tif(MediaRecorder.isTypeSupported(temp) && MediaSource.isTypeSupported(temp)){\r\n\t\t\t\t\tsupportedMimeType = temp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(supportedMimeType === false && MediaRecorder.isTypeSupported(mimeType) && MediaSource.isTypeSupported(mimeType))\r\n\t\t\t\tsupportedMimeType = mimeType;\r\n\r\n\t\t\tif(supportedMimeType !== false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toptions.mimeType = supportedMimeType;\r\n\t\tconsole.log(\"mimeType: \"+supportedMimeType);\r\n\t}\r\n\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\t\tscope.mediaStream = mediaStream;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e){\r\n\t\t\t// Stream segments after the header was obtained\r\n\t\t\tif(bufferHeaderLength !== false){\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Return if the recording was stopped\r\n\t\t\tif(scope.mediaRecorder.state !== 'recording')\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(e.data.size <= 1) return;\r\n\r\n\t\t\t// The audio buffer can contain some duration that causes a noise\r\n\t\t\t// So we will need to remove it on streamer side\r\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\r\n\t\t\tscope.bufferHeader = e.data;\r\n\t\t\tbufferHeaderLength = e.data.size;\r\n\r\n\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\tscope.onRecordingReady({\r\n\t\t\t\t\tmimeType:options.mimeType,\r\n\t\t\t\t\tstartTime:Date.now(),\r\n\t\t\t\t\tdata:scope.bufferHeader\r\n\t\t\t\t});\r\n\t\t\tscope.recordingReady = true;\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start(latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(scope.mediaGranted === false || scope.mediaRecorder === null){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(options)\r\n\t\t\t\t.then(mediaGranted).catch(console.error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if(scope.mediaRecorder.state === 'recording')\r\n\t\t\treturn true;\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start(latency);\r\n\t\t\tscope.recording = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMediaEffect.chorus = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.conReverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.delay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.distortion = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.dubDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.fade = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.flanger = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.harmonizer = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMediaEffect.noise = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};\r\n","ScarletsMediaEffect.pingPongDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.pitchShift = function(sourceNode){\r\n    var context = ScarletsMedia.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMediaEffect.reverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.stereoPanner = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.tremolo = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.vibrato = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","// Minimum 3 bufferElement\r\nvar ScarletsVideoStreamer = function(videoElement, chunksDuration){\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar mediaBuffer = false;\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(videoElement);\r\n\r\n\tscope.audioConnect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.audioDisconnect = function(){\r\n\t\toutputNode.disconnect();\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect();\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet || !packet.data)\r\n\t\t\treturn;\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\r\n\t\tconsole.log(mediaBuffer);\r\n\t\tvideoElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tmediaBuffer.append(arrayBuffer[0]);\r\n\r\n\t\tif(videoElement.paused)\r\n\t\t\tvideoElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) + scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t// \r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\t\t\t\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};\r\n\r\nif(moduleMode){\r\n\tglobal.Media = ScarletsMedia;\r\n\tglobal.MediaEffect = ScarletsMediaEffect;\r\n\tglobal.AudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.VideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.MediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.MediaPresenter = ScarletsMediaPresenter;\r\n}\r\nelse{\r\n\tglobal.ScarletsMedia = ScarletsMedia;\r\n\tglobal.ScarletsMediaEffect = ScarletsMediaEffect;\r\n\tglobal.ScarletsAudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.ScarletsVideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.ScarletsMediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.ScarletsMediaPresenter = ScarletsMediaPresenter;\r\n}\r\n\r\n// ===== Module End =====\r\n})));"]}