{"version":3,"sources":["a_init.js","AudioBufferStreamer.js","Convert.js","MediaPlayer.js","MediaPresenter.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js","z_extra.js"],"names":["global","factory","exports","module","window","moduleMode","ScarletsMedia","audioContext","getElementAudioNode","elem","crossOrigin","this","createMediaElementSource","getElementVideoNode","ScarletsMediaEffect","mobileMediaUnlock","e","AudioContext","removeListener","emptyBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","onended","disconnect","start","noteOn","resume","document","removeEventListener","addEventListener","ScarletsAudioBufferStreamer","bufferElement","chunksDuration","webAudio","scope","debug","bufferAvailable","bufferPending","currentBuffer","playing","buffering","streaming","currentDuration","latency","error","realtime","bufferSkip","mimeType","extra","isMobile","outputNode","bufferHeader","stop","splice","i","setBufferHeader","arrayBuffer","Uint8Array","decodeAudioData","slice","audioBuffer","duration","noiseLength","getChannelData","length","addBufferElement","push","audioHandler","Audio","console","log","URL","revokeObjectURL","src","playAvailable","indexOf","fillEmptyBuffer","temp","addBufferHeader","finalBuffer","byteLength","set","webAudioBufferInsert","index","frameCount","channelLength","numberOfChannels","newBuffer","sampleRate","subarray","cleanNoise","context","playStream","realtimeBufferInterval","realtimeBufferPlay","Number","String","Date","now","baseLatency","createObjectURL","Blob","type","load","play","currentTime","receiveBuffer","streamingTime","unplayed","shift","playBuffer","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","ScarletsMediaPlayer","element","self","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","canPlayType","objectPropertyLinker","preload","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","callback","paused","fadeNumber","num","pause","prepare","links","force","querySelectorAll","remove","insertAdjacentHTML","eventRegistered","eventTrigger","on","eventName","name","off","once","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","streamInfo","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","options","audio","video","MediaRecorder","isTypeSupported","recordingInterval","mediaStream","bufferHeaderLength","onstart","requestData","ondataavailable","data","size","setTimeout","preciseInterval","startRecording","active","navigator","mediaDevices","getUserMedia","then","catch","stopRecording","clearPreciseInterval","streams","getTracks","removeTrack","chorus","sourceNode","output","createGain","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","value","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","abs","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","denormalize","normalize","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","to","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","fadeTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode","test","userAgent","target","property","configurable","min","max","maxFade","from","increment","onIncrease","onFinish","current","interval","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","Media","MediaEffect","AudioBufferStreamer","MediaPlayer","MediaPresenter"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n(function(global, factory){\r\n  if(typeof exports === 'object' && typeof module !== 'undefined'){\r\n  \tmodule.exports = {};\r\n  \tfactory(module.exports, window, true);\r\n  }\r\n  else factory(global, window);\r\n}(this, (function(global, window, moduleMode){'use strict';\r\n// ===== Module Init =====\r\n\r\n// Initialize global data\r\nvar ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nvar ScarletsMediaEffect = {};\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tif(!window.AudioContext) return removeListener();\r\n\t\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","// Minimum 3 bufferElement\r\nvar ScarletsAudioBufferStreamer = function(bufferElement, chunksDuration, webAudio){\r\n\tif(!bufferElement || bufferElement < 3) bufferElement = 3;\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.bufferElement = [];\r\n\tscope.bufferAvailable = [];\r\n\tscope.bufferPending = [];\r\n\tscope.currentBuffer = 0;\r\n\tscope.playing = false;\r\n\tscope.buffering = false;\r\n\tscope.streaming = false;\r\n\tscope.currentDuration = false;\r\n\tscope.latency = 0;\r\n\tscope.error = 0;\r\n\tscope.realtime = false;\r\n\tscope.bufferSkip = 0.07; // Set this higher when you hear any pitch\r\n\tscope.mimeType = null;\r\n\r\n\t// Use webAudio for mobile, and HTML5 audio for computer\r\n\tscope.webAudio = webAudio || ScarletsMedia.extra.isMobile() ? true : false; // Mobile browser have security on HTML element\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node  \r\n\t// Avoid webAudio for computer browser because memory usage\r\n\r\n\tvar bufferHeader = false;\r\n\r\n\tscope.stop = function(){\r\n\t\tscope.bufferPending.splice(0);\r\n\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\tscope.bufferElement[i].stop();\r\n\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t}\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tscope.currentBuffer = 0;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(arrayBuffer){\r\n\t\tif(!arrayBuffer){\r\n\t\t\tbufferHeader = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\r\n\r\n\t\t// Get buffer noise length\r\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\tscope.bufferSkip = audioBuffer.duration;\r\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\r\n\t\t});\r\n\t}\r\n\r\n\t// First initialization\r\n\tfor (var i = 0; i < bufferElement; i++) addBufferElement(i);\r\n\tfunction addBufferElement(i){\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.bufferElement.push(createBufferSource());\r\n\t\t\tscope.bufferAvailable.push(false);\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tvar audioHandler = new Audio();\r\n\t\t\tif(audioHandler){\r\n\t\t\t\tscope.bufferElement.push(audioHandler);\r\n\t\t\t\tscope.bufferAvailable.push(false);\r\n\r\n\t\t\t\taudioHandler.onended = function(){\r\n\t\t\t\t\tif(scope.debug) console.log(\"Buffer ended with ID: \"+i);\r\n\r\n\t\t\t\t\tURL.revokeObjectURL(this.src);\r\n\t\t\t\t\tthis.src = '';\r\n\r\n\t\t\t\t\tif(!scope.realtime){\r\n\t\t\t\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t\t\t\t\tscope.playing = false;\r\n\t\t\t\t\t\tscope.buffering = true;\r\n\t\t\t\t\t\tscope.playAvailable();\r\n\r\n\t\t\t\t\t\tif(scope.bufferAvailable.indexOf(false) !== -1 && scope.bufferPending.length != 0)\r\n\t\t\t\t\t\t\tfillEmptyBuffer();\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// ===== For handling WebAudio =====\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tvar noiseLength = 0;\r\n\tfunction cleanNoise(buffer){\r\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\r\n  \t\tvar channelLength = buffer.numberOfChannels;\r\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\r\n\r\n\t\tfor (var i = 0; i < channelLength; i++) {\r\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\r\n\t    }\r\n\r\n\t    return newBuffer;\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tscope.bufferElement[index].buffer = cleanNoise(buffer);\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\t// ===== Realtime Playing =====\r\n\t// Play audio immediately after received\r\n\t\r\n\tscope.playStream = function(){\r\n\t\tscope.streaming = scope.buffering = true;\r\n\t}\r\n\r\n\tvar realtimeBufferInterval = 0; // Need 3 bufferElement, other than this will give lower quality\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(arrayBuffer[0].byteLength === 0) return;\r\n\t\tarrayBuffer = arrayBuffer[0];\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +\r\n\t\t\tchunksDuration/1000 + scope.audioContext.baseLatency;\r\n\r\n\t\tscope.realtime = true;\r\n\t\t\r\n\t\tvar index = realtimeBufferInterval;\r\n\t\trealtimeBufferInterval++;\r\n\t\tif(realtimeBufferInterval > 2)\r\n\t\t\trealtimeBufferInterval = 0;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\r\n\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tURL.revokeObjectURL(scope.bufferElement[index].src);\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, arrayBuffer], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\t}\r\n\r\n\t// ====== Synchronous Playing ======\r\n\t// Play next audio when last audio was finished\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(!scope.streaming) return;\r\n\t\tvar streamingTime = arrayBuffer[1];\r\n\t\tscope.realtime = false;\r\n\r\n\t\tif(chunksDuration){\r\n\t\t\tvar unplayed = scope.bufferPending.length;\r\n\t\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\t\tif(scope.bufferAvailable[i]) unplayed++;\r\n\t\t\t}\r\n\t\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) \r\n\t\t\t\t\t\t\t\t+ chunksDuration*unplayed + scope.audioContext.baseLatency;\r\n\t\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.push(arrayBuffer[0]);\r\n\t\tfillEmptyBuffer();\r\n\r\n\t\tif(scope.buffering)\r\n\t\t\tscope.playAvailable();\r\n\t}\r\n\r\n\tvar fillEmptyBuffer = function(){\r\n\t\tvar index = scope.bufferAvailable.indexOf(false, scope.currentBuffer);\r\n\t\tif(index==-1)\r\n\t\t\tindex = scope.bufferAvailable.indexOf(false);\r\n\t\tif(index==-1||scope.bufferPending.length==0)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.audioContext.decodeAudioData(addBufferHeader(scope.bufferPending[0]), function(buffer){\r\n\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse { // HTML5 Audio\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.shift();\r\n\t\tscope.bufferAvailable[index] = true;\r\n\r\n\t\tif(scope.buffering) scope.playAvailable();\r\n\t\tif(scope.debug) console.log(\"Buffer updated with ID: \"+index);\r\n\t}\r\n\r\n\tscope.playBuffer = function(index){\r\n\t\tif(!scope.bufferElement[index].duration)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.debug) console.log(\"Current stream duration: \"+scope.bufferElement[index].duration);\r\n\r\n\t\tif(chunksDuration===false){ //Skip to end to get current duration\r\n\t\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.buffering = false;\r\n\t\tscope.playing = true;\r\n\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\tif(scope.bufferElement[index].start)\r\n\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\telse {\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\r\n\t\tscope.currentBuffer = index;\r\n\t\tif(scope.debug) console.log(\"Playing buffer ID: \"+scope.currentBuffer);\r\n\t}\r\n\r\n\tscope.playAvailable = function(){\r\n\t\tif(scope.playing) return;\r\n\r\n\t\tif(scope.bufferAvailable[scope.currentBuffer])\r\n\t\t\treturn scope.playBuffer(scope.currentBuffer);\r\n\r\n\t\telse{\r\n\t\t\tvar index = scope.bufferAvailable.indexOf(true, scope.currentBuffer);\r\n\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\r\n\t\t\telse{ // Scan from first array\r\n\t\t\t\tindex = scope.bufferAvailable.indexOf(true);\r\n\t\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nvar ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tself.play = function(callback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\telement.play();\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, callback);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.play();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i]}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload) element.load();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// streamInfo = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nvar ScarletsMediaPresenter = function(streamInfo, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var streamInfo = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\r\n\tscope.mediaGranted = false;\r\n\r\n\tscope.options = {};\r\n\tif(streamInfo.audio && !streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm'))\r\n\t\t\tscope.options.mimeType = 'audio/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4';\r\n\t}\r\n\telse if(!streamInfo.audio && streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg'))\r\n\t\t\tscope.options.mimeType = 'video/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'video/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\telse{\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\r\n\tvar recordingInterval = false;\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, scope.options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\r\n\t\t\tif(bufferHeaderLength === false)\r\n\t\t\t\tscope.mediaRecorder.requestData();\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e) {\r\n\t\t\tif(bufferHeaderLength !== false){\r\n\t\t\t\tif(e.data.size === 0) return;\r\n\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Wait until media header was available\r\n\t\t\tif(e.data.size === 0){\r\n\t\t\t\tsetTimeout(function(){scope.mediaRecorder.requestData()}, 0);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// The audio buffer can contain some duration that causes a noise\r\n\t\t\t// So we will need to remove it on streamer side\r\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\r\n\t\t\tscope.bufferHeader = e.data;\r\n\t\t\tbufferHeaderLength = e.data.byteLength;\r\n\r\n\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\tscope.onRecordingReady(scope.bufferHeader);\r\n\t\t\tscope.recordingReady = true;\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start();\r\n\r\n\t\t// Obtain data after some interval\r\n\t\trecordingInterval = ScarletsMedia.extra.preciseInterval(function(){\r\n\t\t\tif(!scope.recordingReady) return;\r\n\t\t\tscope.mediaRecorder.requestData();\r\n\t\t}, latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(!scope.mediaGranted || !scope.mediaRecorder.stream || !scope.mediaRecorder.stream.active){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(streamInfo).then(mediaGranted).catch(console.error);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start();\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tScarletsMedia.extra.clearPreciseInterval(recordingInterval);\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMediaEffect.chorus = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.conReverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.delay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.distortion = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.dubDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.fade = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.flanger = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.harmonizer = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMediaEffect.noise = function(){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.pingPongDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.pitchShift = function(sourceNode){\r\n    var context = this.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMediaEffect.reverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.stereoPanner = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.tremolo = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.vibrato = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t// \r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\t\t\t\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};\r\n\r\nif(moduleMode){\r\n\tglobal.Media = ScarletsMedia;\r\n\tglobal.MediaEffect = ScarletsMediaEffect;\r\n\tglobal.AudioBufferStreamer = ScarletsAudioBufferStreamer;\r\n\tglobal.MediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.MediaPresenter = ScarletsMediaPresenter;\r\n}\r\nelse{\r\n\tglobal.ScarletsMedia = ScarletsMedia;\r\n\tglobal.ScarletsMediaEffect = ScarletsMediaEffect;\r\n\tglobal.ScarletsAudioBufferStreamer = ScarletsAudioBufferStreamer;\r\n\tglobal.ScarletsMediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.ScarletsMediaPresenter = ScarletsMediaPresenter;\r\n}\r\n\r\n// ===== Module End =====\r\n})));"]}