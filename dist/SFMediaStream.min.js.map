{"version":3,"sources":["AudioBufferStreamer.js","a_init.js","Convert.js","MediaPlayer.js","MediaPresenter.js","z_extra.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js"],"names":["window","ScarletsAudioBufferStreamer","bufferElement","chunksDuration","scope","this","debug","bufferAvailable","bufferPending","currentBuffer","playing","buffering","streaming","currentDuration","latency","error","realtime","bufferSkip","mimeType","webAudio","ScarletsMedia","extra","isMobile","audioContext","bufferHeader","setBufferHeader","arrayBuffer","byteLength","decodeAudioData","slice","audioBuffer","duration","initAudioEvent","i","onended","console","log","disconnect","URL","revokeObjectURL","src","playAvailable","indexOf","length","fillEmptyBuffer","addBufferElement","push","createBufferSource","audioHandler","Audio","webAudioBufferInsert","index","buffer","transferFunction","connect","destination","receiveBuffer","streamingTime","unplayed","Number","String","Date","now","baseLatency","fileReader","FileReader","realtimeBufferInterval","realtimeBufferPlay","onload","result","start","readAsArrayBuffer","Blob","type","createObjectURL","load","play","currentTime","shift","playBuffer","playStream","stop","splice","AudioContext","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","ScarletsMediaPlayer","element","self","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","canPlayType","objectPropertyLinker","preload","audioFadeEffect","speed","set","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","callback","paused","fadeNumber","num","pause","prepare","links","force","temp","querySelectorAll","remove","insertAdjacentHTML","eventRegistered","eventTrigger","e","on","eventName","name","addEventListener","off","removeEventListener","once","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","streamInfo","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","options","audio","video","MediaRecorder","isTypeSupported","recordingInterval","mediaStream","bufferHeaderLength","onstart","requestData","ondataavailable","setTimeout","data","setInterval","startRecording","active","navigator","mediaDevices","getUserMedia","then","catch","stopRecording","clearInterval","streams","getTracks","removeTrack","test","userAgent","target","property","value","configurable","normalize","min","max","denormalize","maxFade","from","to","increment","fadeTime","onIncrease","onFinish","current","interval","abs","Infinity","timer","ceil","emptyBuffer","createBuffer","mobileMediaUnlock","source","document","noteOn","resume","chorus","sourceNode","context","output","createGain","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","sampleRate","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","getChannelData","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["// Minimum 3 bufferElement\r\nwindow.ScarletsAudioBufferStreamer = function(bufferElement, chunksDuration){\r\n\tif(!bufferElement || bufferElement < 3) bufferElement = 3;\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.bufferElement = [];\r\n\tscope.bufferAvailable = [];\r\n\tscope.bufferPending = [];\r\n\tscope.currentBuffer = 0;\r\n\tscope.playing = false;\r\n\tscope.buffering = false;\r\n\tscope.streaming = false;\r\n\tscope.currentDuration = false;\r\n\tscope.latency = 0;\r\n\tscope.error = 0;\r\n\tscope.realtime = false;\r\n\tscope.bufferSkip = 0.07;\r\n\tscope.mimeType = null;\r\n\r\n\t// Use webAudio for mobile, and HTML5 audio for computer\r\n\tscope.webAudio = ScarletsMedia.extra.isMobile()?true:false; // Mobile browser have security on HTML element\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\t// Avoid webAudio for computer browser because memory usage\r\n\r\n\tvar bufferHeader = false;\r\n\tvar bufferHeaderLength = false;\r\n\r\n\tscope.setBufferHeader = function(arrayBuffer){\r\n\t\tif(!arrayBuffer){\r\n\t\t\tbufferHeader = bufferHeaderLength = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tbufferHeader = arrayBuffer;\r\n\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\r\n\t\t// Find buffer skip\r\n\t\tif(scope.audioContext)\r\n\t\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t\tscope.bufferSkip = audioBuffer.duration;\r\n\t\t\t});\r\n\t}\r\n\r\n\tvar initAudioEvent = function(i){\r\n\t\tscope.bufferElement[i].onended = function(){\r\n\t\t\tif(scope.debug) console.log(\"Buffer ended with ID: \"+i);\r\n\r\n\t\t\tif(!scope.webAudio){ // HTML5 Audio\r\n\t\t\t\tURL.revokeObjectURL(scope.bufferElement[i].src);\r\n\t\t\t\tscope.bufferElement[i].src = '';\r\n\t\t\t} else this.disconnect(0);\r\n\r\n\t\t\tif(!scope.realtime){\r\n\t\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t\t\tscope.playing = false;\r\n\t\t\t\tscope.buffering = true;\r\n\t\t\t\tscope.playAvailable();\r\n\r\n\t\t\t\tif(scope.bufferAvailable.indexOf(false)!=-1&&scope.bufferPending.length!=0)\r\n\t\t\t\t\tfillEmptyBuffer();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// First initialization\r\n\tfor (var i = 0; i < bufferElement; i++) addBufferElement(i);\r\n\tfunction addBufferElement(i){\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.bufferElement.push(scope.audioContext.createBufferSource());\r\n\t\t\tscope.bufferAvailable.push(false);\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tvar audioHandler = new Audio();\r\n\t\t\tif(audioHandler){\r\n\t\t\t\tscope.bufferElement.push(audioHandler);\r\n\t\t\t\tscope.bufferAvailable.push(false);\r\n\t\t\t\tinitAudioEvent(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeaderLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeaderLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(!scope.streaming) return;\r\n\t\tvar streamingTime = arrayBuffer[1];\r\n\t\tscope.realtime = false;\r\n\r\n\t\tif(chunksDuration){\r\n\t\t\tvar unplayed = scope.bufferPending.length;\r\n\t\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\t\tif(scope.bufferAvailable[i]) unplayed++;\r\n\t\t\t}\r\n\t\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) \r\n\t\t\t\t\t\t\t\t+ chunksDuration*unplayed + scope.audioContext.baseLatency;\r\n\t\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.push(arrayBuffer[0]);\r\n\t\tfillEmptyBuffer();\r\n\r\n\t\tif(scope.buffering)\r\n\t\t\tscope.playAvailable();\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tvar transferFunction = scope.bufferElement[index].onended;\r\n\t\tscope.bufferElement[index] = scope.audioContext.createBufferSource();\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\tscope.bufferElement[index].onended = transferFunction;\r\n\t}\r\n\r\n\tvar fileReader = new FileReader();\r\n\tvar realtimeBufferInterval = 0; // Need 3 bufferElement, other than this will give lower quality\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +\r\n\t\t\tchunksDuration/1000 + scope.audioContext.baseLatency;\r\n\r\n\t\tscope.realtime = true;\r\n\t\t\r\n\t\tvar index = realtimeBufferInterval;\r\n\t\trealtimeBufferInterval++;\r\n\t\tif(realtimeBufferInterval > 2)\r\n\t\t\trealtimeBufferInterval = 0;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, arrayBuffer[0]], {type:scope.mimeType}));\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tURL.revokeObjectURL(scope.bufferElement[index].src);\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, arrayBuffer[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\t}\r\n\r\n\tvar fillEmptyBuffer = function(){\r\n\t\tvar index = scope.bufferAvailable.indexOf(false, scope.currentBuffer);\r\n\t\tif(index==-1)\r\n\t\t\tindex = scope.bufferAvailable.indexOf(false);\r\n\t\tif(index==-1||scope.bufferPending.length==0)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.shift();\r\n\t\tscope.bufferAvailable[index] = true;\r\n\r\n\t\tif(scope.buffering) scope.playAvailable();\r\n\t\tif(scope.debug) console.log(\"Buffer updated with ID: \"+index);\r\n\t}\r\n\r\n\tscope.playBuffer = function(index){\r\n\t\tif(!scope.bufferElement[index].duration)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.debug) console.log(\"Current stream duration: \"+scope.bufferElement[index].duration);\r\n\r\n\t\tif(chunksDuration===false){ //Skip to end to get current duration\r\n\t\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.buffering = false;\r\n\t\tscope.playing = true;\r\n\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\tif(scope.bufferElement[index].start)\r\n\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\telse {\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\r\n\t\tscope.currentBuffer = index;\r\n\t\tif(scope.debug) console.log(\"Playing buffer ID: \"+scope.currentBuffer);\r\n\t}\r\n\r\n\tscope.playAvailable = function(){\r\n\t\tif(scope.playing) return;\r\n\r\n\t\tif(scope.bufferAvailable[scope.currentBuffer])\r\n\t\t\treturn scope.playBuffer(scope.currentBuffer);\r\n\r\n\t\telse{\r\n\t\t\tvar index = scope.bufferAvailable.indexOf(true, scope.currentBuffer);\r\n\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\r\n\t\t\telse{ // Scan from first array\r\n\t\t\t\tindex = scope.bufferAvailable.indexOf(true);\r\n\t\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.streaming = scope.buffering = true;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tscope.bufferPending.splice(0);\r\n\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\tscope.bufferElement[i].stop();\r\n\t\t\tinitAudioEvent(i);\r\n\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t}\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tscope.currentBuffer = 0;\r\n\t}\r\n}","/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n'use strict';\r\n\r\n// Initialize global data\r\nwindow.ScarletsMedia = {\r\n\taudioContext: window.AudioContext ? new AudioContext() : false,\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nwindow.ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tself.play = function(callback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\telement.play();\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, callback);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.play();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i]}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload) element.load();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// streamInfo = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nwindow.ScarletsMediaPresenter = function(streamInfo, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var streamInfo = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\r\n\tscope.mediaGranted = false;\r\n\r\n\tvar fileReader = new FileReader();\r\n\tscope.options = {};\r\n\tif(streamInfo.audio&&!streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm'))\r\n\t\t\tscope.options.mimeType = 'audio/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4';\r\n\t}\r\n\telse if(!streamInfo.audio&&streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg'))\r\n\t\t\tscope.options.mimeType = 'video/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'video/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\telse{\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\r\n\tvar recordingInterval = false;\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, scope.options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\tscope.mediaRecorder.requestData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e) {\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tvar arrayBuffer = this.result;\r\n\r\n\t\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\t\t\t\t\tif(bufferHeaderLength==0){\r\n\t\t\t\t\t\tbufferHeaderLength = false;\r\n\t\t\t\t\t\tsetTimeout(function(){scope.mediaRecorder.requestData()}, 1);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// ToDo: Clean media header\r\n\t\t\t\t\tscope.bufferHeader = arrayBuffer;\r\n\r\n\t\t\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\t\t\tscope.onRecordingReady(scope.bufferHeader);\r\n\t\t\t\t\tscope.recordingReady = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(scope.onBufferProcess){\r\n\t\t\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\t\t\tscope.onBufferProcess([arrayBuffer, streamingTime]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(e.data);\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start();\r\n\r\n\t\t// Stop recording after 3 seconds and broadcast it to server\r\n\t\trecordingInterval = setInterval(function() {\r\n\t\t\tif(!scope.recordingReady) return;\r\n\t\t\tscope.mediaRecorder.requestData();\r\n\t\t}, latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(!scope.mediaGranted || !scope.mediaRecorder.stream || !scope.mediaRecorder.stream.active){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(streamInfo).then(mediaGranted).catch(console.error);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start();\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tclearInterval(recordingInterval);\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMedia.extra = {\r\n\tisMobile:function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t},\r\n\tobjectPropertyLinker:function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t},\r\n\r\n\tnormalize:function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t},\r\n\r\n\tdenormalize:function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t},\r\n\r\n\tmaxFade:0,\r\n\tfadeNumber:function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tthis.maxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(this.maxFade>=100) clearInterval(timer);\r\n\t\t\tthis.maxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n};\r\n\r\n// Unlock mobile media security\r\nif(ScarletsMedia.extra.isMobile()){\r\n\t(function(){\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar mobileMediaUnlock = function(e){\r\n\t\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\t\tsource.buffer = emptyBuffer;\r\n\t\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\t\tsource.onended = function(){\r\n\t\t\t\tsource.disconnect(0);\r\n\t\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\t\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\t\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t\t\t}\r\n\r\n\t\t\t// Play the empty buffer.\r\n\t\t\tif(!source.start) source.noteOn(0);\r\n\t\t\telse source.start(0);\r\n\t\t\tScarletsMedia.audioContext.resume();\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n\t})();\r\n}","ScarletsMedia.chorus = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.conReverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.delay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.distortion = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.dubDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.fade = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.flanger = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.harmonizer = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMedia.noise = function(){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.pingPongDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.pitchShift = function(sourceNode){\r\n    var context = this.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMedia.reverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.stereoPanner = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.tremolo = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.vibrato = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};"]}