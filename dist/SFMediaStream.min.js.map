{"version":3,"sources":["a_init.js","AudioStreamer.js","Convert.js","MediaBuffer.js","MediaPlayer.js","MediaPresenter.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js","VideoStreamer.js","z_extra.js"],"names":["global","factory","exports","module","window","this","moduleMode","ScarletsMedia","audioContext","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","ScarletsMediaEffect","audioCodecs","webm","mp4","ogg","videoCodecs","3gpp","waitingUnlock","userInteracted","AudioContext","console","error","mobileMediaUnlock","e","emptyBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","onended","disconnect","removeListener","start","noteOn","resume","document","removeEventListener","i","length","addEventListener","ScarletsAudioStreamer","chunksDuration","chunksSeconds","scope","debug","playing","latency","mimeType","bufferElement","outputNode","directAudioOutput","bufferHeader","mediaBuffer","audioElement","Audio","audioNode","node","createGain","stop","buffering","setBufferHeader","packet","data","arrayBuffer","MediaBuffer","Uint8Array","src","objectURL","decodeAudioData","slice","audioBuffer","noiseLength","getChannelData","webAudioBufferInsert","index","temp","frameCount","channelLength","numberOfChannels","newBuffer","sampleRate","set","subarray","cleanNoise","context","playStream","bufferElementIndex","realtimeBufferPlay","log","byteLength","Number","String","Date","now","baseLatency","finalBuffer","addBufferHeader","receiveBuffer","append","paused","play","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","MediaSource","URL","createObjectURL","removing","totalTime","removeCount","sourceBuffer","onsourceopen","addSourceBuffer","mode","appendBuffer","onupdateend","remove","onerror","buffered","updating","abort","readyState","endOfStream","ScarletsMediaPlayer","element","self","constructor","createElement","body","appendChild","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","load","canPlayType","extra","objectPropertyLinker","preload","crossorigin","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","stillWaiting","successCallback","errorCallback","then","catch","push","fadeNumber","num","pause","callback","prepare","links","force","querySelectorAll","once","off","insertAdjacentHTML","split","join","eventRegistered","eventTrigger","type","on","eventName","name","splice","indexOf","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","options","mediaStream","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","polyfill","mediaType","video","supportedMimeType","codecsList","format","codecs","MediaRecorder","isTypeSupported","audio","createMediaStreamSource","pendingConnect","bufferHeaderLength","onstart","ondataavailable","state","size","startTime","streamingTime","createMediaStreamDestination","startRecording","screen","navigator","mediaDevices","getDisplayMedia","getUserMedia","stopRecording","streams","getTracks","removeTrack","chorus","sourceNode","output","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","value","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","abs","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","currentTime","remainingTime","setTargetAtTime","setTimeout","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","denormalize","normalize","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","to","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","fadeTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","shift","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode","ScarletsVideoStreamer","videoElement","audioConnect","audioDisconnect","isMobile","test","userAgent","target","property","configurable","min","max","maxFade","from","increment","onIncrease","onFinish","current","interval","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseInterval","clearPreciseInterval","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","Media","MediaEffect","AudioStreamer","VideoStreamer","MediaPlayer","MediaPresenter"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n(function(global, factory){\r\n  if(typeof exports === 'object' && typeof module !== 'undefined'){\r\n  \tmodule.exports = {};\r\n  \tfactory(module.exports, window, true);\r\n  }\r\n  else factory(global, window);\r\n}(this || window, (function(global, window, moduleMode){'use strict';\r\n// ===== Module Init =====\r\n\r\n// Initialize global data\r\nvar ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nvar ScarletsMediaEffect = {};\r\nvar audioCodecs = {\r\n\twebm:['opus', 'vorbis'],\r\n\tmp4:['mp4a.67', 'mp4a.40.29', 'mp4a.40.5', 'mp4a.40.2', 'mp3'],\r\n\togg:['opus', 'vorbis'], // This may not work on mobile\r\n};\r\nvar videoCodecs = {\r\n\twebm:['vp8,opus', 'vp8,vorbis'],\r\n\tmp4:['mp4v.20.8,mp4a.40.2', 'mp4v.20.240,mp4a.40.2', 'avc1.42E01E,mp4a.40.2', 'avc1.58A01E,mp4a.40.2', 'avc1.64001E,mp4a.40.2'],\r\n\t'3gpp':['mp4v.20.8,samr'],\r\n\togg:['dirac,vorbis', 'theora,vorbis'], // This may not work on mobile\r\n};\r\n\r\nvar waitingUnlock = [];\r\nvar userInteracted = false;\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tif(!window.AudioContext) return console.error(\"`AudioContext` was not available\");\r\n\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\r\n\t\tfor (var i = 0; i < waitingUnlock.length; i++) {\r\n\t\t\twaitingUnlock[i]();\r\n\t\t}\r\n\r\n\t\twaitingUnlock.length = 0;\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","// Minimum 3 bufferElement\r\nvar ScarletsAudioStreamer = function(chunksDuration){\r\n\tvar bufferElement = 3;\r\n\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\tscope.bufferElement = [];\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar bufferHeader = false;\r\n\tvar mediaBuffer = false;\r\n\r\n\tvar audioElement = new Audio();\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(audioElement);\r\n\r\n\tscope.connect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(node){\r\n\t\tscope.outputNode.disconnect(node);\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect(node);\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet.data){\r\n\t\t\tbufferHeader = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\r\n\r\n\t\taudioElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\r\n\t\t// Get buffer noise length\r\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t// headerDuration = audioBuffer.duration;\r\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\r\n\t\t});\r\n\t}\r\n\r\n\t// ===== For handling WebAudio =====\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tvar noiseLength = 0;\r\n\tfunction cleanNoise(buffer){\r\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\r\n\t\tif(frameCount === 0) return false;\r\n\r\n  \t\tvar channelLength = buffer.numberOfChannels;\r\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\r\n\r\n\t\tfor (var i = 0; i < channelLength; i++) {\r\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\r\n\t    }\r\n\r\n\t    return newBuffer;\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tbuffer = cleanNoise(buffer);\r\n\r\n\t\tif(buffer === false) return false;\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context && directAudioOutput === false)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ===== Realtime Playing =====\r\n\t// Play audio immediately after received\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tvar bufferElementIndex = 0;\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.playing === false) return;\r\n\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(arrayBuffer[0].byteLength === 0) return;\r\n\t\tarrayBuffer = arrayBuffer[0];\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) + chunksSeconds + scope.audioContext.baseLatency;\r\n\r\n\t\tvar index = bufferElementIndex;\r\n\t\tbufferElementIndex++;\r\n\t\tif(bufferElementIndex > 2)\r\n\t\t\tbufferElementIndex = 0;\r\n\r\n\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\r\n\t\t\tif(webAudioBufferInsert(index, buffer) === false)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tscope.bufferElement[index].start(0);\r\n\t\t});\r\n\t}\r\n\r\n\t// ====== Synchronous Playing ======\r\n\t// Play next audio when last audio was finished\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tmediaBuffer.append(arrayBuffer[0]);\r\n\r\n\t\tif(audioElement.paused)\r\n\t\t\taudioElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +  scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","var MediaBuffer = function(mimeType, chunksDuration, bufferHeader){\r\n\tvar scope = this;\r\n\tscope.source = new MediaSource();\r\n\tscope.objectURL = URL.createObjectURL(scope.source);\r\n\r\n\tvar removing = false;\r\n\tvar totalTime = 0;\r\n\tvar removeCount = 10;\r\n\r\n\tvar sourceBuffer = null;\r\n\tscope.source.onsourceopen = function(){\r\n\t\tsourceBuffer = scope.source.addSourceBuffer(mimeType);\r\n\t\tsourceBuffer.mode = 'sequence';\r\n\t\tsourceBuffer.appendBuffer(bufferHeader);\r\n\r\n\t\tsourceBuffer.onupdateend = function(){\r\n\t\t\tif(removing === false) return;\r\n\r\n\t\t\tremoving = false;\r\n\t\t\ttotalTime = 0;\r\n\t\t\tsourceBuffer.remove(0, removeCount);\r\n\t\t\tremoveCount = 20;\r\n\t\t};\r\n\t\tsourceBuffer.onerror = console.error;\r\n\t};\r\n\r\n\tscope.source.onerror = console.error;\r\n\r\n\tscope.append = function(arrayBuffer){\r\n\t\tif(sourceBuffer === null)\r\n\t\t\treturn false;\r\n\r\n\t\tif(sourceBuffer.buffered.length === 2)\r\n\t\t\tconsole.log('something wrong');\r\n\r\n\t\tsourceBuffer.appendBuffer(arrayBuffer);\r\n\t\ttotalTime += chunksDuration;\r\n\t\t// console.log(totalTime, arrayBuffer);\r\n\r\n\t\tif(totalTime >= 20000)\r\n\t\t\tremoving = true;\r\n\r\n\t\treturn totalTime/1000;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tif(sourceBuffer.updating)\r\n\t\t\tsourceBuffer.abort();\r\n\r\n\t\tif(scope.source.readyState === \"open\")\r\n\t\t\tscope.source.endOfStream();\r\n\t}\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nvar ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tif(element === void 0)\r\n\t\telement = 'audio';\r\n\r\n\tif(element.constructor === String){\r\n\t\tif(element !== 'audio' && element !== 'video')\r\n\t\t\treturn console.error('Supported player is \"audio\" or \"video\"');\r\n\r\n\t\telement = document.createElement(element);\r\n\t\tdocument.body.appendChild(element);\r\n\t}\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\telement.crossorigin = 'anonymous';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tvar stillWaiting = false;\r\n\tfunction play(successCallback, errorCallback){\r\n\t\telement.play().then(function(){\r\n\t\t\tstillWaiting = false;\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t}).catch(function(e){\r\n\t\t\tif(errorCallback) errorCallback(e);\r\n\t\t\telse{\r\n\t\t\t\t// If user haven't interacted with the page\r\n\t\t\t\t// and media play was requested, let's pending it\r\n\t\t\t\tif(userInteracted === false){\r\n\t\t\t\t\tif(stillWaiting === false){\r\n\t\t\t\t\t\twaitingUnlock.push(function(){\r\n\t\t\t\t\t\t\tplay(successCallback, errorCallback);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tself.play = function(successCallback, errorCallback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\tplay(successCallback, errorCallback);\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, successCallback);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tplay(successCallback, errorCallback);\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(self.preload && callback){\r\n\t\t\tself.once('canplay', callback);\r\n\t\t\tself.once('error', function(){\r\n\t\t\t\tself.off('canplay', callback);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links.split('\"').join('\\\\\"')}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i].split('\"').join('\\\\\"')}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload)\r\n\t\t\telement.load();\r\n\r\n\t\telse if(callback)\r\n\t\t\tcallback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.removeEventListener(eventName, callback, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// options = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nvar ScarletsMediaPresenter = function(options, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var options = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    },\r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front ? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\tscope.mediaStream = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\tscope.mediaGranted = false;\r\n\r\n\tif(options === void 0)\r\n\t\toptions = {};\r\n\r\n\tscope.debug = options.debug;\r\n\r\n\t// Deprecated\r\n\tscope.options = options;\r\n\r\n\tscope.polyfill = void 0;\r\n\r\n\tvar mediaType = options.video ? 'video' : 'audio';\r\n\r\n\t// Check supported mimeType and codecs for the recorder\r\n\tif(!options.mimeType){\r\n\t\tvar supportedMimeType = false;\r\n\t\tvar codecsList = mediaType === 'audio' ? audioCodecs : videoCodecs;\r\n\r\n\t\tfor(var format in codecsList){\r\n\t\t\tvar mimeType = mediaType+'/'+format;\r\n\t\t\tvar codecs = codecsList[format];\r\n\r\n\t\t\tfor (var i = 0; i < codecs.length; i++) {\r\n\t\t\t\tvar temp = mimeType+';codecs=\"'+codecs[i]+'\"';\r\n\t\t\t\tif(MediaRecorder.isTypeSupported(temp) && MediaSource.isTypeSupported(temp)){\r\n\t\t\t\t\tsupportedMimeType = temp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(supportedMimeType === false && MediaRecorder.isTypeSupported(mimeType) && MediaSource.isTypeSupported(mimeType))\r\n\t\t\t\tsupportedMimeType = mimeType;\r\n\r\n\t\t\tif(supportedMimeType !== false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toptions.mimeType = supportedMimeType;\r\n\t\tconsole.log(\"mimeType: \"+supportedMimeType);\r\n\t}\r\n\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\t// For adding effect later (if audio available)\r\n\t\tif(options.audio !== void 0){\r\n\t\t\tscope.source = ScarletsMedia.audioContext.createMediaStreamSource(mediaStream);\r\n\t\t\tscope.mediaStream = mediaStream = scope.destination.stream;\r\n\r\n\t\t\tif(pendingConnect.length !== 0){\r\n\t\t\t\tfor (var i = 0; i < pendingConnect.length; i++)\r\n\t\t\t\t\tscope.source(pendingConnect[i]);\r\n\r\n\t\t\t\tpendingConnect.length = 0;\r\n\t\t\t}\r\n\t\t\telse scope.source.connect(scope.destination);\r\n\t\t}\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, options, scope.polyfill);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e){\r\n\t\t\t// Stream segments after the header was obtained\r\n\t\t\tif(bufferHeaderLength !== false){\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Return if the recording was stopped\r\n\t\t\tif(scope.mediaRecorder.state !== 'recording')\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(e.data.size <= 1) return;\r\n\r\n\t\t\t// The audio buffer can contain some duration that causes a noise\r\n\t\t\t// So we will need to remove it on streamer side\r\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\r\n\t\t\tscope.bufferHeader = e.data;\r\n\t\t\tbufferHeaderLength = e.data.size;\r\n\r\n\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\tscope.onRecordingReady({\r\n\t\t\t\t\tmimeType:options.mimeType,\r\n\t\t\t\t\tstartTime:Date.now(),\r\n\t\t\t\t\tdata:scope.bufferHeader\r\n\t\t\t\t});\r\n\t\t\tscope.recordingReady = true;\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start(latency);\r\n\t}\r\n\r\n\tvar pendingConnect = [];\r\n\r\n\tscope.source = void 0;\r\n\tscope.destination = ScarletsMedia.audioContext.createMediaStreamDestination();\r\n\r\n\tscope.connect = function(node){\r\n\t\tif(scope.source === void 0){\r\n\t\t\tpendingConnect.push(node);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.source.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(node){\r\n\t\tif(scope.source)\r\n\t\t\tscope.source.disconnect(node);\r\n\t\telse{\r\n\t\t\tvar i = pendingConnect.indexOf(node);\r\n\t\t\tif(i === -1)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tpendingConnect.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(scope.mediaGranted === false || scope.mediaRecorder === null){\r\n\t\t\tscope.recordingReady = false;\r\n\r\n\t\t\tif(!scope.options.screen)\r\n\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(mediaGranted).catch(console.error);\r\n\t\t\telse\r\n\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(mediaGranted).catch(console.error);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if(scope.mediaRecorder.state === 'recording')\r\n\t\t\treturn true;\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start(latency);\r\n\t\t\tscope.recording = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n\r\n\t// ToDo: Allow reuse instead of removing tracks when stopping\r\n\tscope.stopRecording = function(){\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMediaEffect.chorus = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.conReverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.delay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.distortion = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.dubDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.fade = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.flanger = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.harmonizer = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMediaEffect.noise = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};\r\n","ScarletsMediaEffect.pingPongDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.pitchShift = function(sourceNode){\r\n    var context = ScarletsMedia.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMediaEffect.reverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.stereoPanner = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.tremolo = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.vibrato = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","// Minimum 3 bufferElement\r\nvar ScarletsVideoStreamer = function(videoElement, chunksDuration){\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar mediaBuffer = false;\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(videoElement);\r\n\r\n\tscope.audioConnect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.audioDisconnect = function(){\r\n\t\toutputNode.disconnect();\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect();\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet || !packet.data)\r\n\t\t\treturn;\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\r\n\t\tconsole.log(mediaBuffer);\r\n\t\tvideoElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tmediaBuffer.append(arrayBuffer[0]);\r\n\r\n\t\tif(videoElement.paused)\r\n\t\t\tvideoElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) + scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t// \r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\t\t\t\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};\r\n\r\nif(moduleMode){\r\n\tglobal.Media = ScarletsMedia;\r\n\tglobal.MediaEffect = ScarletsMediaEffect;\r\n\tglobal.AudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.VideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.MediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.MediaPresenter = ScarletsMediaPresenter;\r\n}\r\nelse{\r\n\tglobal.ScarletsMedia = ScarletsMedia;\r\n\tglobal.ScarletsMediaEffect = ScarletsMediaEffect;\r\n\tglobal.ScarletsAudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.ScarletsVideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.ScarletsMediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.ScarletsMediaPresenter = ScarletsMediaPresenter;\r\n}\r\n\r\n// ===== Module End =====\r\n})));"]}