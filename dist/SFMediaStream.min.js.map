{"version":3,"sources":["AudioBufferStreamer.js","a_init.js","Convert.js","MediaPlayer.js","MediaPresenter.js","z_extra.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js"],"names":["window","ScarletsAudioBufferStreamer","bufferElement","chunksDuration","scope","this","debug","bufferAvailable","bufferPending","currentBuffer","playing","buffering","streaming","currentDuration","latency","error","realtime","bufferSkip","mimeType","webAudio","ScarletsMedia","convert","isMobile","audioContext","bufferHeader","setBufferHeader","arrayBuffer","byteLength","decodeAudioData","slice","audioBuffer","duration","initAudioEvent","i","onended","console","log","disconnect","URL","revokeObjectURL","src","playAvailable","indexOf","length","fillEmptyBuffer","addBufferElement","push","createBufferSource","audioHandler","Audio","webAudioBufferInsert","index","buffer","transferFunction","connect","destination","receiveBuffer","streamingTime","unplayed","Number","String","Date","now","baseLatency","fileReader","FileReader","realtimeBufferInterval","realtimeBufferPlay","onload","result","start","readAsArrayBuffer","Blob","type","createObjectURL","load","play","currentTime","shift","playBuffer","playStream","stop","splice","AudioContext","elementNode","elem","crossOrigin","createMediaElementSource","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","ScarletsMediaPlayer","element","self","propertyLinker","tagName","toLowerCase","concat","canPlayType","extra","objectPropertyLinker","preload","audioFadeEffect","speed","set","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","volume","callback","paused","fadeNumber","num","pause","prepare","links","force","temp","querySelectorAll","remove","insertAdjacentHTML","eventRegistered","eventTrigger","e","on","eventName","name","addEventListener","off","removeEventListener","once","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","j","x","random","ScarletsMediaPresenter","streamInfo","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","options","audio","video","MediaRecorder","isTypeSupported","recordingInterval","mediaStream","bufferHeaderLength","onstart","requestData","ondataavailable","setTimeout","data","setInterval","startRecording","active","navigator","mediaDevices","getUserMedia","then","catch","stopRecording","clearInterval","streams","getTracks","removeTrack","test","userAgent","target","property","Object","defineProperty","get","value","enumerable","configurable","normalize","min","max","denormalize","maxFade","from","to","increment","fadeTime","onIncrease","onFinish","current","interval","abs","Infinity","timer","ceil","emptyBuffer","createBuffer","mobileMediaUnlock","source","document","noteOn","resume","chorus","sourceNode","context","output","createGain","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","gain","ret","rate","intensity","mix","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","peak","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","sampleRate","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","width","toFixed","filter","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","depth","harmonizer","filters1","filters2","gains","pitch","f0","slope","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","getChannelData","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","vibratoGainNode","detune"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["// Minimum 3 bufferElement\r\nwindow.ScarletsAudioBufferStreamer = function(bufferElement, chunksDuration){\r\n\tif(!bufferElement || bufferElement < 3) bufferElement = 3;\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.bufferElement = [];\r\n\tscope.bufferAvailable = [];\r\n\tscope.bufferPending = [];\r\n\tscope.currentBuffer = 0;\r\n\tscope.playing = false;\r\n\tscope.buffering = false;\r\n\tscope.streaming = false;\r\n\tscope.currentDuration = false;\r\n\tscope.latency = 0;\r\n\tscope.error = 0;\r\n\tscope.realtime = false;\r\n\tscope.bufferSkip = 0.07;\r\n\tscope.mimeType = null;\r\n\r\n\t// Use webAudio for mobile, and HTML5 audio for computer\r\n\tscope.webAudio = ScarletsMedia.convert.isMobile()?true:false; // Mobile browser have security on HTML element\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\t// Avoid webAudio for computer browser because memory usage\r\n\r\n\tvar bufferHeader = false;\r\n\tvar bufferHeaderLength = false;\r\n\r\n\tscope.setBufferHeader = function(arrayBuffer){\r\n\t\tif(!arrayBuffer){\r\n\t\t\tbufferHeader = bufferHeaderLength = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tbufferHeader = arrayBuffer;\r\n\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\r\n\t\t// Find buffer skip\r\n\t\tif(scope.audioContext)\r\n\t\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t\tscope.bufferSkip = audioBuffer.duration;\r\n\t\t\t});\r\n\t}\r\n\r\n\tvar initAudioEvent = function(i){\r\n\t\tscope.bufferElement[i].onended = function(){\r\n\t\t\tif(scope.debug) console.log(\"Buffer ended with ID: \"+i);\r\n\r\n\t\t\tif(!scope.webAudio){ // HTML5 Audio\r\n\t\t\t\tURL.revokeObjectURL(scope.bufferElement[i].src);\r\n\t\t\t\tscope.bufferElement[i].src = '';\r\n\t\t\t} else this.disconnect(0);\r\n\r\n\t\t\tif(!scope.realtime){\r\n\t\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t\t\tscope.playing = false;\r\n\t\t\t\tscope.buffering = true;\r\n\t\t\t\tscope.playAvailable();\r\n\r\n\t\t\t\tif(scope.bufferAvailable.indexOf(false)!=-1&&scope.bufferPending.length!=0)\r\n\t\t\t\t\tfillEmptyBuffer();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// First initialization\r\n\tfor (var i = 0; i < bufferElement; i++) addBufferElement(i);\r\n\tfunction addBufferElement(i){\r\n\t\tif(scope.webAudio){\r\n\t\t\tscope.bufferElement.push(scope.audioContext.createBufferSource());\r\n\t\t\tscope.bufferAvailable.push(false);\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tvar audioHandler = new Audio();\r\n\t\t\tif(audioHandler){\r\n\t\t\t\tscope.bufferElement.push(audioHandler);\r\n\t\t\t\tscope.bufferAvailable.push(false);\r\n\t\t\t\tinitAudioEvent(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeaderLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeaderLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tif(!scope.streaming) return;\r\n\t\tvar streamingTime = arrayBuffer[1];\r\n\t\tscope.realtime = false;\r\n\r\n\t\tif(chunksDuration){\r\n\t\t\tvar unplayed = scope.bufferPending.length;\r\n\t\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\t\tif(scope.bufferAvailable[i]) unplayed++;\r\n\t\t\t}\r\n\t\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) \r\n\t\t\t\t\t\t\t\t+ chunksDuration*unplayed + scope.audioContext.baseLatency;\r\n\t\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.push(arrayBuffer[0]);\r\n\t\tfillEmptyBuffer();\r\n\r\n\t\tif(scope.buffering)\r\n\t\t\tscope.playAvailable();\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tvar transferFunction = scope.bufferElement[index].onended;\r\n\t\tscope.bufferElement[index] = scope.audioContext.createBufferSource();\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\tscope.bufferElement[index].onended = transferFunction;\r\n\t}\r\n\r\n\tvar fileReader = new FileReader();\r\n\tvar realtimeBufferInterval = 0; // Need 3 bufferElement, other than this will give lower quality\r\n\tscope.realtimeBufferPlay = function(arrayBuffer){\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer[0].byteLength);\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - arrayBuffer[1]) +\r\n\t\t\tchunksDuration/1000 + scope.audioContext.baseLatency;\r\n\r\n\t\tscope.realtime = true;\r\n\t\t\r\n\t\tvar index = realtimeBufferInterval;\r\n\t\trealtimeBufferInterval++;\r\n\t\tif(realtimeBufferInterval > 2)\r\n\t\t\trealtimeBufferInterval = 0;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, arrayBuffer[0]], {type:scope.mimeType}));\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tURL.revokeObjectURL(scope.bufferElement[index].src);\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, arrayBuffer[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\t}\r\n\r\n\tvar fillEmptyBuffer = function(){\r\n\t\tvar index = scope.bufferAvailable.indexOf(false, scope.currentBuffer);\r\n\t\tif(index==-1)\r\n\t\t\tindex = scope.bufferAvailable.indexOf(false);\r\n\t\tif(index==-1||scope.bufferPending.length==0)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.webAudio){\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tscope.audioContext.decodeAudioData(this.result, function(buffer){\r\n\t\t\t\t\twebAudioBufferInsert(index, buffer);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t} else { // HTML5 Audio\r\n\t\t\tscope.bufferElement[index].src = URL.createObjectURL(new Blob([bufferHeader, scope.bufferPending[0]], {type:scope.mimeType}));\r\n\t\t\tscope.bufferElement[index].load();\r\n\t\t}\r\n\r\n\t\tscope.bufferPending.shift();\r\n\t\tscope.bufferAvailable[index] = true;\r\n\r\n\t\tif(scope.buffering) scope.playAvailable();\r\n\t\tif(scope.debug) console.log(\"Buffer updated with ID: \"+index);\r\n\t}\r\n\r\n\tscope.playBuffer = function(index){\r\n\t\tif(!scope.bufferElement[index].duration)\r\n\t\t\treturn;\r\n\r\n\t\tif(scope.debug) console.log(\"Current stream duration: \"+scope.bufferElement[index].duration);\r\n\r\n\t\tif(chunksDuration===false){ //Skip to end to get current duration\r\n\t\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tscope.buffering = false;\r\n\t\tscope.playing = true;\r\n\t\tchunksDuration = scope.bufferElement[index].duration;\r\n\t\tif(scope.bufferElement[index].start)\r\n\t\t\tscope.bufferElement[index].start(scope.bufferSkip);\r\n\t\telse {\r\n\t\t\tscope.bufferElement[index].play();\r\n\t\t\tscope.bufferElement[index].currentTime = scope.bufferSkip;\r\n\t\t}\r\n\r\n\t\tscope.currentBuffer = index;\r\n\t\tif(scope.debug) console.log(\"Playing buffer ID: \"+scope.currentBuffer);\r\n\t}\r\n\r\n\tscope.playAvailable = function(){\r\n\t\tif(scope.playing) return;\r\n\r\n\t\tif(scope.bufferAvailable[scope.currentBuffer])\r\n\t\t\treturn scope.playBuffer(scope.currentBuffer);\r\n\r\n\t\telse{\r\n\t\t\tvar index = scope.bufferAvailable.indexOf(true, scope.currentBuffer);\r\n\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\r\n\t\t\telse{ // Scan from first array\r\n\t\t\t\tindex = scope.bufferAvailable.indexOf(true);\r\n\t\t\t\tif(index!=-1) return scope.playBuffer(index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.streaming = scope.buffering = true;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tscope.bufferPending.splice(0);\r\n\t\tfor (var i = 0; i < bufferElement; i++) {\r\n\t\t\tscope.bufferElement[i].stop();\r\n\t\t\tinitAudioEvent(i);\r\n\t\t\tscope.bufferAvailable[i] = false;\r\n\t\t}\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tscope.currentBuffer = 0;\r\n\t}\r\n}","/*\r\n\tScarletsFiction MediaStream Library\r\n\t\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n\t\r\n\tMake sure you include this header on this script\r\n*/\r\n'use strict';\r\n\r\n// Initialize global data\r\nwindow.ScarletsMedia = {\r\n\taudioContext: window.AudioContext ? new AudioContext() : false,\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\telementNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t}\r\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nwindow.ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\tif(element.tagName.toLowerCase() === 'video')\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tself.play = function(callback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\telement.play();\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, callback);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.play();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i]}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload) element.load();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload:function(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd:function(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove:function(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext:function(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious:function(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay:function(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tself.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle:function(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// streamInfo = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nwindow.ScarletsMediaPresenter = function(streamInfo, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\t//var streamInfo = {\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    }, \r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\r\n\tscope.mediaGranted = false;\r\n\r\n\tvar fileReader = new FileReader();\r\n\tscope.options = {};\r\n\tif(streamInfo.audio&&!streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/webm'))\r\n\t\t\tscope.options.mimeType = 'audio/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/ogg'))\r\n\t\t\tscope.options.mimeType = 'audio/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('audio/mp4'))\r\n\t\t\tscope.options.mimeType = 'audio/mp4';\r\n\t}\r\n\telse if(!streamInfo.audio&&streamInfo.video){\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp9\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp9\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vp8\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vp8\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/webm;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"opus\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"opus\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg;codecs=\"vorbis\"'))\r\n\t\t\tscope.options.mimeType = 'video/ogg;codecs=\"vorbis\"';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/ogg'))\r\n\t\t\tscope.options.mimeType = 'video/ogg';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4;codecs=\"mp4a.40.5'))\r\n\t\t\tscope.options.mimeType = 'video/mp4;codecs=\"mp4a.40.5';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\telse{\r\n\t\tif(MediaRecorder.isTypeSupported('video/webm'))\r\n\t\t\tscope.options.mimeType = 'video/webm';\r\n\t\telse if(MediaRecorder.isTypeSupported('video/mp4'))\r\n\t\t\tscope.options.mimeType = 'video/mp4';\r\n\t}\r\n\r\n\tvar recordingInterval = false;\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, scope.options);\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\tscope.mediaRecorder.requestData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e) {\r\n\t\t\tfileReader.onload = function() {\r\n\t\t\t\tvar arrayBuffer = this.result;\r\n\r\n\t\t\t\tif(bufferHeaderLength===false){\r\n\t\t\t\t\tbufferHeaderLength = arrayBuffer.byteLength;\r\n\t\t\t\t\tif(bufferHeaderLength==0){\r\n\t\t\t\t\t\tbufferHeaderLength = false;\r\n\t\t\t\t\t\tsetTimeout(function(){scope.mediaRecorder.requestData()}, 1);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// ToDo: Clean media header\r\n\t\t\t\t\tscope.bufferHeader = arrayBuffer;\r\n\r\n\t\t\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\t\t\tscope.onRecordingReady(scope.bufferHeader);\r\n\t\t\t\t\tscope.recordingReady = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(scope.onBufferProcess){\r\n\t\t\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\t\t\tscope.onBufferProcess([arrayBuffer, streamingTime]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tfileReader.readAsArrayBuffer(e.data);\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start();\r\n\r\n\t\t// Stop recording after 3 seconds and broadcast it to server\r\n\t\trecordingInterval = setInterval(function() {\r\n\t\t\tif(!scope.recordingReady) return;\r\n\t\t\tscope.mediaRecorder.requestData();\r\n\t\t}, latency);\r\n\t}\r\n\r\n\tscope.startRecording = function(){\r\n\t\tif(!scope.mediaGranted || !scope.mediaRecorder.stream || !scope.mediaRecorder.stream.active){\r\n\t\t\tscope.recordingReady = false;\r\n\t\t\tnavigator.mediaDevices.getUserMedia(streamInfo).then(mediaGranted).catch(console.error);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.mediaRecorder.start();\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tclearInterval(recordingInterval);\r\n\t\tscope.mediaRecorder.stop();\r\n\t\tif(!scope.mediaRecorder.stream.stop){\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t} else scope.mediaRecorder.stream.stop();\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = null;\r\n\t\tscope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tscope.recording = false;\r\n\t};\r\n}","ScarletsMedia.extra = {\r\n\tisMobile:function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t},\r\n\tobjectPropertyLinker:function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t},\r\n\r\n\tnormalize:function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t},\r\n\r\n\tdenormalize:function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t},\r\n\r\n\tmaxFade:0,\r\n\tfadeNumber:function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tthis.maxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(this.maxFade>=100) clearInterval(timer);\r\n\t\t\tthis.maxFade++;\r\n\t\t\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\t\t\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(onIncrease) onIncrease(current); \r\n\t\t}, interval);\r\n\t}\r\n};\r\n\r\n// Unlock mobile media security\r\nif(ScarletsMedia.extra.isMobile()){\r\n\t(function(){\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar mobileMediaUnlock = function(e){\r\n\t\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\t\tsource.buffer = emptyBuffer;\r\n\t\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\t\tsource.onended = function(){\r\n\t\t\t\tsource.disconnect(0);\r\n\t\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\t\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\t\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\t\t\t}\r\n\r\n\t\t\t// Play the empty buffer.\r\n\t\t\tif(!source.start) source.noteOn(0);\r\n\t\t\telse source.start(0);\r\n\t\t\tScarletsMedia.audioContext.resume();\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n\t})();\r\n}","ScarletsMedia.chorus = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.conReverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:function(buffer){\r\n\t\t\treverbNode.buffer = buffer;\r\n\t\t},\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      reverbNode.buffer = buffer;\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\tpeak: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.delay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.distortion = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.dubDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\t// Calculate bandpass width\r\n    var width = (freq.length - 3);\r\n    if(width <= 1) width = 1.1;\r\n\r\n    width = (4 - 4 / width).toFixed(2);\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tvar gain = context.createGain(); // Gain control\r\n        filter.Q.value = 1.0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowpass';\r\n        else if(i === lastIndex) filter.type = 'highpass';\r\n        else {\r\n        \tfilter.type = 'bandpass';\r\n        \tfilter.Q.value = width;\r\n        }\r\n\r\n\t\tsourceNode.connect(filter);\r\n\r\n    \tfilter.connect(gain);\r\n    \tgain.connect(output);\r\n        equalizer[freq[i]] = [gain, filter];\r\n\t}\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, gain){ // value: 0 ~ 2\r\n\t\t\tif(gain === undefined) return equalizer[frequency][0].gain.value;\r\n\t\t\tequalizer[frequency][0].gain.value = gain;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]][0].disconnect(); // gain\r\n\t    \t\tequalizer[freq[i]][1].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.fade = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.flanger = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.harmonizer = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMedia.noise = function(){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.pingPongDelay = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.reverb = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.stereoPanner = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMedia.tremolo = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMedia.vibrato = function(sourceNode){\r\n\tvar context = this.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.error(\"The vibrato effect still need some maintenance\");\r\n\r\n    var filter = context.createBiquadFilter();\r\n\tfilter.type = 'peaking';\r\n\tfilter.gain.value = 1;\r\n\tfilter.Q.value = 1\r\n\tfilter.connect(output);\r\n\r\n    sourceNode.connect(filter);\r\n\r\n\tvar vibratoGainNode = context.createGain();\r\n\tvibratoGainNode.gain.value = 30;\r\n\tvibratoGainNode.connect(filter.detune);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(vibratoGainNode);\r\n\tlfoNode.frequency.value = 5;\r\n\tlfoNode.start(0);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};"]}